CInputConfigView::CInputConfigView()
{
	this.m_nBaseZ = 15000;
	this.m_nTabHeight = 32;
	this.m_nExitBarHeight = 32;
	this.m_nOnCursorObject = -1;
}

int CInputConfigView::Run(ref array@string TabNameList)
{
	this.Create(TabNameList);
	SYS_画面更新(1, 100, 0, 0);
	this.m_nExitCode = -1;
	this.RunLoop();
	this.Release();
	return this.m_nExitCode;
}

void CInputConfigView::Create(ref array@string TabNameList)
{
	CConfigCommonViewCreater ConfigCommonViewCreater;
	ConfigCommonViewCreater.CreateTab(this.m_ConfigTabView, this.m_nBaseZ + 1, 3, TabNameList);
	ConfigCommonViewCreater.CreateBaseSprite(this.m_BaseSprite, 3, this.m_nBaseZ);
	ConfigCommonViewCreater.CreateExitBar(this.m_ExitBar, this.m_nBaseZ + 1);
	this.CreateHideUnmoveMouseCursorCheckBox();
	this.CreateWheelForwardCheckBox();
	this.CreateQuickSaveConfirmCheckBox();
	this.CreateQuickLoadConfirmCheckBox();
	this.CreateSaveConfirmCheckBox();
	this.CreateLoadConfirmCheckBox();
	this.m_SpaceKeyClick.Init(32, true);
	this.m_LButtonClick.Init(1, true);
	this.m_RButtonClick.Init(2, true);
	this.m_EscapeKeyClick.Init(27, true);
}

void CInputConfigView::Release()
{
	this.m_LoadConfirmCheckBoxSprite.Release();
	this.m_SaveConfirmCheckBoxSprite.Release();
	this.m_QuickLoadConfirmCheckBoxSprite.Release();
	this.m_QuickSaveConfirmCheckBoxSprite.Release();
	this.m_WheelForwardBacksceneCheckBoxSprite.Release();
	this.m_WheelForwardBacklogCheckBoxSprite.Release();
	this.m_WheelForwardTextSprite.Release();
	this.m_HideUnmoveMouseCursorCheckBoxSprite.Release();
	this.m_ExitBar.Release();
	this.m_BaseSprite.Release();
	this.m_ConfigTabView.Release();
}

void CInputConfigView::CreateHideUnmoveMouseCursorCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_HideUnmoveMouseCursorCheckBoxSprite.CreateSampleSprite(20, 64, this.m_nBaseZ + 1, 20, 20);
	this.m_HideUnmoveMouseCursorCheckBoxSprite.SetTextCharSpace(-4);
	this.m_HideUnmoveMouseCursorCheckBoxSprite.SetText("一定時間マウスカーソルが動かなければ非表示にする", CharProperty);
	int nHideUnmoveMouseCursor = 0;
	SystemService.GetMouseCursorConfig(0, nHideUnmoveMouseCursor);
	this.m_HideUnmoveMouseCursorCheckBoxSprite.SetShowCheckMark(nHideUnmoveMouseCursor != 0);
}

void CInputConfigView::CreateWheelForwardCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(18);
	CharProperty.SetColor(CF_CASColor(255, 128, 128, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_WheelForwardTextSprite.SetText("マウスホイール↑回転", CharProperty);
	this.m_WheelForwardTextSprite.SetPos(20, 160);
	this.m_WheelForwardTextSprite.SetZ(this.m_nBaseZ + 1);
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_WheelForwardBacklogCheckBoxSprite.CreateSampleSprite(20, 190, this.m_nBaseZ + 1, 20, 20);
	this.m_WheelForwardBacklogCheckBoxSprite.SetTextCharSpace(-4);
	this.m_WheelForwardBacklogCheckBoxSprite.SetText("バックログ", CharProperty);
	this.m_WheelForwardBacksceneCheckBoxSprite.CreateSampleSprite(20, 218, this.m_nBaseZ + 1, 20, 20);
	this.m_WheelForwardBacksceneCheckBoxSprite.SetTextCharSpace(-4);
	this.m_WheelForwardBacksceneCheckBoxSprite.SetText("バックシーン", CharProperty);
	this.m_WheelForwardBacklogCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward == 0);
	this.m_WheelForwardBacksceneCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward != 0);
}

void CInputConfigView::CreateQuickSaveConfirmCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_QuickSaveConfirmCheckBoxSprite.CreateSampleSprite(20, 280, this.m_nBaseZ + 1, 20, 20);
	this.m_QuickSaveConfirmCheckBoxSprite.SetTextCharSpace(-4);
	this.m_QuickSaveConfirmCheckBoxSprite.SetText("クイックセーブ時に確認をおこなう", CharProperty);
	this.m_QuickSaveConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigQuickSaveConfirm);
}

void CInputConfigView::CreateQuickLoadConfirmCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_QuickLoadConfirmCheckBoxSprite.CreateSampleSprite(20, 308, this.m_nBaseZ + 1, 20, 20);
	this.m_QuickLoadConfirmCheckBoxSprite.SetTextCharSpace(-4);
	this.m_QuickLoadConfirmCheckBoxSprite.SetText("クイックロード時に確認をおこなう", CharProperty);
	this.m_QuickLoadConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigQuickLoadConfirm);
}

void CInputConfigView::CreateSaveConfirmCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_SaveConfirmCheckBoxSprite.CreateSampleSprite(20, 336, this.m_nBaseZ + 1, 20, 20);
	this.m_SaveConfirmCheckBoxSprite.SetTextCharSpace(-4);
	this.m_SaveConfirmCheckBoxSprite.SetText("セーブ時に確認をおこなう", CharProperty);
	this.m_SaveConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigSaveConfirm);
}

void CInputConfigView::CreateLoadConfirmCheckBox()
{
	CASCharSpriteProperty CharProperty;
	CharProperty.SetSize(20);
	CharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	CharProperty.SetEdgeWeight(1.0);
	CharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
	this.m_LoadConfirmCheckBoxSprite.CreateSampleSprite(20, 364, this.m_nBaseZ + 1, 20, 20);
	this.m_LoadConfirmCheckBoxSprite.SetTextCharSpace(-4);
	this.m_LoadConfirmCheckBoxSprite.SetText("ロード時に確認をおこなう", CharProperty);
	this.m_LoadConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigLoadConfirm);
}

void CInputConfigView::RunLoop()
{
	for (; ; )
	{
		if (!this.CheckInput())
		{
			break;
		}
		UpdateView(true);
	}
}

bool CInputConfigView::CheckInput()
{
	int nPrevOnCursorObject = this.m_nOnCursorObject;
	this.m_nOnCursorObject = -1;
	this.m_ConfigTabView.Update();
	if (this.m_nOnCursorObject == -1)
	{
		int nObject = this.m_ConfigTabView.GetOnMouseCursorObject();
		if (nObject != -1)
		{
			this.m_nOnCursorObject = 10 + nObject;
		}
	}
	this.m_ExitBar.Update();
	if (this.m_nOnCursorObject == -1)
	{
		int nObject = this.m_ExitBar.GetOnMouseCursorObject();
		if (nObject != -1)
		{
			this.m_nOnCursorObject = 20 + nObject;
		}
	}
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_HideUnmoveMouseCursorCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 0;
		}
	}
	this.m_HideUnmoveMouseCursorCheckBoxSprite.SetShowCursor(this.m_HideUnmoveMouseCursorCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_WheelForwardBacklogCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 1;
		}
	}
	this.m_WheelForwardBacklogCheckBoxSprite.SetShowCursor(this.m_WheelForwardBacklogCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_WheelForwardBacksceneCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 2;
		}
	}
	this.m_WheelForwardBacksceneCheckBoxSprite.SetShowCursor(this.m_WheelForwardBacksceneCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_QuickSaveConfirmCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 3;
		}
	}
	this.m_QuickSaveConfirmCheckBoxSprite.SetShowCursor(this.m_QuickSaveConfirmCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_QuickLoadConfirmCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 4;
		}
	}
	this.m_QuickLoadConfirmCheckBoxSprite.SetShowCursor(this.m_QuickLoadConfirmCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_SaveConfirmCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 5;
		}
	}
	this.m_SaveConfirmCheckBoxSprite.SetShowCursor(this.m_SaveConfirmCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject == -1)
	{
		if (this.m_LoadConfirmCheckBoxSprite.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 6;
		}
	}
	this.m_LoadConfirmCheckBoxSprite.SetShowCursor(this.m_LoadConfirmCheckBoxSprite.IsMouseCursorInRect());
	if (this.m_nOnCursorObject != -1 && nPrevOnCursorObject != this.m_nOnCursorObject)
	{
		this.PlaySoundUnderCursor();
	}
	if (this.m_SpaceKeyClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_RButtonClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_EscapeKeyClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_LButtonClick.IsClick(this.m_nOnCursorObject) && this.m_nOnCursorObject != -1)
	{
		if (this.m_nOnCursorObject == 0)
		{
			this.PlaySoundDecide();
			int nHideUnmoveMouseCursor = 0;
			SystemService.GetMouseCursorConfig(0, nHideUnmoveMouseCursor);
			nHideUnmoveMouseCursor = nHideUnmoveMouseCursor != 0 ? 0 : 1;
			SystemService.SetMouseCursorConfig(0, nHideUnmoveMouseCursor);
			this.m_HideUnmoveMouseCursorCheckBoxSprite.SetShowCheckMark(nHideUnmoveMouseCursor != 0);
		}
		else if (this.m_nOnCursorObject == 1)
		{
			this.PlaySoundDecide();
			g_nKeyConfigMouseWheelForward = 0;
			this.m_WheelForwardBacklogCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward == 0);
			this.m_WheelForwardBacksceneCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward != 0);
		}
		else if (this.m_nOnCursorObject == 2)
		{
			this.PlaySoundDecide();
			g_nKeyConfigMouseWheelForward = 1;
			this.m_WheelForwardBacklogCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward == 0);
			this.m_WheelForwardBacksceneCheckBoxSprite.SetShowCheckMark(g_nKeyConfigMouseWheelForward != 0);
		}
		else if (this.m_nOnCursorObject == 3)
		{
			this.PlaySoundDecide();
			g_ConfigQuickSaveConfirm = !g_ConfigQuickSaveConfirm;
			this.m_QuickSaveConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigQuickSaveConfirm);
		}
		else if (this.m_nOnCursorObject == 4)
		{
			this.PlaySoundDecide();
			g_ConfigQuickLoadConfirm = !g_ConfigQuickLoadConfirm;
			this.m_QuickLoadConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigQuickLoadConfirm);
		}
		else if (this.m_nOnCursorObject == 5)
		{
			this.PlaySoundDecide();
			g_ConfigSaveConfirm = !g_ConfigSaveConfirm;
			this.m_SaveConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigSaveConfirm);
		}
		else if (this.m_nOnCursorObject == 6)
		{
			this.PlaySoundDecide();
			g_ConfigLoadConfirm = !g_ConfigLoadConfirm;
			this.m_LoadConfirmCheckBoxSprite.SetShowCheckMark(g_ConfigLoadConfirm);
		}
		else if (this.m_nOnCursorObject == 20 + 0)
		{
			this.PlaySoundDecide();
			ゲーム終了();
		}
		else if (this.m_nOnCursorObject == 20 + 1)
		{
			this.PlaySoundDecide();
			タイトルに戻る();
		}
		else if (this.m_nOnCursorObject == 20 + 2)
		{
			this.PlaySoundDecide();
			return false;
		}
		else if (this.m_nOnCursorObject >= 10 && this.m_nOnCursorObject < 16 && this.m_nOnCursorObject - 10 != 3)
		{
			this.PlaySoundDecide();
			this.m_nExitCode = this.m_nOnCursorObject - 10;
			return false;
		}
	}
	return true;
}

void CInputConfigView::PlaySoundDecide()
{
	if (g_ConfigModeDocument.GetSoundDecide() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundDecide());
}

void CInputConfigView::PlaySoundUnderCursor()
{
	if (g_ConfigModeDocument.GetSoundUnderCursor() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundUnderCursor());
}

void CInputConfigView::PlaySoundCancel()
{
	if (g_ConfigModeDocument.GetSoundCancel() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundCancel());
}

