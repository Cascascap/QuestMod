int main()
{
	SYS_Init();
	game_main();
	system.Error("main関数の終端に到達しました");
	for (; ; )
	{
		system.Peek();
		system.Sleep(1);
	}
	return 0;
}

void SYS_Init()
{
	CommonSystemData.SetFullPathSaveFileName(system.GetSaveFolderName() + "\\CommonSystemData.sav");
	if (!CommonSystemData.LoadAtStartup())
	{
		system.Output("CommonSystemDataセーブファイルの読み込みに失敗しました\n");
	}
	_選択エリア.Alloc(40);
	_文字入力エリア.Alloc(40);
	_メッセージ保管.Alloc(40);
	ch音楽.Alloc(3);
	_字枠デフォルト動作 = 2;
	g_MessageWindowModelManager.Init();
	_選択枠 = 1;
	_SetMenuAreaDefaultParameters();
	int w = 320;
	int h = 32;
	int i = 0;
	for (i = 1; i < 40; ++i)
	{
		文字入力エリア_t t;
		t.Ｘ = (ChipmunkSpriteEngine.GetScreenWidth() - w) / 2;
		t.Ｙ = (ChipmunkSpriteEngine.GetScreenHeight() - h) / 2;
		t.Ｚ = 0;
		t.ＣＧ名 = "";
		t.幅 = w;
		t.高 = h;
		t.塗Ｒ = 0;
		t.塗Ｇ = 0;
		t.塗Ｂ = 0;
		t.塗率 = 200;
		t.枠タイプ = 3;
		t.枠Ｒ = 255;
		t.枠Ｇ = 240;
		t.枠Ｂ = 192;
		t.文字Ｘ = 6;
		t.文字Ｙ = 6;
		t.フォント = 0;
		t.文字サイズ = 20;
		t.文字Ｒ = 255;
		t.文字Ｇ = 255;
		t.文字Ｂ = 255;
		t.文字飾上 = 0;
		t.文字飾右 = 0;
		t.文字飾下 = 0;
		t.文字飾左 = 0;
		t.文字飾Ｒ = 0;
		t.文字飾Ｇ = 0;
		t.文字飾Ｂ = 0;
		t.m_nMaxTextLengthSJIS = -1;
		_文字入力エリア[i] = t;
	}
	_Ｍフォント = -1;
	_Ｍサイズ = -1;
	_g_Ｍ太さ = -2147483648;
	_ＭＲ = -1;
	_ＭＧ = -1;
	_ＭＢ = -1;
	_Ｍ速度 = -1;
	_Ｍ配置 = -1;
	_Ｍ飾上 = -1;
	_Ｍ飾右 = -1;
	_Ｍ飾下 = -1;
	_Ｍ飾左 = -1;
	_Ｍ飾Ｒ = -1;
	_Ｍ飾Ｇ = -1;
	_Ｍ飾Ｂ = -1;
	_効果音ボリューム = 100;
	_ループ効果音ボリューム = 100;
	ch音楽[0] = 1;
	ch音楽[1] = 2;
	chループ効果音 = 3;
	_全表示効果番号 = 1;
	_全表示効果時間 = 200;
	g_fMessageSpeedRate = 0.5;
	g_fAutoModeWaitTimeRate = 0.5;
	g_fReadedMessageSkipWaitTimeRate = 1.0;
	g_fDoesNotReadMessageSkipWaitTimeRate = 0.666666686534882;
	SYS_Init_JoystickButtonAssignment();
	g_InputJoypadCallbackList.Alloc(50);
	PassRegister.SetFileName(0, "ＣＧモード.asd");
	PassRegister.SetFileName(1, "回想モード.asd");
	PassRegister.SetFileName(2, "音楽モード.asd");
	SYS_セーブファイル削除(-2);
	SYS_セーブファイル削除(-3);
	SYS_セーブファイル削除(-4);
	g_bCanReturnBackSelect = false;
	SYS_クイックセーブファイル存在フラグ更新();
	SYS_システム共通ロード();
	SYS_共有ロード();
	KiwiSoundEngine.SetGlobalFocus(g_ConfigSoundGlobalFocus);
	g_ConfigModeDocument._Init();
	サウンドコンフィグ画面＿ボリューム要素全削除();
	サウンドコンフィグ画面＿ボリューム要素追加(0, "マスター");
	サウンドコンフィグ画面＿ボリューム要素追加(1, "ＢＧＭ");
	サウンドコンフィグ画面＿ボリューム要素追加(2, "効果音");
	サウンドコンフィグ画面＿ボリューム要素追加(3, "音声");
	ChipmunkSpriteEngine.SYSTEM_SetConfigOverFrameRateSleep(g_bConfigOverFrameRateSleep);
	ChipmunkSpriteEngine.SYSTEM_SetConfigSleepByInactiveWindow(g_bSleepByInactiveWindow);
	ChipmunkSpriteEngine.SYSTEM_SetConfigFrameSkipWhileMessageSkip(g_bConfigIsSpeedupForFrameSkip);
	CrayfishLogViewer.SetSaveFolderName(system.GetSaveFolderName());
	AFL_PlayTime_SetMinuteTime(0);
	g_PlayTimer.Reset();
}

void SYS_Init_JoystickButtonAssignment()
{
	g_JoystickButtonAssignmentTable.Alloc(50);
	g_JoystickButtonAssignmentTable.Fill(0, g_JoystickButtonAssignmentTable.Numof(), -1);
	g_JoystickButtonAssignmentTable[0] = SYS_GetDefaultJoystickButtonAssignment(0);
	g_JoystickButtonAssignmentTable[1] = SYS_GetDefaultJoystickButtonAssignment(1);
	g_JoystickButtonAssignmentTable[2] = SYS_GetDefaultJoystickButtonAssignment(2);
	g_JoystickButtonAssignmentTable[3] = SYS_GetDefaultJoystickButtonAssignment(3);
	g_JoystickButtonAssignmentTable[4] = SYS_GetDefaultJoystickButtonAssignment(4);
	g_JoystickButtonAssignmentTable[5] = SYS_GetDefaultJoystickButtonAssignment(5);
	g_JoystickButtonAssignmentTable[6] = SYS_GetDefaultJoystickButtonAssignment(6);
	g_JoystickButtonAssignmentTable[7] = SYS_GetDefaultJoystickButtonAssignment(7);
	g_JoystickButtonAssignmentTable[8] = SYS_GetDefaultJoystickButtonAssignment(8);
	g_JoystickButtonAssignmentTable[15] = SYS_GetDefaultJoystickButtonAssignment(15);
	g_JoystickButtonAssignmentTable[16] = SYS_GetDefaultJoystickButtonAssignment(16);
	g_JoystickButtonAssignmentTable[17] = SYS_GetDefaultJoystickButtonAssignment(17);
	g_JoystickButtonAssignmentTable[18] = SYS_GetDefaultJoystickButtonAssignment(18);
	g_JoystickButtonAssignmentTable[19] = SYS_GetDefaultJoystickButtonAssignment(19);
	g_JoystickButtonAssignmentTable[9] = SYS_GetDefaultJoystickButtonAssignment(9);
	g_JoystickButtonAssignmentTable[10] = SYS_GetDefaultJoystickButtonAssignment(10);
	g_JoystickButtonAssignmentTable[11] = SYS_GetDefaultJoystickButtonAssignment(11);
	g_JoystickButtonAssignmentTable[12] = SYS_GetDefaultJoystickButtonAssignment(12);
	g_JoystickButtonAssignmentTable[20] = SYS_GetDefaultJoystickButtonAssignment(20);
}

int SYS_GetDefaultJoystickButtonAssignment(int JoystickCode)
{
	switch (JoystickCode)
	{
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 6;
		case 5:
			return 7;
		case 6:
			return 5;
		case 7:
			return 8;
		case 8:
			return 9;
		case 15:
			return 10;
		case 16:
			return 3;
		case 17:
			return 4;
		case 18:
			return 11;
		case 19:
			return 12;
		case 9:
			return 3;
		case 10:
			return 4;
		case 11:
			return 11;
		case 12:
			return 12;
		case 20:
			return 5;
	}
	return -1;
}

void CG_ERROR(string cg, int nest)
{
	int i = 0;
	for (i = 0; i < _CG_ERROR.Numof(); ++i)
	{
		if (_CG_ERROR[i] == cg)
		{
			return;
		}
	}
	ERROR("[%s]ロード失敗" % cg, nest + 1);
	_CG_ERROR.PushBack(cg);
}

float SYS_メッセージ速度比率()
{
	if (g_fMessageSpeedRate >= 0.5)
	{
		return (1.0 - g_fMessageSpeedRate) * 2.0;
	}
	return (0.5 - g_fMessageSpeedRate) * 6.0 + 1.0;
}

int SYS_既読メッセージスキップ待ち時間比率()
{
	return 150.0 - g_fReadedMessageSkipWaitTimeRate * 150.0;
}

int SYS_未読メッセージスキップ待ち時間比率()
{
	return 150.0 - g_fDoesNotReadMessageSkipWaitTimeRate * 150.0;
}

void SYS_メッセージスキップ待ち()
{
	if (!g_bConfigIsSpeedupForFrameSkip)
	{
		int 待ち時間 = 0;
		if (SYS_未読スキップ中確認())
		{
			待ち時間 = SYS_未読メッセージスキップ待ち時間比率();
		}
		else if (SYS_既読スキップ中確認())
		{
			待ち時間 = SYS_既読メッセージスキップ待ち時間比率();
		}
		if (待ち時間 < 1)
		{
			return;
		}
		int 時間 = GetTickCount();
		while (GetTickCount() - 時間 < 待ち時間)
		{
			UpdateView(true);
		}
	}
}

void SYS_メッセージエリア(int Ｍ番号, int Ｘ, int Ｙ, int Ｚ, string ＣＧ名)
{
	if (Ｘ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).SetX(Ｘ);
	}
	if (Ｙ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).SetY(Ｙ);
	}
	if (Ｚ != -2147483648)
	{
		if (g_MessageWindowModelManager.GetZ() == 0 || Ｚ < g_MessageWindowModelManager.GetZ())
		{
			Ａ＿メッセージウィンドウＺ座標設定(Ｚ);
		}
	}
	if (!ＣＧ名.Empty())
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).SetCGName(ＣＧ名);
	}
}

void SYS_メッセージエリア余白(int Ｍ番号, int t, int r, int b, int l)
{
	if (t != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).余白上 = t;
	}
	if (r != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).余白右 = r;
	}
	if (b != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).余白下 = b;
	}
	if (l != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).余白左 = l;
	}
}

void SYS_字間隔(int Ｍ番号, int 字間, int 行間)
{
	if (字間 != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).字間 = 字間;
	}
	if (行間 != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).行間 = 行間;
	}
}

void SYS_キー待ちマーク(int Ｍ番号, string 基準ＣＧ名, int 開始番号, int ＣＧ枚数, int 時間)
{
	if (!基準ＣＧ名.Empty())
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).基準ＣＧ名 = 基準ＣＧ名;
	}
	if (開始番号 != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).開始番号 = 開始番号;
	}
	if (ＣＧ枚数 != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マーク枚数 = ＣＧ枚数;
	}
	if (時間 != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マーク速度 = 時間;
	}
}

void SYS_キー待ちマーク位置(int Ｍ番号, int Ｘ, int Ｙ, int Ｘフラグ, int Ｙフラグ)
{
	if (Ｘ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マークＸ = Ｘ;
	}
	if (Ｙ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マークＹ = Ｙ;
	}
	if (Ｘフラグ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マークＸフラグ = Ｘフラグ;
	}
	if (Ｙフラグ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マークＹフラグ = Ｙフラグ;
	}
}

void SYS_キー待ちマーク文字(int Ｍ番号, string 文字, int サイズ)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マーク文字 = 文字;
	if (サイズ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).マーク文字サイズ = サイズ;
	}
}

bool SYS_キー待ちマーク文字表示状態取得()
{
	return _g_MsgKeyWaitAnime.IsShow();
}

void SYS_キー待ちマーク文字表示設定(bool bShow)
{
	_g_MsgKeyWaitAnime._SetShow(bShow, SYS_Ｍ送モード取得());
}

void SYS_オートモードＣＧ(int Ｍ番号, int インデックス番号, string ＣＧ名)
{
	if (!ＣＧ名.Empty())
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).m_オートモードＣＧ[インデックス番号] = ＣＧ名;
	}
}

void SYS_オートモードＣＧ位置(int Ｍ番号, int インデックス番号, int Ｘ, int Ｙ, int Ｚ)
{
	if (Ｘ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).オートモードＸ[インデックス番号] = Ｘ;
	}
	if (Ｙ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).オートモードＹ[インデックス番号] = Ｙ;
	}
	if (Ｚ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).オートモードＺ[インデックス番号] = Ｚ;
	}
}

void SYS_オートモードＣＧアニメーション時間(int Ｍ番号, int 時間)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).オートモードアニメーション時間 = 時間;
}

void SYS_既読スキップモードＣＧ(int Ｍ番号, int インデックス番号, string ＣＧ名)
{
	if (!ＣＧ名.Empty())
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).m_既読スキップモードＣＧ[インデックス番号] = ＣＧ名;
	}
}

void SYS_既読スキップモードＣＧ位置(int Ｍ番号, int インデックス番号, int Ｘ, int Ｙ, int Ｚ)
{
	if (Ｘ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).既読スキップモードＸ[インデックス番号] = Ｘ;
	}
	if (Ｙ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).既読スキップモードＹ[インデックス番号] = Ｙ;
	}
	if (Ｚ != -2147483648)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).既読スキップモードＺ[インデックス番号] = Ｚ;
	}
}

void SYS_既読スキップモードＣＧアニメーション時間(int Ｍ番号, int 時間)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).既読スキップモードアニメーション時間 = 時間;
}

void SYS_字初期値(int Ｍ番号, int フォント)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).フォント = フォント;
}

void SYS_字サイズ初期値(int Ｍ番号, int サイズ)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).SetFontSize(サイズ);
}

void SYS_字太初期値(int Ｍ番号, int _太さ)
{
	g_MessageWindowModelManager.GetMessageWindow(Ｍ番号)._文字太さ = _太さ;
}

void SYS_字色初期値(int Ｍ番号, int Ｒ, int Ｇ, int Ｂ)
{
	ref CMessageWindowModel MessageWindowModel = g_MessageWindowModelManager.GetMessageWindow(Ｍ番号);
	MessageWindowModel.文字Ｒ = Ｒ;
	MessageWindowModel.文字Ｇ = Ｇ;
	MessageWindowModel.文字Ｂ = Ｂ;
}

void SYS_字速度初期値(int Ｍ番号, int 時間)
{
	if (時間 == 0)
	{
		g_MessageWindowModelManager.GetMessageWindow(Ｍ番号).文字速度 = 時間;
	}
}

void SYS_字飾り初期値(int Ｍ番号, int p上, int p右, int p下, int p左, int pＲ, int pＧ, int pＢ)
{
	ref CMessageWindowModel MessageWindowModel = g_MessageWindowModelManager.GetMessageWindow(Ｍ番号);
	MessageWindowModel.飾上 = p上;
	MessageWindowModel.飾右 = p右;
	MessageWindowModel.飾下 = p下;
	MessageWindowModel.飾左 = p左;
	MessageWindowModel.飾Ｒ = pＲ;
	MessageWindowModel.飾Ｇ = pＧ;
	MessageWindowModel.飾Ｂ = pＢ;
}

void SYS_枠描画(int 枠タイプ, int sp, int 幅, int 高, int 塗Ｒ, int 塗Ｇ, int 塗Ｂ, int 塗率, int 枠Ｒ, int 枠Ｇ, int 枠Ｂ)
{
	switch (枠タイプ)
	{
		case 0:
			CreateSprite(sp, 幅, 高, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			break;
		case 1:
			CreateSprite(sp, 幅, 高, 0, 0, 0, 96);
			FillDualMap(sp, 1, 1, 幅 - 2, 高 - 2, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 2, 2, 幅 - 4, 高 - 4, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			break;
		case 2:
			CreateSprite(sp, 幅, 高, 0, 0, 0, 96);
			FillDualMap(sp, 1, 1, 幅 - 2, 高 - 2, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 4, 4, 幅 - 8, 高 - 8, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			break;
		case 3:
			CreateSprite(sp, 幅, 高, 0, 0, 0, 96);
			FillDualMap(sp, 1, 1, 幅 - 2, 高 - 2, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 2, 2, 幅 - 4, 高 - 4, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			FillDualMap(sp, 3, 3, 幅 - 6, 高 - 6, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 4, 4, 幅 - 8, 高 - 8, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			break;
		case 4:
			CreateSprite(sp, 幅, 高, 0, 0, 0, 96);
			FillDualMap(sp, 1, 1, 幅 - 2, 高 - 2, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 2, 2, 幅 - 4, 高 - 4, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			FillDualMap(sp, 3, 3, 幅 - 6, 高 - 6, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 5, 5, 幅 - 10, 高 - 10, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			FillDualMap(sp, 6, 6, 幅 - 12, 高 - 12, 枠Ｒ, 枠Ｇ, 枠Ｂ, 255);
			FillDualMap(sp, 7, 7, 幅 - 14, 高 - 14, 塗Ｒ, 塗Ｇ, 塗Ｂ, 塗率);
			break;
	}
}

void SYS_選択エリア２(int Ｓ番号, int 幅, int 高, int 塗Ｒ, int 塗Ｇ, int 塗Ｂ, int 塗率, int 枠タイプ, int 枠Ｒ, int 枠Ｇ, int 枠Ｂ)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (幅 != -2147483648)
	{
		_選択エリア[Ｓ番号].幅 = 幅;
	}
	if (高 != -2147483648)
	{
		_選択エリア[Ｓ番号].高 = 高;
	}
	if (塗Ｒ != -2147483648)
	{
		_選択エリア[Ｓ番号].塗Ｒ = 塗Ｒ;
	}
	if (塗Ｇ != -2147483648)
	{
		_選択エリア[Ｓ番号].塗Ｇ = 塗Ｇ;
	}
	if (塗Ｂ != -2147483648)
	{
		_選択エリア[Ｓ番号].塗Ｂ = 塗Ｂ;
	}
	if (塗率 != -2147483648)
	{
		_選択エリア[Ｓ番号].塗率 = 塗率;
	}
	if (枠タイプ != -2147483648)
	{
		_選択エリア[Ｓ番号].枠タイプ = 枠タイプ;
	}
	if (枠Ｒ != -2147483648)
	{
		_選択エリア[Ｓ番号].枠Ｒ = 枠Ｒ;
	}
	if (枠Ｇ != -2147483648)
	{
		_選択エリア[Ｓ番号].枠Ｇ = 枠Ｇ;
	}
	if (枠Ｂ != -2147483648)
	{
		_選択エリア[Ｓ番号].枠Ｂ = 枠Ｂ;
	}
}

void SYS_選択エリア余白(int Ｓ番号, int t, int r, int b, int l)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (t != -2147483648)
	{
		_選択エリア[Ｓ番号].余白上 = t;
	}
	if (r != -2147483648)
	{
		_選択エリア[Ｓ番号].余白右 = r;
	}
	if (b != -2147483648)
	{
		_選択エリア[Ｓ番号].余白下 = b;
	}
	if (l != -2147483648)
	{
		_選択エリア[Ｓ番号].余白左 = l;
	}
}

void SYS_選択エリア音設定(int Ｓ番号, int 決定, int 無効, int 移動１, int 移動２)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	_選択エリア[Ｓ番号].音決定 = 決定;
	_選択エリア[Ｓ番号].音無効 = 無効;
	_選択エリア[Ｓ番号].音移動１ = 移動１;
	_選択エリア[Ｓ番号].音移動２ = 移動２;
}

void SYS_選択文字設定(int Ｓ番号, int フォント, int サイズ, int Ｒ, int Ｇ, int Ｂ)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (フォント != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択可能字.フォント = フォント;
	}
	if (サイズ != -2147483648)
	{
		_選択エリア[Ｓ番号].文字サイズ = サイズ;
	}
	if (Ｒ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択可能字.文字Ｒ = Ｒ;
	}
	if (Ｇ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択可能字.文字Ｇ = Ｇ;
	}
	if (Ｂ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択可能字.文字Ｂ = Ｂ;
	}
}

void SYS_選択文字飾り設定(int pＳ番号, int p上, int p右, int p下, int p左, int pＲ, int pＧ, int pＢ)
{
	_選択エリア[pＳ番号].Ｓ番号 = pＳ番号;
	if (p上 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾上 = p上;
	}
	if (p右 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾右 = p右;
	}
	if (p下 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾下 = p下;
	}
	if (p左 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾左 = p左;
	}
	if (pＲ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾Ｒ = pＲ;
	}
	if (pＧ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾Ｇ = pＧ;
	}
	if (pＢ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択可能字.文字飾Ｂ = pＢ;
	}
}

void SYS_選択文字太字幅設定(int nNum, float fBoldWeight)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_fBoldWeight = fBoldWeight;
}

void SYS_選択文字字間隔設定(int nNum, int nCharSpace)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_nCharSpace = nCharSpace;
}

void SYS_選択不可文字設定(int Ｓ番号, int フォント, int Ｒ, int Ｇ, int Ｂ)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (フォント != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択不可字.フォント = フォント;
	}
	if (Ｒ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択不可字.文字Ｒ = Ｒ;
	}
	if (Ｇ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択不可字.文字Ｇ = Ｇ;
	}
	if (Ｂ != -2147483648)
	{
		_選択エリア[Ｓ番号]._選択不可字.文字Ｂ = Ｂ;
	}
}

void SYS_選択不可文字飾り設定(int pＳ番号, int p上, int p右, int p下, int p左, int pＲ, int pＧ, int pＢ)
{
	_選択エリア[pＳ番号].Ｓ番号 = pＳ番号;
	if (p上 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾上 = p上;
	}
	if (p右 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾右 = p右;
	}
	if (p下 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾下 = p下;
	}
	if (p左 != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾左 = p左;
	}
	if (pＲ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾Ｒ = pＲ;
	}
	if (pＧ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾Ｇ = pＧ;
	}
	if (pＢ != -2147483648)
	{
		_選択エリア[pＳ番号]._選択不可字.文字飾Ｂ = pＢ;
	}
}

void SYS_選択不可文字太字幅設定(int nNum, float fBoldWeight)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_fUnselectableBoldWeight = fBoldWeight;
}

void SYS_選択不可文字字間隔設定(int nNum, int nCharSpace)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_nUnselectableCharSpace = nCharSpace;
}

void SYS_選択カーソル文字飾り設定(int pＳ番号, int p上, int p右, int p下, int p左, int pＲ, int pＧ, int pＢ)
{
	_選択エリア[pＳ番号].Ｓ番号 = pＳ番号;
	if (p上 != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾上 = p上;
	}
	if (p右 != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾右 = p右;
	}
	if (p下 != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾下 = p下;
	}
	if (p左 != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾左 = p左;
	}
	if (pＲ != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾Ｒ = pＲ;
	}
	if (pＧ != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾Ｇ = pＧ;
	}
	if (pＢ != -2147483648)
	{
		_選択エリア[pＳ番号].選択文字飾Ｂ = pＢ;
	}
}

void SYS_選択カーソル文字太字幅設定(int nNum, float fBoldWeight)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_fSelectedBoldWeight = fBoldWeight;
}

void SYS_選択カーソル文字字間隔設定(int nNum, int nCharSpace)
{
	_選択エリア[nNum].Ｓ番号 = nNum;
	_選択エリア[nNum].m_nSelectedCharSpace = nCharSpace;
}

void SYS_選択文字配置設定(int Ｓ番号, int 配置, int 行間)
{
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (配置 != -2147483648)
	{
		_選択エリア[Ｓ番号].文字配置 = 配置;
	}
	if (行間 != -2147483648)
	{
		_選択エリア[Ｓ番号].行間 = 行間;
	}
}

void SYS_選択カーソル設定(int Ｓ番号, int タイプ, int Ｒ, int Ｇ, int Ｂ, int 字Ｒ, int 字Ｇ, int 字Ｂ)
{
	if (字Ｂ == -2147483648)
	{
		字Ｂ = -1;
	}
	if (字Ｇ == -2147483648)
	{
		字Ｇ = -1;
	}
	if (字Ｒ == -2147483648)
	{
		字Ｒ = -1;
	}
	_選択エリア[Ｓ番号].Ｓ番号 = Ｓ番号;
	if (タイプ != -2147483648)
	{
		_選択エリア[Ｓ番号].カーソルタイプ = タイプ;
	}
	if (Ｒ != -2147483648)
	{
		_選択エリア[Ｓ番号].カーソルＲ = Ｒ;
	}
	if (Ｇ != -2147483648)
	{
		_選択エリア[Ｓ番号].カーソルＧ = Ｇ;
	}
	if (Ｂ != -2147483648)
	{
		_選択エリア[Ｓ番号].カーソルＢ = Ｂ;
	}
	_選択エリア[Ｓ番号].選択文字Ｒ = 字Ｒ;
	_選択エリア[Ｓ番号].選択文字Ｇ = 字Ｇ;
	_選択エリア[Ｓ番号].選択文字Ｂ = 字Ｂ;
}

void SYS_文字入力エリア(int Ｉ番号, int Ｘ, int Ｙ, int Ｚ, string ＣＧ名)
{
	if (Ｘ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].Ｘ = Ｘ;
	}
	if (Ｙ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].Ｙ = Ｙ;
	}
	if (Ｚ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].Ｚ = Ｚ;
	}
	if (!ＣＧ名.Empty())
	{
		_文字入力エリア[Ｉ番号].ＣＧ名 = ＣＧ名;
	}
}

void SYS_文字入力エリア２(int Ｉ番号, int 幅, int 高, int 塗Ｒ, int 塗Ｇ, int 塗Ｂ, int 塗率, int 枠タイプ, int 枠Ｒ, int 枠Ｇ, int 枠Ｂ)
{
	if (幅 != -2147483648)
	{
		_文字入力エリア[Ｉ番号].幅 = 幅;
	}
	if (高 != -2147483648)
	{
		_文字入力エリア[Ｉ番号].高 = 高;
	}
	if (塗Ｒ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].塗Ｒ = 塗Ｒ;
	}
	if (塗Ｇ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].塗Ｇ = 塗Ｇ;
	}
	if (塗Ｂ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].塗Ｂ = 塗Ｂ;
	}
	if (塗率 != -2147483648)
	{
		_文字入力エリア[Ｉ番号].塗率 = 塗率;
	}
	if (枠タイプ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].枠タイプ = 枠タイプ;
	}
	if (枠Ｒ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].枠Ｒ = 枠Ｒ;
	}
	if (枠Ｇ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].枠Ｇ = 枠Ｇ;
	}
	if (枠Ｂ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].枠Ｂ = 枠Ｂ;
	}
}

void SYS_文字入力エリア文字(int Ｉ番号, int サイズ, int フォント, int Ｒ, int Ｇ, int Ｂ, int Ｘ, int Ｙ)
{
	if (サイズ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字サイズ = サイズ;
	}
	if (フォント != -2147483648)
	{
		_文字入力エリア[Ｉ番号].フォント = フォント;
	}
	if (Ｒ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字Ｒ = Ｒ;
	}
	if (Ｇ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字Ｇ = Ｇ;
	}
	if (Ｂ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字Ｂ = Ｂ;
	}
	if (Ｘ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字Ｘ = Ｘ;
	}
	if (Ｙ != -2147483648)
	{
		_文字入力エリア[Ｉ番号].文字Ｙ = Ｙ;
	}
}

void SYS_文字入力エリア文字飾り(int pＩ番号, int p上, int p右, int p下, int p左, int pＲ, int pＧ, int pＢ)
{
	if (p上 != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾上 = p上;
	}
	if (p右 != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾右 = p右;
	}
	if (p下 != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾下 = p下;
	}
	if (p左 != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾左 = p左;
	}
	if (pＲ != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾Ｒ = pＲ;
	}
	if (pＧ != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾Ｇ = pＧ;
	}
	if (pＢ != -2147483648)
	{
		_文字入力エリア[pＩ番号].文字飾Ｂ = pＢ;
	}
}

void SYS_文字入力エリアクリッピング文字数設定(int nIndex, int nMaxLengthSJIS)
{
	_文字入力エリア[nIndex].m_nMaxTextLengthSJIS = nMaxLengthSJIS;
}

void SYS_Ｍキー待ち(bool _ignore_read_skip_mode)
{
	if (!SYS_未読スキップ中確認() || _ignore_read_skip_mode)
	{
		_g_MsgKeyWait._Execute(_ignore_read_skip_mode, g_MessageTextView.GetDrawEndX(), g_MessageTextView.GetDrawEndY());
	}
	SYS_文字表示後画面揺らしクリア();
	_g_MouseWheel._Clear();
}

bool SYS_ホイールバック即確認()
{
	return _g_MouseWheel._IsBack();
}

bool SYS_ホイールバック確認()
{
	if (!_g_MouseWheel._IsBack())
	{
		return false;
	}
	int nCurrentTime = GetTickCount();
	if (_g_Ｍ送ホイール確認時刻 == -2147483648)
	{
		_g_Ｍ送ホイール確認時刻 = nCurrentTime;
		return true;
	}
	if (nCurrentTime > _g_Ｍ送ホイール確認時刻 + 200)
	{
		_g_Ｍ送ホイール確認時刻 = nCurrentTime;
		return true;
	}
	return false;
}

bool SYS_ホイールフォア即確認()
{
	return _g_MouseWheel._IsFore();
}

bool SYS_ホイールフォア確認()
{
	if (!_g_MouseWheel._IsFore())
	{
		return false;
	}
	int nCurrentTime = GetTickCount();
	if (_g_Ｍ送ホイール確認時刻 == -2147483648)
	{
		_g_Ｍ送ホイール確認時刻 = nCurrentTime;
		return true;
	}
	if (nCurrentTime > _g_Ｍ送ホイール確認時刻 + 200)
	{
		_g_Ｍ送ホイール確認時刻 = nCurrentTime;
		return true;
	}
	return false;
}

void SYS_ホイール回転時刻クリア()
{
	if (_g_MouseWheel._IsBack() || _g_MouseWheel._IsFore())
	{
		_g_Ｍ送ホイール確認時刻 = GetTickCount();
	}
}

void SYS_RunCommandMouseWheelForward()
{
	switch (g_nKeyConfigMouseWheelForward)
	{
		case 0:
			Ｓ＿バックログ();
			break;
		case 1:
			Ｓ＿バックシーン();
			break;
	}
}

void SYS_RestrainScreensaverWhileAutoMode()
{
	if (!g_bRestrainScreensaverWhileAutoMode)
	{
		return;
	}
	SystemService.RestrainScreensaver();
}

int SYS_オートモード待機時間計算(int TextLength)
{
	float fRate = (1.0 - g_fAutoModeWaitTimeRate) * 2.0 - 1.0;
	int WaitMessageLength = TextLength + 5;
	int TotalTime = WaitMessageLength * (100 + 100 * fRate);
	return TotalTime;
}

void SYS_画面更新(int 効果番号, int 効果時間, int デフォルト効果番号, int デフォルト効果時間)
{
	if (効果番号 < 0)
	{
		効果番号 = デフォルト効果番号;
	}
	if (効果時間 < 0)
	{
		効果時間 = デフォルト効果時間;
	}
	if (効果番号 == 0 || 効果時間 <= 0)
	{
		UpdateView(true);
		return;
	}
	SYS_効果番号チェック(効果番号);
	if (SYS_未読スキップ中確認())
	{
		UpdateView(true);
		return;
	}
	if (SYS_既読スキップ中確認())
	{
		UpdateView(true);
		return;
	}
	ChipmunkSpriteEngine.TRANS_Begin(効果番号);
	CASEffectKeyCancelChecker ASEffectKeyCancelChecker;
	ASEffectKeyCancelChecker.Init();
	CASTimer Timer;
	Timer.Reset();
	for (; ; )
	{
		int nTime = Timer.Get();
		if (nTime >= 効果時間)
		{
			break;
		}
		if (SYS_未読スキップ中確認())
		{
			break;
		}
		if (SYS_既読スキップ中確認())
		{
			break;
		}
		if (ASEffectKeyCancelChecker.IsCancel())
		{
			if (ASEffectKeyCancelChecker.IsClickCanceled())
			{
				SYS_ReleaseModeByClickCancel();
			}
			break;
		}
		float fRate = nTime / 効果時間;
		TransitionUpdateView(fRate);
	}
	ChipmunkSpriteEngine.TRANS_End();
	UpdateView(true);
}

void SYS_効果番号チェック(ref int 効果番号)
{
	switch (効果番号)
	{
		case 1:
		case 6:
		case 7:
		case 8:
		case 9:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
		case 28:
		case 29:
		case 31:
		case 34:
		case 35:
		case 36:
		case 37:
		case 39:
		case 40:
		case 41:
		case 43:
		case 44:
		case 45:
		case 46:
		case 47:
		case 48:
		case 49:
		case 50:
		case 51:
		case 54:
		case 55:
		case 56:
		case 57:
		case 58:
		case 59:
		case 60:
			break;
		default:
			system.Output("未実装の画面エフェクトです【 %d 】\n" % 効果番号);
			効果番号 = 1;
	}
}

void SYS_画面保管(ref 画面保管_t t)
{
	t.ActiveMessageWindowNumber = _Ｍ枠;
	t.t音楽 = _音楽;
	t.m_BGMVolume = g_BGMVolume;
	t.m_nループ効果音 = _ループ効果音;
	t.m_nループ効果音ボリューム = _ループ効果音ボリューム;
	t.m_n最終音声番号 = _g_最終音声番号;
	if (_メッセージ保管.Empty())
	{
		t.tＭ.Free();
	}
	else
	{
		t.tＭ.Alloc(_メッセージ保管.Numof());
		t.tＭ.Copy(0, _メッセージ保管, 0, _メッセージ保管.Numof());
	}
	if (!GoatGUIEngine.Save(t.m_PartsLibraryData))
	{
		system.Error("画面保管においてパーツライブラリデータの保存に失敗しました");
	}
}

void SYS_画面復帰(ref 画面保管_t t, bool bPlayVoice)
{
	g_MessageTextView.Clear();
	SYS_既読メッセージフラグクリア();
	_Ｍ枠 = 0;
	g_MessageWindowManager.ClearAll();
	if (!GoatGUIEngine.Load(t.m_PartsLibraryData))
	{
		system.Error("画面保管においてパーツライブラリデータの読み込みに失敗しました");
	}
	bool _old_back_log_working = バックログ登録制御(false);
	int nPrev_Ｍ速度 = _Ｍ速度;
	_Ｍ速度 = 0;
	ref array@メッセージ保管_t m = t.tＭ;
	int WindowIndex = 0;
	for (WindowIndex = 0; WindowIndex < m.Numof(); ++WindowIndex)
	{
		if (t.ActiveMessageWindowNumber != WindowIndex)
		{
			SYS_画面復帰_MessageWindow(t, WindowIndex, bPlayVoice);
		}
	}
	if (t.ActiveMessageWindowNumber > 0)
	{
		SYS_画面復帰_MessageWindow(t, t.ActiveMessageWindowNumber, bPlayVoice);
	}
	g_MessageWindowManager.StepAllFlashFinalFrame();
	_Ｍ速度 = nPrev_Ｍ速度;
	バックログ登録制御(_old_back_log_working);
	SYS_PlayBGM(t.t音楽, 0, 1, 100, t.m_BGMVolume);
	ループ効果音ボリューム(t.m_nループ効果音ボリューム);
	if (t.m_nループ効果音 != _ループ効果音)
	{
		ループ効果音(t.m_nループ効果音, -1, -1);
	}
	_g_最終音声番号 = t.m_n最終音声番号;
	if (_g_最終音声番号 != 0)
	{
		SYS_最終音声番号メッセージ保管登録(_g_最終音声番号);
	}
}

void SYS_画面復帰_MessageWindow(ref 画面保管_t t, int WindowIndex, bool PlayVoice)
{
	ref array@メッセージ保管_t m = t.tＭ;
	_メッセージ保管[WindowIndex].要素.Free();
	ref array@メッセージ要素_t MessageList = m[WindowIndex].要素;
	if (MessageList.Empty())
	{
		return;
	}
	SYS_字枠セット(WindowIndex, 3, true);
	int MessageIndex = 0;
	for (MessageIndex = 0; MessageIndex < MessageList.Numof(); ++MessageIndex)
	{
		ref メッセージ要素_t Message = MessageList[MessageIndex];
		switch (Message.nType)
		{
			case 0:
				字(Message.Ｍフォント);
				字サイズ(Message.Ｍサイズ);
				字色(Message.ＭＲ, Message.ＭＧ, Message.ＭＢ);
				字飾り(Message.Ｍ飾上, Message.Ｍ飾右, Message.Ｍ飾下, Message.Ｍ飾左, Message.Ｍ飾Ｒ, Message.Ｍ飾Ｇ, Message.Ｍ飾Ｂ);
				message(Message.nMsgNum, Message.nNumofMsg, Message.szText);
				break;
			case 1:
				R();
				break;
			case 4:
				break;
			case 2:
				if (PlayVoice && Message.nVoice != 0 && KiwiSoundEngine.Sound_IsExist(Message.nVoice))
				{
					bool bNextC = false;
					int nNext = 0;
					for (nNext = MessageIndex + 1; nNext < MessageList.Numof() - 1; ++nNext)
					{
						if (MessageList[nNext].nType == 4)
						{
							bNextC = true;
							break;
						}
					}
					if (!bNextC)
					{
						SYS_PlayVoice(Message.nVoice);
					}
				}
				break;
		}
	}
	if (g_MessageTextView.HasNoTextDrawn())
	{
		WordWrapper3 wordWrapper;
		wordWrapper.Init(g_MessageTextView);
		wordWrapper.Run();
	}
	g_MessageTextView.DrawAll();
}

void SYS_メッセージ登録(ref メッセージ要素_t Element)
{
	_メッセージ保管[_Ｍ枠].要素.PushBack(Element);
}

void SYS_メッセージテキスト登録(int _nIndex, int _nTotal, string _Text)
{
	メッセージ要素_t _Message;
	_Message.nType = 0;
	_Message.nMsgNum = _nIndex;
	_Message.nNumofMsg = _nTotal;
	_Message.szText = _Text;
	_Message.Ｍフォント = _Ｍフォント;
	_Message.Ｍサイズ = _Ｍサイズ;
	_Message._Ｍ太さ = _g_Ｍ太さ;
	_Message.ＭＲ = _ＭＲ;
	_Message.ＭＧ = _ＭＧ;
	_Message.ＭＢ = _ＭＢ;
	_Message.Ｍ速度 = _Ｍ速度;
	_Message.Ｍ配置 = _Ｍ配置;
	_Message.Ｍ飾上 = _Ｍ飾上;
	_Message.Ｍ飾右 = _Ｍ飾右;
	_Message.Ｍ飾下 = _Ｍ飾下;
	_Message.Ｍ飾左 = _Ｍ飾左;
	_Message.Ｍ飾Ｒ = _Ｍ飾Ｒ;
	_Message.Ｍ飾Ｇ = _Ｍ飾Ｇ;
	_Message.Ｍ飾Ｂ = _Ｍ飾Ｂ;
	SYS_メッセージ登録(_Message);
}

void SYS_選択肢表示()
{
	g_MenuViewManager.SetShow(true);
}

void SYS_選択肢非表示()
{
	g_MenuViewManager.SetShow(false);
}

void SYS_システムボタン変更確認()
{
	if (!_g_システムボタン変更)
	{
		return;
	}
	_g_SystemButtonView._Clear();
	if (_Ｍ枠 != 0)
	{
		_g_SystemButtonView._Set(_Ｍ枠);
	}
	_g_システムボタン変更 = false;
}

void SYS_ASSERTE_AREA_ID(ref int エリア番号)
{
	if (エリア番号 >= 1 && エリア番号 < 40)
	{
		return;
	}
	ERROR("エリア番号が[%d] (使用可能%d〜%d)" % エリア番号 % 1 % 39, 1);
	エリア番号 = 1;
}

void SYS_ASSERTE_Z(ref int Ｚ)
{
	if (Ｚ >= 0)
	{
		return;
	}
	ERROR("Ｚ=%d" % Ｚ, 1);
}

void SYS_ASSERTE_CG(ref string ＣＧ名)
{
	if (ＣＧ名.Empty())
	{
		return;
	}
	if (ExistCg(ＣＧ名))
	{
		return;
	}
	CG_ERROR(ＣＧ名, 1);
	ＣＧ名 = "";
}

void SYS_ASSERTE_SIZE(ref int 幅, ref int 高)
{
	if (幅 < 1)
	{
		ERROR("幅=%d" % 幅, 1);
		幅 = ChipmunkSpriteEngine.GetScreenWidth();
	}
	if (高 < 1)
	{
		ERROR("高=%d" % 高, 1);
		高 = ChipmunkSpriteEngine.GetScreenHeight();
	}
}

void SYS_ASSERTE_SOUND(ref int 番号)
{
	if (番号 == 0)
	{
		return;
	}
	if (KiwiSoundEngine.Sound_IsExist(番号))
	{
		return;
	}
	ERROR("効果音[%05d]ロード失敗" % 番号, 1);
	番号 = 0;
}

void SYS_ASSERTE_VOLUME(ref int 音量)
{
	if (音量 < 0)
	{
		ERROR("音量=%d" % 音量, 1);
		音量 = 0;
		return;
	}
	if (音量 > 100)
	{
		ERROR("音量=%d" % 音量, 1);
		音量 = 100;
		return;
	}
}

void SYS_全画面色(int Ｒ, int Ｇ, int Ｂ)
{
	if (Ｒ != -2147483648 && Ｇ != -2147483648 && Ｂ != -2147483648)
	{
		g_ColorLayerSprite.Release();
		g_ColorLayerSprite.Clear();
		g_ColorLayerSprite.AddCreate(ChipmunkSpriteEngine.GetScreenWidth(), ChipmunkSpriteEngine.GetScreenHeight());
		g_ColorLayerSprite.AddFill(0, 0, ChipmunkSpriteEngine.GetScreenWidth(), ChipmunkSpriteEngine.GetScreenHeight(), Ｒ, Ｇ, Ｂ);
		g_ColorLayerSprite.AddFillAMap(0, 0, ChipmunkSpriteEngine.GetScreenWidth(), ChipmunkSpriteEngine.GetScreenHeight(), 255);
		g_ColorLayerSprite.Build();
		g_ColorLayerSprite.SetPos(0, 0);
		g_ColorLayerSprite.SetZ(12000);
		g_ColorLayerSprite.SetShow(true);
	}
	else
	{
		g_ColorLayerSprite.Release();
	}
}

void SYS_画面揺らし(int nQuakeWidth, int nQuakeHeight, int nTotalTime)
{
	CASEffectKeyCancelChecker ASEffectKeyCancelChecker;
	ASEffectKeyCancelChecker.Init();
	int _nBeginTime = GetTickCount();
	for (; ; )
	{
		int _nTime = GetTickCount() - _nBeginTime;
		if (_nTime >= nTotalTime)
		{
			break;
		}
		if (SYS_未読スキップ中確認())
		{
			break;
		}
		if (SYS_既読スキップ中確認())
		{
			break;
		}
		if (ASEffectKeyCancelChecker.IsCancel())
		{
			if (ASEffectKeyCancelChecker.IsClickCanceled())
			{
				SYS_ReleaseModeByClickCancel();
			}
			break;
		}
		float _fMag = 1.0 - _nTime / nTotalTime;
		int _nX = 0;
		if (nQuakeWidth == 0)
		{
			_nX = 0;
		}
		else
		{
			_nX = (Math.Rand() % nQuakeWidth - nQuakeWidth / 2) * _fMag;
		}
		int _nY = 0;
		if (nQuakeHeight == 0)
		{
			_nY = 0;
		}
		else
		{
			_nY = (Math.Rand() % nQuakeHeight - nQuakeHeight / 2) * _fMag;
		}
		ChipmunkSpriteEngine.VIEW_SetOffsetPos(_nX, _nY);
		UpdateView(true);
	}
	ChipmunkSpriteEngine.VIEW_SetOffsetPos(0, 0);
	UpdateView(true);
}

void SYS_文字表示後画面揺らしクリア()
{
	_文字表示後画面揺らし横 = 0;
	_文字表示後画面揺らし縦 = 0;
	_文字表示後画面揺らし時 = 0;
}

bool SYS_IsClickModeCancel()
{
	if (!g_bConfigReleaseMessageModeByClick)
	{
		return false;
	}
	if (SYS_Ｍ送モード確認(1003))
	{
		return true;
	}
	if (SYS_Ｍ送モード確認(1002))
	{
		return true;
	}
	return false;
}

void SYS_ReleaseModeByClickCancel()
{
	if (!g_bConfigReleaseMessageModeByClick)
	{
		return;
	}
	switch (SYS_Ｍ送モード取得())
	{
		case 1003:
			SYS_オート設定(false, true);
			SYS_Ｍ送モード更新();
			break;
		case 1002:
			SYS_既読スキップモード設定(false, true);
			SYS_Ｍ送モード更新();
			break;
	}
}

void SYS_Ｍ送モード設定(int _mode)
{
	if (_mode != _g_message_wait_mode)
	{
		_g_message_wait_mode = _mode;
	}
	SYS_Ｍ送モードＣＧ表示更新();
}

int SYS_Ｍ送モード取得()
{
	return _g_message_wait_mode;
}

bool SYS_Ｍ送モード確認(int _mode)
{
	return _mode == SYS_Ｍ送モード取得();
}

void SYS_Ｍ送モードＣＧ表示更新()
{
	if (_g_バックシーン中)
	{
		SYS_既読スキップモードＣＧ表示(false);
		SYS_オートモードＣＧ表示(false);
	}
	else
	{
		SYS_既読スキップモードＣＧ表示(SYS_既読スキップモードＣＧ表示確認());
		switch (SYS_Ｍ送モード取得())
		{
			case 1001:
				SYS_オートモードＣＧ表示(false);
				break;
			case 1002:
				SYS_オートモードＣＧ表示(false);
				break;
			case 1003:
				SYS_オートモードＣＧ表示(true);
				break;
		}
	}
}

void SYS_既読スキップモードＣＧ表示(bool bShow)
{
	if (bShow && g_b既読スキップモードＣＧ表示許可)
	{
		if (_Ｍ枠 != 0)
		{
			SYS_既読スキップモードＣＧ作成(g_MessageWindowModelManager.GetMessageWindow(_Ｍ枠));
			SYS_既読スキップモードＣＧ更新(g_MessageWindowModelManager.GetMessageWindow(_Ｍ枠));
		}
	}
	else
	{
		SYS_既読スキップモードＣＧ非表示();
	}
}

void SYS_オートモードＣＧ表示(bool bShow)
{
	if (bShow && g_bオートモードＣＧ表示許可)
	{
		if (_Ｍ枠 != 0)
		{
			SYS_オートモードＣＧ作成(g_MessageWindowModelManager.GetMessageWindow(_Ｍ枠));
			SYS_オートモードＣＧ更新(g_MessageWindowModelManager.GetMessageWindow(_Ｍ枠));
		}
	}
	else
	{
		SYS_オートモードＣＧ非表示();
	}
}

bool SYS_既読スキップモードＣＧ表示許可フラグ取得()
{
	return g_b既読スキップモードＣＧ表示許可;
}

bool SYS_オートモードＣＧ表示許可フラグ取得()
{
	return g_bオートモードＣＧ表示許可;
}

void SYS_既読スキップモードＣＧ作成(ref CMessageWindowModel _a)
{
	array@_CModeCGInfo _aModeCGInfo;
	int _n = 0;
	for (_n = 0; _n < _a.m_既読スキップモードＣＧ.Numof(); ++_n)
	{
		if (_a.m_既読スキップモードＣＧ[_n].Empty())
		{
			continue;
		}
		_CModeCGInfo _ModeCGInfo;
		_ModeCGInfo._SetCG(_a.m_既読スキップモードＣＧ[_n]);
		_ModeCGInfo._SetX(_a.既読スキップモードＸ[_n]);
		_ModeCGInfo._SetY(_a.既読スキップモードＹ[_n]);
		_ModeCGInfo._SetZ(_a.既読スキップモードＺ[_n]);
		_ModeCGInfo._SetShow(true);
		_aModeCGInfo.PushBack(_ModeCGInfo);
	}
	_g_MsgSkipModeCGList._Create(_aModeCGInfo);
}

void SYS_既読スキップモードＣＧ非表示()
{
	_g_MsgSkipModeCGList._HideAll();
}

void SYS_既読スキップモードＣＧ更新(ref CMessageWindowModel _a)
{
	if (_g_MsgSkipModeCGList._Numof() <= 0)
	{
		return;
	}
	int _nFrameTime = _a.既読スキップモードアニメーション時間;
	if (_nFrameTime == 0)
	{
		_nFrameTime = 1000;
	}
	int _index = (g_Ｍスキップタイマー.Get() / _nFrameTime) % _g_MsgSkipModeCGList._Numof();
	_g_MsgSkipModeCGList._SetShow(_index);
}

bool SYS_既読スキップモードＣＧ表示確認()
{
	return SYS_既読スキップモード確認();
}

void SYS_オートモードＣＧ作成(ref CMessageWindowModel _a)
{
	array@_CModeCGInfo _aModeCGInfo;
	int _n = 0;
	for (_n = 0; _n < _a.m_オートモードＣＧ.Numof(); ++_n)
	{
		if (_a.m_オートモードＣＧ[_n].Empty())
		{
			continue;
		}
		_CModeCGInfo _ModeCGInfo;
		_ModeCGInfo._SetCG(_a.m_オートモードＣＧ[_n]);
		_ModeCGInfo._SetX(_a.オートモードＸ[_n]);
		_ModeCGInfo._SetY(_a.オートモードＹ[_n]);
		_ModeCGInfo._SetZ(_a.オートモードＺ[_n]);
		_ModeCGInfo._SetShow(true);
		_aModeCGInfo.PushBack(_ModeCGInfo);
	}
	_g_AutoModeCGList._Create(_aModeCGInfo);
}

void SYS_オートモードＣＧ非表示()
{
	_g_AutoModeCGList._HideAll();
}

void SYS_オートモードＣＧ更新(ref CMessageWindowModel _a)
{
	if (_g_AutoModeCGList._Numof() <= 0)
	{
		return;
	}
	int _nFrameTime = _a.オートモードアニメーション時間;
	if (_nFrameTime == 0)
	{
		_nFrameTime = 1000;
	}
	int _index = (g_Ｍオートタイマー.Get() / _nFrameTime) % _g_AutoModeCGList._Numof();
	_g_AutoModeCGList._SetShow(_index);
}

bool SYS_既読スキップ中確認()
{
	return g_b既読スキップ中;
}

bool SYS_未読スキップ中確認()
{
	if (AFL_IsKeyDown(17))
	{
		return true;
	}
	if (AFL_Joystick_IsKeyDown(0, AFL_Joystick_GetButtonAssignment(7)))
	{
		return true;
	}
	return false;
}

bool SYS_既読スキップモード確認()
{
	bool bSkipMode = g_MessageSkipMode;
	if (bSkipMode && SYS_オートモード中確認())
	{
		SYS_オート設定(false, true);
	}
	return bSkipMode;
}

void SYS_既読スキップモード設定(bool _on, bool bAutoModeOff)
{
	bool _bOld = g_MessageSkipMode;
	g_MessageSkipMode = _on;
	if (!_bOld && _on)
	{
		g_Ｍスキップタイマー.Reset();
	}
	if (bAutoModeOff && _on && SYS_オートモード中確認())
	{
		SYS_オート設定(false, false);
	}
	SYS_Ｍ送モード更新();
	SYS_Ｍ送モードＣＧ表示更新();
}

void SYS_既読スキップモード反転()
{
	SYS_既読スキップモード設定(!SYS_既読スキップモード確認(), true);
}

void SYS_オート設定(bool _on, bool bMsgSkipOff)
{
	if (_g_Ｍオート != _on)
	{
		_g_Ｍオート = _on;
		if (_on == true)
		{
			g_Ｍオートタイマー.Reset();
		}
	}
	if (bMsgSkipOff && _on && g_MessageSkipMode)
	{
		SYS_既読スキップモード設定(false, false);
	}
	SYS_Ｍ送モード更新();
	SYS_Ｍ送モードＣＧ表示更新();
}

bool SYS_オートモード中確認()
{
	return _g_Ｍオート;
}

void SYS_既読スキップ中フラグ更新()
{
	g_b既読スキップ中 = SYS_既読スキップモード確認() && g_既読メッセージ;
}

void SYS_既読スキップ中フラグクリア()
{
	g_既読メッセージ = false;
	g_b既読スキップ中 = false;
}

void SYS_既読メッセージフラグ更新(int MessageNumber)
{
	g_既読メッセージ = MsgSkip.GetFlag(MessageNumber) != 0;
}

void SYS_既読メッセージフラグクリア()
{
	g_既読メッセージ = false;
}

void SYS_Ｍ送モード更新()
{
	SYS_既読スキップ中フラグ更新();
	if (g_b既読スキップ中)
	{
		SYS_Ｍ送モード設定(1002);
	}
	else if (_g_Ｍオート)
	{
		SYS_Ｍ送モード設定(1003);
	}
	else
	{
		SYS_Ｍ送モード設定(1001);
	}
}

void SYS_デフォルトセーブコメント設定(string _t)
{
	if (!_t.Empty())
	{
		_g_デフォルトセーブコメント = _t;
		_g_デフォルトセーブコメント要更新 = false;
	}
}

bool SYS_デフォルトセーブコメント要更新()
{
	return _g_デフォルトセーブコメント要更新;
}

void SYS_デフォルトセーブコメント更新フラグセット()
{
	_g_デフォルトセーブコメント要更新 = true;
}

string SYS_デフォルトセーブコメント取得()
{
	return _g_デフォルトセーブコメント;
}

void SYS_字飾りパラメータチェック(ref int _tt, ref int _tr, ref int _tb, ref int _tl, ref int _cr, ref int _cg, ref int _cb)
{
	if (_tt != -1 && _tt != -2147483648 && (_tt < 0 || _tt > 9))
	{
		ERROR("上=%d" % _tt, 0);
		_tt = 0;
	}
	if (_tr != -1 && _tr != -2147483648 && (_tr < 0 || _tr > 9))
	{
		ERROR("右=%d" % _tr, 0);
		_tr = 0;
	}
	if (_tb != -1 && _tb != -2147483648 && (_tb < 0 || _tb > 9))
	{
		ERROR("下=%d" % _tb, 0);
		_tb = 0;
	}
	if (_tl != -1 && _tl != -2147483648 && (_tl < 0 || _tl > 9))
	{
		ERROR("左=%d" % _tl, 0);
		_tl = 0;
	}
	if (_cr != -1 && _cr != -2147483648 && (_cr < 0 || _cr > 255))
	{
		ERROR("Ｒ=%d" % _cr, 0);
		_cr = 0;
	}
	if (_cg != -1 && _cg != -2147483648 && (_cg < 0 || _cg > 255))
	{
		ERROR("Ｇ=%d" % _cg, 0);
		_cg = 0;
	}
	if (_cb != -1 && _cb != -2147483648 && (_cb < 0 || _cb > 255))
	{
		ERROR("Ｂ=%d" % _cb, 0);
		_cb = 0;
	}
}

bool SYS_エフェクトキーキャンセル有効確認()
{
	return _g_エフェクトキーキャンセル有効;
}

void SYS_エフェクトキーキャンセル有効設定(bool _valid)
{
	_g_エフェクトキーキャンセル有効 = _valid;
}

void SYS_エフェクトキーキャンセル有効反転()
{
	SYS_エフェクトキーキャンセル有効設定(!SYS_エフェクトキーキャンセル有効確認());
}

void SYS_VOICE(int nVoice)
{
	_g_最終音声番号 = nVoice;
	if (nVoice != 0 && !KiwiSoundEngine.Sound_IsExist(nVoice))
	{
		ERROR("VOICE[%d]ロード失敗" % nVoice, 0);
		nVoice = 0;
	}
	g_MessageTextView.AddVoice(nVoice);
	AnteaterADVEngine.ADVLogList_AddVoice(nVoice);
	if (system.IsDebugMode() && nVoice != 0)
	{
		string DebugOutputText = "[%d]" % nVoice;
		AnteaterADVEngine.ADVLogList_AddText(DebugOutputText);
	}
}

void SYS_最終音声番号バックシーン登録()
{
	SYS_最終音声番号メッセージ保管登録(_g_最終音声番号);
}

void SYS_最終音声番号メッセージ保管登録(int _nVoice)
{
	メッセージ要素_t t;
	t.nType = 2;
	t.nVoice = _nVoice;
	SYS_メッセージ登録(t);
}

void _SetMenuAreaDefaultParameters()
{
	選択エリア_字_t _字;
	_字.フォント = 0;
	_字.文字Ｒ = 255;
	_字.文字Ｇ = 255;
	_字.文字Ｂ = 255;
	_字.文字飾上 = 0;
	_字.文字飾右 = 0;
	_字.文字飾下 = 0;
	_字.文字飾左 = 0;
	_字.文字飾Ｒ = 0;
	_字.文字飾Ｇ = 0;
	_字.文字飾Ｂ = 0;
	選択エリア_t _t;
	_t.Ｘ = ChipmunkSpriteEngine.GetScreenWidth() / 2;
	_t.Ｙ = (ChipmunkSpriteEngine.GetScreenHeight() - 120) / 2;
	_t.Ｚ = 700;
	_t.ＣＧ名 = "";
	_t.幅フラグ = 0;
	_t.高フラグ = 1;
	_t.座標フラグ = 5;
	_t.枠太 = 0;
	_t.幅 = ChipmunkSpriteEngine.GetScreenWidth() - 160;
	_t.高 = 120;
	_t.塗Ｒ = 0;
	_t.塗Ｇ = 0;
	_t.塗Ｂ = 0;
	_t.塗率 = 200;
	_t.枠タイプ = 3;
	_t.枠Ｒ = 255;
	_t.枠Ｇ = 240;
	_t.枠Ｂ = 192;
	_t.余白上 = 9;
	_t.余白右 = 7;
	_t.余白下 = 9;
	_t.余白左 = 7;
	_t.文字サイズ = 26;
	_t._選択可能字 = _字;
	_t._選択不可字 = _字;
	_t.文字配置 = 2;
	_t.行間 = 3;
	_t.カーソルタイプ = 3;
	_t.カーソルＲ = 224;
	_t.カーソルＧ = 64;
	_t.カーソルＢ = 0;
	_t.カーソル率 = 255;
	_t.選択文字Ｒ = 255;
	_t.選択文字Ｇ = 255;
	_t.選択文字Ｂ = 255;
	_t.選択文字飾上 = 0;
	_t.選択文字飾右 = 0;
	_t.選択文字飾下 = 0;
	_t.選択文字飾左 = 0;
	_t.選択文字飾Ｒ = 0;
	_t.選択文字飾Ｇ = 0;
	_t.選択文字飾Ｂ = 0;
	_t.音決定 = 0;
	_t.音無効 = 0;
	_t.音移動１ = 0;
	_t.音移動２ = 0;
	int i = 0;
	for (i = 1; i < 40; ++i)
	{
		_t.Ｓ番号 = i;
		_選択エリア[i] = _t;
	}
}

CASCharSpriteProperty SYS_TransCharSpriteProperty(sact_text_metrics_t tm)
{
	CASCharSpriteProperty CharSpriteProperty;
	CharSpriteProperty.SetType(tm.nFace);
	CharSpriteProperty.SetSize(tm.nSize);
	CharSpriteProperty.SetColor(CF_CASColor(tm.nColorR, tm.nColorG, tm.nColorB, 255));
	CharSpriteProperty.SetBoldWeight(0.0);
	CharSpriteProperty.SetEdgeWeight(Math.Max(0, Math.Max(Math.Max(tm.nShadowPixelL, tm.nShadowPixelR), Math.Max(tm.nShadowPixelU, tm.nShadowPixelD))));
	CharSpriteProperty.SetEdgeColor(CF_CASColor(tm.nShadowColorR, tm.nShadowColorG, tm.nShadowColorB, 255));
	return CharSpriteProperty;
}

void SYS_PostCallUpdateView()
{
	int n = 0;
	for (n = 0; n < g_PostCallUpdateViewFuncList.Numof(); ++n)
	{
		g_PostCallUpdateViewFuncList[n]();
	}
}

void SYS_AddPostCallUpdateViewFuncList(FTPostCallUpdateView Func)
{
	SYS_DeletePostCallUpdateViewFuncList(Func);
	g_PostCallUpdateViewFuncList.PushBack(Func);
}

void SYS_DeletePostCallUpdateViewFuncList(FTPostCallUpdateView Func)
{
	int n = 0;
	for (n = 0; n < g_PostCallUpdateViewFuncList.Numof(); )
	{
		if (g_PostCallUpdateViewFuncList[n] == Func)
		{
			g_PostCallUpdateViewFuncList.Erase(n);
		}
		else
		{
			++n;
		}
	}
}

