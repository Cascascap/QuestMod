bool T_MusicMode::update()
{
	return this.m_sTime.update();
}

int T_MusicMode::isActive(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? 0 : this.m_sList.getActive(this.m_sList.getTopIndex() + nIndex);
}

int T_MusicMode::getMusicNo(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? 0 : this.m_sList.getList(this.m_sList.getTopIndex() + nIndex);
}

int T_MusicMode::getButtonID(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? -1 : 110000 + nIndex + 1;
}

int T_MusicMode::getMusicIndex(int nID)
{
	if (nID < 110000)
	{
		return -1;
	}
	int idx = nID + -110001;
	return idx < 0 || idx >= 20 ? -1 : idx;
}

T_MusicMode::T_MusicMode()
{
	this.clear();
}

T_MusicMode::~T_MusicMode()
{
	this.delete();
}

int T_MusicMode::run(int nMode)
{
	int nRet = 0;
	this.before();
	this.create(nMode);
	_EFFECT(1, 100);
	int nID = this.getFirstList();
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
		nID = nRet;
	}
	this.delete();
	this.after();
	return nRet;
}

void T_MusicMode::scroll(int nValue)
{
	this.m_sList.setTopIndex(nValue);
	this.setButtonActive();
}

int T_MusicMode::moveUp(int nID)
{
	if (nID > 900000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		goto label0;
	}
	if (nID > 110000)
	{
		return this.getPrevList(nID);
	}
	switch (nID)
	{
		case 100001:
		case 100002:
		case 100003:
		case 100004:
		case 100005:
		case 100099:
			return this.getLastList();
		default:
			break;
	}
label0:
	return this.getFirstList();
}

int T_MusicMode::moveDown(int nID)
{
	if (nID > 900000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		goto label0;
	}
	if (nID > 110000)
	{
		return this.getNextList(nID);
	}
	switch (nID)
	{
		case 100001:
		case 100002:
		case 100003:
		case 100004:
		case 100005:
		case 100099:
			return this.getFirstList();
		default:
			break;
	}
label0:
	return this.getLastList();
}

int T_MusicMode::moveLeft(int nID)
{
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			switch (nID)
			{
				case 900002:
				case 900003:
					return システムバー_前ボタン(nID);
				case 900001:
				default:
					break;
			}
		}
		return this.getLastList();
	}
	if (nID > 120000)
	{
		goto label0;
	}
	if (nID > 110000)
	{
		return this.m_nMode == 0 ? 900003 : nID;
	}
	switch (nID)
	{
		case 100001:
		case 100002:
		case 100003:
		case 100004:
		case 100005:
		case 100099:
			return this.m_nMode == 0 ? 900003 : this.getLastList();
		default:
			break;
	}
label0:
	return this.getFirstList();
}

int T_MusicMode::moveRight(int nID)
{
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			switch (nID)
			{
				case 900001:
				case 900002:
					return システムバー_次ボタン(nID);
				case 900003:
				default:
					break;
			}
		}
		return this.getLastList();
	}
	if (nID > 120000)
	{
		goto label0;
	}
	if (nID > 110000)
	{
		return this.m_nMode == 0 ? 900001 : nID;
	}
	switch (nID)
	{
		case 100001:
		case 100002:
		case 100003:
		case 100004:
		case 100005:
		case 100099:
			return this.m_nMode == 0 ? 900001 : this.getLastList();
		default:
			break;
	}
label0:
	return this.getLastList();
}

void T_MusicMode::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		return;
	}
	if (nID > 120000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
	}
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
}

void T_MusicMode::before()
{
	this.m_nMusicNo = 音楽_番号();
	this.m_nVolume = AFL_Config_GetVolume(1);
	this.m_bMute = AFL_Config_GetMute(1);
	音楽_再生(0);
	AFL_Config_SetVolume(1, 音楽モード音量());
	AFL_Config_SetMute(1, 音楽モードミュート());
}

void T_MusicMode::after()
{
	if (this.m_nMusicNo < 0 || this.m_nVolume < 0)
	{
		return;
	}
	音楽モード音量設定(AFL_Config_GetVolume(1));
	音楽モードミュート設定(AFL_Config_GetMute(1));
	AFL_Config_SetVolume(1, this.m_nVolume);
	AFL_Config_SetMute(1, this.m_bMute);
	音楽_再生(this.m_nMusicNo);
	this.clear();
}

bool T_MusicMode::create(int nMode)
{
	this.delete();
	int nZ = 9001;
	if (!this.m_sList.create(0))
	{
		return false;
	}
	this.m_sTime.create(nZ + 1);
	this.m_sVolume.create(nZ + 1);
	this.m_spBase.setCg(12281);
	this.m_spBase.setPos(520, 4);
	this.m_sScroll.create(2, 460, 120000, 0, 0);
	this.m_sScroll.setPos(994, 68);
	this.m_sScroll.setActive(-1, true);
	this.m_sScroll.setCallback(&scrollMusicMode);
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), this.m_sList.getListCount(), 20);
	this.m_sButton.create();
	int i = 0;
	for (i = 0; i < 20; ++i)
	{
		ボタン登録_矩形(this.m_sButton, this.getButtonID(i), 音楽モード一覧_Ｘ(i), 音楽モード一覧_Ｙ(i), 468, 26, false);
	}
	ボタン登録_ＣＧ(this.m_sButton, 100001, 667, 656, 12284, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100002, 819, 656, 12285, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100003, 538, 652, 12286, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100004, 927, 652, 12287, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100005, 530, 720, 12288, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100099, 990, 10, 10007, -1, -1, -2147483648, -2147483648);
	this.m_nMode = nMode;
	this.setZ(nZ);
	this.setButtonActive();
	this.setShow(true);
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&音楽モード_上矢印);
	this.m_sInputKey.setArrowDownCallback(&音楽モード_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&音楽モード_左矢印);
	this.m_sInputKey.setArrowRightCallback(&音楽モード_右矢印);
	this.m_sInputKey.setSelectCallback(&音楽モード_選択設定);
	return true;
}

void T_MusicMode::delete()
{
	this.m_spBase.delete();
	this.m_sList.delete();
	this.m_sTime.delete();
	this.m_sVolume.delete();
	this.m_sScroll.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
}

void T_MusicMode::clear()
{
	this.m_nMode = -1;
	this.m_nCommentID = 0;
	this.m_nMusicNo = -1;
	this.m_nVolume = -1;
	this.m_bMute = false;
}

bool T_MusicMode::exec(int nID, ref int nRet)
{
	nRet = 0;
	switch (nID)
	{
		case 100001:
			return this.execPlay();
		case 100002:
			return this.execStop();
		case 100003:
			return this.execPrev();
		case 100004:
			return this.execNext();
		case 100005:
			return this.execMute();
		case 100099:
			return true;
		default:
			break;
	}
	if (nID > 900000)
	{
		nRet = nID;
		return true;
	}
	if (nID > 120000)
	{
		this.m_sScroll.exec(nID);
		return false;
	}
	if (nID > 110000)
	{
		return this.execList(nID, nRet);
	}
	return false;
}

bool T_MusicMode::execList(int nID, ref int nRet)
{
	nRet = nID;
	int idx = this.getMusicIndex(nID);
	if (idx < 0)
	{
		return false;
	}
	this.playMusic(this.getMusicNo(idx));
	return false;
}

bool T_MusicMode::execPlay()
{
	int nMusicNo = this.m_sList.getLockNo();
	if (nMusicNo <= 0)
	{
		return false;
	}
	this.playMusic(nMusicNo);
	return false;
}

bool T_MusicMode::execStop()
{
	音楽_再生(0);
	this.m_sTime.stop();
	return false;
}

bool T_MusicMode::execPrev()
{
	int nMusicNo = this.m_sList.getPrevMusic();
	if (nMusicNo <= 0)
	{
		return false;
	}
	this.playMusic(nMusicNo);
	return false;
}

bool T_MusicMode::execNext()
{
	int nMusicNo = this.m_sList.getNextMusic();
	if (nMusicNo <= 0)
	{
		return false;
	}
	this.playMusic(nMusicNo);
	return false;
}

bool T_MusicMode::execMute()
{
	this.m_sVolume.setMute(!AFL_Config_GetMute(1));
	return false;
}

bool T_MusicMode::playMusic(int nMusicNo)
{
	if (!this.m_sList.play(nMusicNo))
	{
		return false;
	}
	this.m_sTime.start();
	this.setButtonActive();
	return false;
}

int T_MusicMode::checkSelect(int nID)
{
	int nRet = 0;
	int nID2 = 0;
	ホイール_クリア();
	this.resetSelect();
	if (キー優先())
	{
		nID2 = nID;
		this.setSelect(nID2, true);
	}
	UPDATE(true);
	while (true)
	{
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		this.checkWheel();
		if (キャンセル_確認())
		{
			nRet = 100099;
			break;
		}
		if (nRet2 != 1)
		{
			this.m_sVolume.checkDrag();
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_MusicMode::checkInput(ref int nSelectID)
{
	int nID2 = 0;
	switch (システムバー_入力確認(nID2))
	{
		case 0:
			if (nID2 > 0)
			{
				goto label0;
			}
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			this.m_sButton.setInputFlag(false);
			nSelectID = nID2;
			return 1;
		case 2:
			nSelectID = nID2;
			return 2;
		default:
			break;
	}
	switch (this.m_sScroll.checkInput(nID2))
	{
		case 0:
			if (nID2 > 0)
			{
				goto label0;
			}
			break;
		case 1:
		case 2:
			nSelectID = nID2;
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nID2))
	{
		case 0:
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			nSelectID = nID2;
			return 1;
		case 2:
			nSelectID = nID2;
			return 2;
		default:
			break;
	}
	if (nID2 > 0)
	{
		this.showComment(nID2);
	}
	else
	{
		this.hideComment(-1);
	}
label0:
	システムバー_入力ＯＮ();
	this.m_sScroll.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	if (nID2 != nSelectID)
	{
		this.setSelect(nSelectID, false);
	}
	nSelectID = nID2;
	return 0;
}

int T_MusicMode::checkKey(int nID)
{
	if (this.m_sScroll.checkKey())
	{
		return 0;
	}
	int nID2 = 0;
	nID2 = システムバー_キー確認(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

bool T_MusicMode::checkWheel()
{
	if (this.m_sScroll.checkWheel())
	{
		return true;
	}
	ホイール_クリア();
	return false;
}

void T_MusicMode::showComment(int nID)
{
	if (this.m_nCommentID == nID)
	{
		return;
	}
	string szText = "";
	if (szText.Empty())
	{
		this.hideComment(-1);
		return;
	}
	if (説明_表示(nID, "", szText, "", 500, false) > 0)
	{
		説明_位置設定(this.m_sButton.getButtonPosX(nID), this.m_sButton.getButtonPosY(nID) + this.m_sButton.getButtonHeight(nID));
	}
	this.m_nCommentID = nID;
}

void T_MusicMode::hideComment(int nID)
{
	nID = nID < 0 ? this.m_nCommentID : nID;
	if (nID > 0)
	{
		説明_消し(nID);
	}
	this.m_nCommentID = -1;
}

void T_MusicMode::resetSelect()
{
	this.m_sScroll.resetSelect();
	this.m_sButton.resetSelect();
	システムバー_選択解除();
	this.hideComment(-1);
}

void T_MusicMode::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 120000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonCursor(nID);
	}
}

void T_MusicMode::setZ(int nZ)
{
	this.m_spBase.setZ(nZ);
	this.m_sList.setZ(nZ + 1);
	this.m_sScroll.setZ(nZ + 1);
	this.m_sButton.setZ(nZ + 5);
}

void T_MusicMode::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sList.setShow(bShow);
	this.m_sTime.setShow(bShow);
	this.m_sVolume.setShow(bShow);
	this.m_sScroll.setShow(bShow);
	this.m_sButton.setShow(bShow);
}

void T_MusicMode::setButtonActive()
{
	int i = 0;
	for (i = 0; i < 20; ++i)
	{
		this.m_sButton.setButtonActive(this.getButtonID(i), this.isActive(i));
	}
}

int T_MusicMode::getPrevList(int nID)
{
	int idx = this.getMusicIndex(nID);
	if (idx < 0)
	{
		return this.getLastList();
	}
	--idx;
	if (this.getMusicNo(idx) > 0)
	{
		return this.getButtonID(idx);
	}
	return this.getLastList();
}

int T_MusicMode::getNextList(int nID)
{
	int idx = this.getMusicIndex(nID);
	if (idx < 0)
	{
		return this.getFirstList();
	}
	++idx;
	if (this.getMusicNo(idx) > 0)
	{
		return this.getButtonID(idx);
	}
	return this.getFirstList();
}

int T_MusicMode::getFirstList()
{
	int cnt = this.m_sList.getListCount();
	if (cnt <= 0)
	{
		return 100099;
	}
	return this.getButtonID(0);
}

int T_MusicMode::getLastList()
{
	int cnt = this.m_sList.getListCount();
	if (cnt <= 0)
	{
		return 100099;
	}
	return cnt < 20 ? this.getButtonID(cnt - 1) : this.getButtonID(19);
}

