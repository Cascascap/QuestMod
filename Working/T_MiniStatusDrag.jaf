int T_MiniStatusDrag::getTargetIndex()
{
	return this.m_nTargetIndex;
}

bool T_MiniStatusDrag::isCreated()
{
	return this.m_nCharaNo > 0;
}

T_MiniStatusDrag::T_MiniStatusDrag()
{
	this.clear();
	int i = 0;
	int cnt = this.m_arcChara.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_arcChara[i].set(ミニステータス_位置Ｘ(i), ミニステータス_位置Ｙ(i), 202, 124);
	}
}

T_MiniStatusDrag::~T_MiniStatusDrag()
{
	this.delete();
}

bool T_MiniStatusDrag::create(int nIndex, int nCharaNo, ref T_TextSprite rfsIcon)
{
	this.delete();
	if (!キャラ_登録済(nCharaNo))
	{
		return false;
	}
	if (!this.m_spDragIcon.copy(rfsIcon, true))
	{
		return false;
	}
	if (キー_押下(1))
	{
		int nMx = 0;
		int nMy = 0;
		if (!マウス_位置取得(nMx, nMy))
		{
			return false;
		}
		this.m_spDragIcon.setPos(nMx - rfsIcon.getWidth() / 2, nMy - rfsIcon.getHeight() / 2);
	}
	this.m_spDragIcon.setZ(9001, -1);
	this.m_spDragIcon.setShow(true);
	this.m_nIconX = rfsIcon.getPosX();
	this.m_nIconY = rfsIcon.getPosY();
	this.m_nCurrentIndex = nIndex;
	this.m_nCharaNo = nCharaNo;
	return true;
}

void T_MiniStatusDrag::delete()
{
	this.m_spDragIcon.delete();
	this.clear();
}

void T_MiniStatusDrag::clear()
{
	this.m_nIconX = -1;
	this.m_nIconX = -1;
	this.m_nCurrentIndex = -1;
	this.m_nCharaNo = -1;
	this.m_nSelectIndex = -1;
	this.m_nTargetIndex = -1;
}

bool T_MiniStatusDrag::run()
{
	bool bRet = false;
	T_Rect sRect;
	T_DragMouse sDrag;
	if (this.m_nCurrentIndex >= 0)
	{
		this.m_nSelectIndex = this.m_nCurrentIndex;
		this.setSelect(this.m_nSelectIndex, true);
	}
	else
	{
		this.resetSelect();
	}
	sDrag.create2(this.m_spDragIcon, sRect);
	sDrag.setSoundDrop(0);
	sDrag.setSoundError(0);
	sDrag.setDragCallback(&ミニステータス_ドラッグ);
	sDrag.setDropCallback(&ミニステータス_ドロップ);
	if (キー_押下(1))
	{
		bRet = sDrag.run(0);
	}
	else
	{
		bRet = sDrag.runJoypad(0);
	}
	sDrag.delete();
	return bRet;
}

void T_MiniStatusDrag::execDrag(int nX, int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	int i = 0;
	int cnt = this.m_arcChara.Numof();
	int nSelectIndex = -1;
	int nMax = 0;
	for (i = 0; i < cnt; ++i)
	{
		int nSize = this.m_arcChara[i].spriteIntersect(this.m_spDragIcon.getSp());
		if (nSize > nMax)
		{
			nSelectIndex = i;
			nMax = nSize;
		}
	}
	if (nSelectIndex != this.m_nSelectIndex)
	{
		this.setSelect(this.m_nSelectIndex, false);
		this.setSelect(nSelectIndex, true);
	}
	this.m_nSelectIndex = nSelectIndex;
}

bool T_MiniStatusDrag::execDrop(int nX, int nY)
{
	this.m_nTargetIndex = -1;
	if (!this.isCreated())
	{
		return false;
	}
	bool bRet = false;
	if (this.m_nSelectIndex < 0)
	{
		goto label0;
	}
	bRet = true;
	this.m_nTargetIndex = this.m_nSelectIndex;
label0:
	this.resetSelect();
	return bRet;
}

void T_MiniStatusDrag::moveUp(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectIndex = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_上矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_MiniStatusDrag::moveDown(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectIndex = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_下矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_MiniStatusDrag::moveLeft(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectIndex = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_左矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_MiniStatusDrag::moveRight(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectIndex = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_右矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_MiniStatusDrag::resetSelect()
{
	ミニステータス_選択解除();
	this.m_nSelectIndex = -1;
}

void T_MiniStatusDrag::setSelect(int nSelectIndex, bool bSelect)
{
	ミニステータス_カード選択設定(nSelectIndex, bSelect);
}

int T_MiniStatusDrag::getPrevChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		return this.getLastChara(nCharaNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = idx - 1; i >= 0; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = idx - 1; i >= 3; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return this.getLastChara(nCharaNo);
}

int T_MiniStatusDrag::getNextChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		return this.getFirstChara(nCharaNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = idx + 1; i < 3; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = idx + 1; i < 5; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return this.getFirstChara(nCharaNo);
}

int T_MiniStatusDrag::getFirstChara(int nCharaNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = 0; i < 3; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = 3; i < 5; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return -1;
}

int T_MiniStatusDrag::getLastChara(int nCharaNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = 2; i >= 0; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = 4; i >= 3; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return -1;
}

int T_MiniStatusDrag::getForwardChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		idx = 戦闘番号_味方インデクス(this.m_nCharaNo);
		nCharaNo = this.m_nCharaNo;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getForwardChara(idx);
		int nCharaNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nCharaNo2))
		{
			return nCharaNo2;
		}
	}
	return nCharaNo;
}

int T_MiniStatusDrag::_getForwardChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
		case 1:
			return 3;
		case 2:
			return 4;
		case 3:
			return 0;
		case 4:
			return 1;
		default:
			break;
	}
	return -1;
}

int T_MiniStatusDrag::getBackChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		idx = 戦闘番号_味方インデクス(this.m_nCharaNo);
		nCharaNo = this.m_nCharaNo;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getBackChara(idx);
		int nCharaNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nCharaNo2))
		{
			return nCharaNo2;
		}
	}
	return nCharaNo;
}

int T_MiniStatusDrag::_getBackChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			return 3;
		case 1:
		case 2:
			return 4;
		case 3:
			return 1;
		case 4:
			return 2;
		default:
			break;
	}
	return -1;
}

