int T_LimitJob::checkInput(ref int nSelectID)
{
	return this.m_sButton.checkInput(nSelectID);
}

int T_LimitJob::checkKey(int nID)
{
	return this.m_sButton.checkKey();
}

void T_LimitJob::resetSelect()
{
	this.m_sButton.resetSelect();
}

void T_LimitJob::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(nID, bSelect, true);
}

void T_LimitJob::setCursor(int nID)
{
	this.m_sButton.setButtonCursor(nID);
}

void T_LimitJob::setInputFlag(bool bInputFlag)
{
	this.m_sButton.setInputFlag(bInputFlag);
}

void T_LimitJob::setShow(bool bShow)
{
	this.m_sButton.setShow(bShow);
}

int T_LimitJob::getType()
{
	return this.m_nType;
}

int T_LimitJob::getJobType()
{
	return this.m_nJobType;
}

bool T_LimitJob::getButtonActive(int nID)
{
	return this.m_sButton.getButtonActive(nID);
}

int T_LimitJob::getButtonKey(int nID)
{
	return this.m_sButton.getButtonKey(nID);
}

int T_LimitJob::getSelectID()
{
	return this.m_sButton.getSelectID();
}

int T_LimitJob::getKeyDownID()
{
	return this.m_sButton.getKeyDownID();
}

int T_LimitJob::getClickID()
{
	return this.m_sButton.getClickID();
}

bool T_LimitJob::isKeyDown()
{
	return this.m_sButton.isKeyDown();
}

bool T_LimitJob::isClick()
{
	return this.m_sButton.isClick();
}

T_LimitJob::T_LimitJob()
{
	this.clear();
}

T_LimitJob::~T_LimitJob()
{
	this.delete();
}

bool T_LimitJob::create(int nType, int nX, int nY, int nZ, int nButtonID)
{
	this.delete();
	if (nType <= 0 || nType >= 3)
	{
		return false;
	}
	int i = 0;
	this.m_sButton.create();
	switch (nType)
	{
		case 1:
			for (i = 1; i < 9; ++i)
			{
				int ii = i - 1;
				ƒ{ƒ^ƒ““o˜^_“§‰ß‚b‚f(this.m_sButton, nButtonID + i, nX + 40 * ii, nY + 0 * ii, 11072 + ii, -1, -1, -2147483648, -2147483648);
			}
			break;
		case 2:
			for (i = 1; i < 9; ++i)
			{
				int ii = i - 1;
				ƒ{ƒ^ƒ““o˜^_“§‰ß‚b‚f(this.m_sButton, nButtonID + i, nX + 37 * (ii % 2), nY + 34 * (ii / 2), 11072 + ii, -1, -1, -2147483648, -2147483648);
			}
			break;
		default:
			return false;
	}
	this.m_sButton.setZ(nZ);
	this.m_nType = nType;
	this.m_nButtonID = nButtonID;
	return true;
}

void T_LimitJob::delete()
{
	this.m_sButton.delete();
	this.clear();
}

void T_LimitJob::clear()
{
	this.m_nType = 0;
	this.m_nButtonID = -1;
	this.m_nJobType = 0;
}

int T_LimitJob::moveUp(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return nID;
		case 2:
			int nJobType = nID - this.m_nButtonID;
			int idx = this.getJobIndex(this.getRow(nJobType) - 1, this.getCol(nJobType));
			return idx < 0 ? 0 : this.m_nButtonID + idx + 1;
		default:
			break;
	}
	return 0;
}

int T_LimitJob::moveDown(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return nID;
		case 2:
			int nJobType = nID - this.m_nButtonID;
			int idx = this.getJobIndex(this.getRow(nJobType) + 1, this.getCol(nJobType));
			return idx < 0 ? 0 : this.m_nButtonID + idx + 1;
		default:
			break;
	}
	return 0;
}

int T_LimitJob::moveLeft(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return this.getPrev(nID);
		case 2:
			int nJobType = nID - this.m_nButtonID;
			int idx = this.getJobIndex(this.getRow(nJobType), this.getCol(nJobType) - 1);
			return idx < 0 ? 0 : this.m_nButtonID + idx + 1;
		default:
			break;
	}
	return 0;
}

int T_LimitJob::moveRight(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return this.getNext(nID);
		case 2:
			int nJobType = nID - this.m_nButtonID;
			int idx = this.getJobIndex(this.getRow(nJobType), this.getCol(nJobType) + 1);
			return idx < 0 ? 0 : this.m_nButtonID + idx + 1;
		default:
			break;
	}
	return 0;
}

bool T_LimitJob::setJobType(int nJobType)
{
	if (nJobType < 1 || nJobType >= 9)
	{
		return false;
	}
	if (nJobType != this.m_nJobType)
	{
		this.m_nJobType = nJobType;
	}
	else
	{
		this.m_nJobType = 0;
	}
	return true;
}

void T_LimitJob::setButtonActive()
{
	int i = 0;
	for (i = 1; i < 9; ++i)
	{
		this.m_sButton.setButtonStatus(this.m_nButtonID + i, this.checkJobType(i) ? 0 : 2);
	}
}

bool T_LimitJob::checkJobType(int nJobType)
{
	if (nJobType < 1 || nJobType >= 9)
	{
		return false;
	}
	return this.m_nJobType > 0 ? nJobType == this.m_nJobType : 1;
}

int T_LimitJob::getPrev(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	int nJobType = nID - this.m_nButtonID;
	return nJobType > 1 ? (this.m_nButtonID + nJobType) - 1 : 0;
}

int T_LimitJob::getNext(int nID)
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	int nJobType = nID - this.m_nButtonID;
	return nJobType < 8 ? this.m_nButtonID + nJobType + 1 : 0;
}

int T_LimitJob::getFirst()
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	return this.m_nButtonID + 1;
}

int T_LimitJob::getLast()
{
	if (this.m_nButtonID < 0)
	{
		return -1;
	}
	return this.m_nButtonID + 8;
}

int T_LimitJob::getRow(int nJobType)
{
	if (nJobType < 1 || nJobType >= 9)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return 0;
		case 2:
			return (nJobType - 1) / 2;
		default:
			break;
	}
	return -1;
}

int T_LimitJob::getCol(int nJobType)
{
	if (nJobType < 1 || nJobType >= 9)
	{
		return -1;
	}
	switch (this.m_nType)
	{
		case 1:
			return nJobType - 1;
		case 2:
			return (nJobType - 1) % 2;
		default:
			break;
	}
	return -1;
}

int T_LimitJob::getJobIndex(int nRow, int nCol)
{
	switch (this.m_nType)
	{
		case 1:
			if (nRow != 0)
			{
				return -1;
			}
			if (nCol < 0 || nCol >= 8)
			{
				return -1;
			}
			return nCol;
		case 2:
			if (nRow < 0 || nRow >= 4)
			{
				return -1;
			}
			if (nCol < 0 || nCol >= 2)
			{
				return -1;
			}
			return nRow * 2 + nCol;
		default:
			break;
	}
	return -1;
}

