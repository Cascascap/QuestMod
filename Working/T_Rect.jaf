bool T_Rect::empty()
{
	return this.m_nSx == -2147483648 || this.m_nSy == -2147483648 || this.m_nEx == -2147483648 || this.m_nEy == -2147483648;
}

bool T_Rect::equal(ref T_Rect rfRect)
{
	if (rfRect === NULL)
	{
		return false;
	}
	return this.m_nSx == rfRect.m_nSx && this.m_nSy == rfRect.m_nSy && this.m_nEx == rfRect.m_nEx && this.m_nEy == rfRect.m_nEy;
}

T_Rect::T_Rect()
{
	this.clear();
}

void T_Rect::set(int nX, int nY, int nWidth, int nHeight)
{
	if (nWidth <= 0 || nHeight <= 0)
	{
		this.clear();
		return;
	}
	this.set2(nX, nY, (nX + nWidth) - 1, (nY + nHeight) - 1);
}

void T_Rect::set2(int nSx, int nSy, int nEx, int nEy)
{
	this.m_nSx = _min(nSx, nEx);
	this.m_nSy = _min(nSy, nEy);
	this.m_nEx = _max(nSx, nEx);
	this.m_nEy = _max(nSy, nEy);
}

bool T_Rect::setIntersect(ref T_Rect rfRect1, ref T_Rect rfRect2)
{
	if (rfRect1 === NULL)
	{
		return false;
	}
	if (rfRect1.empty())
	{
		return false;
	}
	if (rfRect2 === NULL)
	{
		return false;
	}
	if (rfRect2.empty())
	{
		return false;
	}
	if (!rfRect1.rectOverlap(rfRect2))
	{
		return false;
	}
	this.set2(_max(rfRect1.m_nSx, rfRect2.m_nSx), _max(rfRect1.m_nSy, rfRect2.m_nSy), _min(rfRect1.m_nEx, rfRect2.m_nEx), _min(rfRect1.m_nEy, rfRect2.m_nEy));
	return true;
}

void T_Rect::clear()
{
	this.m_nSx = -2147483648;
	this.m_nSy = -2147483648;
	this.m_nEx = -2147483648;
	this.m_nEy = -2147483648;
}

bool T_Rect::ptInRect(int nX, int nY)
{
	if (this.empty())
	{
		return false;
	}
	return this.m_nSx <= nX && nX <= this.m_nEx && this.m_nSy <= nY && nY <= this.m_nEy;
}

bool T_Rect::rectInRect(ref T_Rect rfRect)
{
	if (rfRect === NULL)
	{
		return false;
	}
	if (rfRect.empty())
	{
		return false;
	}
	if (this.empty())
	{
		return false;
	}
	if (!this.ptInRect(rfRect.m_nSx, rfRect.m_nSy))
	{
		return false;
	}
	if (!this.ptInRect(rfRect.m_nEx, rfRect.m_nEy))
	{
		return false;
	}
	return true;
}

bool T_Rect::rectOverlap(ref T_Rect rfRect)
{
	if (rfRect === NULL)
	{
		return false;
	}
	if (rfRect.empty())
	{
		return false;
	}
	if (this.empty())
	{
		return false;
	}
	if (rfRect.m_nSx > this.m_nEx)
	{
		return false;
	}
	if (rfRect.m_nSy > this.m_nEy)
	{
		return false;
	}
	if (rfRect.m_nEx < this.m_nSx)
	{
		return false;
	}
	if (rfRect.m_nEy < this.m_nSy)
	{
		return false;
	}
	return true;
}

bool T_Rect::mouseInRect()
{
	int nX = 0;
	int nY = 0;
	if (!マウス_位置取得(nX, nY))
	{
		return false;
	}
	return this.ptInRect(nX, nY);
}

bool T_Rect::spriteInRect(ref T_Sprite rfsSp)
{
	if (!スプライト_有効(rfsSp))
	{
		return false;
	}
	T_Rect rcWork;
	rcWork.set(rfsSp.getPosX(), rfsSp.getPosY(), rfsSp.getWidth(), rfsSp.getHeight());
	return this.rectInRect(rcWork);
}

bool T_Rect::spriteOverlap(ref T_Sprite rfsSp)
{
	if (!スプライト_有効(rfsSp))
	{
		return false;
	}
	T_Rect rcWork;
	rcWork.set(rfsSp.getPosX(), rfsSp.getPosY(), rfsSp.getWidth(), rfsSp.getHeight());
	return this.rectOverlap(rcWork);
}

int T_Rect::spriteIntersect(ref T_Sprite rfsSp)
{
	if (!スプライト_有効(rfsSp))
	{
		return -1;
	}
	T_Rect rcWork;
	T_Rect rcWork2;
	rcWork.set(rfsSp.getPosX(), rfsSp.getPosY(), rfsSp.getWidth(), rfsSp.getHeight());
	if (!rcWork2.setIntersect(this, rcWork))
	{
		return 0;
	}
	return rcWork2.getSize();
}

int T_Rect::setMouseCenter()
{
	int nX = 0;
	int nY = 0;
	this.getCenter(nX, nY);
	return マウス_位置設定(nX, nY, true);
}

int T_Rect::setMouseRB()
{
	if (this.empty())
	{
		return マウス_位置設定(1023, 767, true);
	}
	return マウス_位置設定(this.m_nEx, this.m_nEy, true);
}

int T_Rect::getWidth()
{
	return this.empty() ? 0 : (this.m_nEx - this.m_nSx) + 1;
}

int T_Rect::getHeight()
{
	return this.empty() ? 0 : (this.m_nEy - this.m_nSy) + 1;
}

int T_Rect::getSize()
{
	return this.empty() ? 0 : this.getWidth() * this.getHeight();
}

void T_Rect::getCenter(ref int nX, ref int nY)
{
	if (this.empty())
	{
		nX = 0;
		nY = 0;
		return;
	}
	nX = this.m_nSx + ((this.m_nEx - this.m_nSx) + 1) / 2;
	nY = this.m_nSy + ((this.m_nEy - this.m_nSy) + 1) / 2;
}

float T_Rect::getDistance(int nX, int nY)
{
	if (this.empty())
	{
		return -1.0;
	}
	int nX2 = 0;
	int nY2 = 0;
	this.getCenter(nX2, nY2);
	return 距離(nX, nY, nX2, nY2);
}

float T_Rect::getDistanceRect(ref T_Rect rfRect)
{
	if (rfRect === NULL)
	{
		return -1.0;
	}
	if (rfRect.empty())
	{
		return -1.0;
	}
	int nX = 0;
	int nY = 0;
	rfRect.getCenter(nX, nY);
	return this.getDistance(nX, nY);
}

float T_Rect::getDistanceSprite(ref T_Sprite rfsSp)
{
	if (!スプライト_有効(rfsSp))
	{
		return -1.0;
	}
	T_Rect rcWork;
	rcWork.set(rfsSp.getPosX(), rfsSp.getPosY(), rfsSp.getWidth(), rfsSp.getHeight());
	return this.getDistanceRect(rcWork);
}

