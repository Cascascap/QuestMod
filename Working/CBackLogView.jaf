CBackLogView::CBackLogView()
{
	this.m_nLineSpace = 0;
	this.m_nButtonStartDelay = 200;
	this.m_bRedraw = true;
	this.m_Playing = false;
}

CBackLogView::~CBackLogView()
{
	this.m_ScrollBoxStateSprite.Release();
	this.m_BackSprite.Release();
}

void CBackLogView::run(CBackLogModel BackLogModel)
{
	g_MessageWindowManager.HideAll();
	this.m_BackLogModel = BackLogModel;
	this.prepare();
	if (this.GetNumofBacklogText() > 0)
	{
		this.view();
	}
}

void CBackLogView::prepare()
{
	this.m_nLineSpace = this.m_BackLogModel.GetLineSpace();
	this.CreateBacklogTextList();
	this.m_screen_size.w = GetScreenWidth();
	this.m_screen_size.h = GetScreenHeight() - 24;
	this.m_nBaseZ = 11001;
	this.m_nLinesTotal = this.GetNumofBacklogText();
	if (this.m_BackLogModel.GetNumofTextLine() != -2147483648)
	{
		this.m_nLinesPerPage = this.m_BackLogModel.GetNumofTextLine();
	}
	else
	{
		this.m_nLinesPerPage = this.m_screen_size.h / this.m_BackLogModel.GetFontHeight();
	}
	if (this.m_nLinesPerPage < 0)
	{
		this.m_nLinesPerPage = 0;
	}
	this.m_nScrollTotalLines = this.m_nLinesTotal - this.m_nLinesPerPage;
	if (this.m_nScrollTotalLines < 0)
	{
		this.m_nScrollTotalLines = 0;
	}
	this.CreateBackSprite();
	this.CreateReturnButtonSprite();
	this.CreateScrollBoxSprite();
	this.CreateUpButtonSprite();
	this.CreateDownButtonSprite();
}

void CBackLogView::CreateBackSprite()
{
	string BackCG = this.m_BackLogModel.GetBackCG();
	if (!BackCG.Empty())
	{
		this.m_BackSprite.SetType(0);
		this.m_BackSprite.GetCGSprite().SetCG(BackCG);
	}
	else
	{
		this.m_BackSprite.SetType(1);
		ref CASConstructionSprite ConstructionSprite = this.m_BackSprite.GetConstructionSprite();
		int nWidth = GetScreenWidth();
		int nHeight = GetScreenHeight();
		ConstructionSprite.AddCreate(nWidth, nHeight);
		ConstructionSprite.AddFill(0, 0, nWidth, nHeight, 255, 255, 255);
		ConstructionSprite.AddFillAMap(0, 0, nWidth, nHeight, 160);
		ConstructionSprite.Build();
	}
	this.m_BackSprite.SetPos(0, 0);
	this.m_BackSprite.SetZ(this.m_nBaseZ);
	this.m_BackSprite.SetShow(true);
}

void CBackLogView::CreateReturnButtonSprite()
{
	if (!this.m_BackLogModel.GetReturnButtonCG().Empty())
	{
		this.m_ExitButtonSprite.SetType(2);
		ref CASCGStateSprite StateSprite = this.m_ExitButtonSprite.GetCGStateSprite();
		StateSprite.Alloc(2);
		StateSprite.GetSprite(0).SetCG(this.m_BackLogModel.GetReturnButtonCG());
		StateSprite.GetSprite(1).SetCG(this.m_BackLogModel.GetReturnButtonUnderCursorCG());
	}
	else
	{
		this.m_ExitButtonSprite.SetType(3);
		ref CASConstructionStateSprite ConstructionStateSprite = this.m_ExitButtonSprite.GetConstructionStateSprite();
		ConstructionStateSprite.Alloc(2);
		int Width = 60;
		int Height = 30;
		sact_text_metrics_t tm;
		tm.nShadowPixelL = 1;
		tm.nShadowPixelU = 1;
		tm.nShadowPixelR = 1;
		tm.nShadowPixelD = 1;
		int TextX = (Width - (tm.nSize + 2) * 2) / 2;
		int TextY = (Height - (tm.nSize + 2)) / 2;
		ConstructionStateSprite.GetSprite(0).AddCreate(Width, Height);
		ConstructionStateSprite.GetSprite(0).AddFill(0, 0, Width, Height, 192, 192, 192);
		ConstructionStateSprite.GetSprite(0).AddDrawText(TextX, TextY, "ñﬂÇÈ", tm, 0);
		ConstructionStateSprite.GetSprite(0).Build();
		ConstructionStateSprite.GetSprite(1).AddCreate(Width, Height);
		ConstructionStateSprite.GetSprite(1).AddFill(0, 0, Width, Height, 224, 224, 255);
		ConstructionStateSprite.GetSprite(1).AddDrawText(TextX, TextY, "ñﬂÇÈ", tm, 0);
		ConstructionStateSprite.GetSprite(1).Build();
	}
	this.m_ExitButtonSprite.SetPos(this.m_BackLogModel.GetReturnButtonX(), this.m_BackLogModel.GetReturnButtonY());
	this.m_ExitButtonSprite.SetActiveState(0);
	this.m_ExitButtonSprite.SetZ(this.m_nBaseZ + 7);
}

void CBackLogView::CreateScrollBoxSprite()
{
	if (!this.m_BackLogModel.GetScrollBoxCG().Empty())
	{
		this.m_ScrollBoxStateSprite.SetType(2);
		ref CASCGStateSprite CGStateSprite = this.m_ScrollBoxStateSprite.GetCGStateSprite();
		CGStateSprite.Alloc(2);
		CGStateSprite.GetSprite(0).SetCG(this.m_BackLogModel.GetScrollBoxCG());
		CGStateSprite.GetSprite(1).SetCG(this.m_BackLogModel.GetScrollBoxUnderCursorCG());
	}
	else
	{
		this.m_ScrollBoxStateSprite.SetType(3);
		ref CASConstructionStateSprite ConstructionStateSprite = this.m_ScrollBoxStateSprite.GetConstructionStateSprite();
		ConstructionStateSprite.Alloc(2);
		int Width = 30;
		int Height = 40;
		ConstructionStateSprite.GetSprite(0).AddCreate(Width, Height);
		ConstructionStateSprite.GetSprite(0).AddFill(0, 0, Width, Height, 192, 192, 192);
		ConstructionStateSprite.GetSprite(0).Build();
		ConstructionStateSprite.GetSprite(1).AddCreate(Width, Height);
		ConstructionStateSprite.GetSprite(1).AddFill(0, 0, Width, Height, 224, 224, 255);
		ConstructionStateSprite.GetSprite(1).Build();
	}
	this.m_ScrollBoxStateSprite.SetActiveState(0);
	this.m_ScrollBoxStateSprite.SetPos(this.m_BackLogModel.GetScrollBoxAreaX(), this.m_BackLogModel.GetScrollBoxAreaY());
	this.m_ScrollBoxStateSprite.SetZ(this.m_nBaseZ + 8);
	this.m_ScrollBoxStateSprite.SetShow(true);
}

void CBackLogView::CreateUpButtonSprite()
{
	if (this.m_BackLogModel.GetUpButtonCG().Empty())
	{
		return;
	}
	this.m_UpButtonStateSprite.Alloc(2);
	this.m_UpButtonStateSprite.GetSprite(0).SetCG(this.m_BackLogModel.GetUpButtonCG());
	this.m_UpButtonStateSprite.GetSprite(1).SetCG(this.m_BackLogModel.GetUpButtonUnderCursorCG());
	this.m_UpButtonStateSprite.SetActive(0);
	this.m_UpButtonStateSprite.SetPos(this.m_BackLogModel.GetUpButtonX(), this.m_BackLogModel.GetUpButtonY());
	this.m_UpButtonStateSprite.SetZ(this.m_nBaseZ + 9);
	this.m_UpButtonStateSprite.SetShow(true);
}

void CBackLogView::CreateDownButtonSprite()
{
	if (this.m_BackLogModel.GetDownButtonCG().Empty())
	{
		return;
	}
	this.m_DownButtonStateSprite.Alloc(2);
	this.m_DownButtonStateSprite.GetSprite(0).SetCG(this.m_BackLogModel.GetDownButtonCG());
	this.m_DownButtonStateSprite.GetSprite(1).SetCG(this.m_BackLogModel.GetDownButtonUnderCursorCG());
	this.m_DownButtonStateSprite.SetActive(0);
	this.m_DownButtonStateSprite.SetPos(this.m_BackLogModel.GetDownButtonX(), this.m_BackLogModel.GetDownButtonY());
	this.m_DownButtonStateSprite.SetZ(this.m_nBaseZ + 9);
	this.m_DownButtonStateSprite.SetShow(true);
}

void CBackLogView::get_index_range(int nIndex, ref int nBegin, ref int nEnd)
{
	nBegin = 0;
	nEnd = nIndex + 1;
	SBackLogViewText sld;
	int nNumof = this.GetNumofBacklogText();
	int i = 0;
	for (i = nIndex; i >= 0; --i)
	{
		sld = this.GetBacklog(i);
		if (sld.m_bSeparator)
		{
			nBegin = i + 1;
			break;
		}
	}
	for (i = nIndex; i < nNumof; ++i)
	{
		sld = this.GetBacklog(i);
		if (sld.m_bSeparator)
		{
			nEnd = i;
			break;
		}
	}
}

void CBackLogView::CreateTextSprite(ref CASTextSprite TextSprite, ref CASRect VoiceDecideRect, int nMsgLogIndex, int nX, int nY, int nZ, int nCurBegin, int nCurEnd, int bCurVoice, int nPlayingBegin, int nPlayingEnd, int bPlayingVoice, ref int Height)
{
	SBackLogViewText BackLogViewText;
	BackLogViewText = this.GetBacklog(nMsgLogIndex);
	int nTextPropertyIndex = 0;
	if (bPlayingVoice && nMsgLogIndex >= nPlayingBegin && nMsgLogIndex < nPlayingEnd)
	{
		nTextPropertyIndex = 3;
	}
	else if (bCurVoice && nMsgLogIndex >= nCurBegin && nMsgLogIndex < nCurEnd)
	{
		nTextPropertyIndex = 2;
	}
	else if (!BackLogViewText.VoiceNumberList.Empty())
	{
		nTextPropertyIndex = 1;
	}
	else
	{
		nTextPropertyIndex = 0;
	}
	ref CASCharSpriteProperty TextProperty = this.m_BackLogModel.GetTextProperty(nTextPropertyIndex);
	int PixelWidth = TextProperty.GetPixelHeight();
	int PixelHeight = TextProperty.GetPixelHeight();
	size_t size;
	if (this.m_BackLogModel.GetNumofTextColumn() != -2147483648)
	{
		size.w = this.m_BackLogModel.GetNumofTextColumn() * PixelWidth;
		size.h = PixelHeight;
	}
	else
	{
		size.w = this.m_screen_size.w + -17;
		size.h = PixelHeight;
	}
	int nOffsetX = this.m_BackLogModel.GetTextX();
	int nOffsetY = this.m_BackLogModel.GetTextY();
	TextSprite.SetPos(nX + nOffsetX, nY + nOffsetY);
	TextSprite.SetZ(nZ);
	TextSprite.SetCharSpace(this.m_BackLogModel.GetCharSpace());
	TextSprite.SetJustifyColon(425);
	int nTotalLines = this.GetNumofBacklogText();
	bool canIndent = true;
	if (nMsgLogIndex >= 0 && nMsgLogIndex < nTotalLines)
	{
		SBackLogViewText log_data;
		log_data = this.GetBacklog(nMsgLogIndex);
		if (nMsgLogIndex > 0)
		{
			SBackLogViewText prev_data;
			prev_data = this.GetBacklog(nMsgLogIndex - 1);
			canIndent = prev_data.m_sText[0] == 'Åy';
		}
		int leader = log_data.m_sText[0];
		if (leader == 31105 && leader == 58)
		{
			TextSprite.SetPos((nX + nOffsetX + TextProperty.GetFontWidth("Åg")) - TextProperty.GetFontWidth(log_data.m_sText.GetPart(0, 1)), nY + nOffsetY);
		}
		else if (canIndent && (leader == 26497 || leader == 25985 || leader == 40))
		{
			TextSprite.SetPos((nX + nOffsetX + TextProperty.GetFontWidth("Åg")) - TextProperty.GetFontWidth(log_data.m_sText.GetPart(0, 1)), nY + nOffsetY);
		}
		else
		{
			TextSprite.SetPos(nX + nOffsetX + TextProperty.GetFontWidth("Åg") + this.m_BackLogModel.GetCharSpace(), nY + nOffsetY);
		}
		if (!log_data.m_bSeparator)
		{
			TextSprite.SetText(log_data.m_sText, TextProperty);
			VoiceDecideRect.Set(nX + nOffsetX, nY + nOffsetY, size.w, size.h + this.m_nLineSpace);
		}
	}
	Height = PixelHeight;
}

void CBackLogView::draw(int nNew, int nOld, int nZ, int nCurrentIndex, int nVoicePlayingIndex, bool bVoicePlaying, int bRedraw)
{
	int nCurBegin = 0;
	int nCurEnd = 0;
	this.get_index_range(nCurrentIndex, nCurBegin, nCurEnd);
	SBackLogViewText sldCur;
	sldCur = this.GetBacklog(nCurrentIndex);
	bool bCurVoice = !sldCur.VoiceNumberList.Empty();
	int nPlayingBegin = 0;
	int nPlayingEnd = 0;
	if (bVoicePlaying)
	{
		this.get_index_range(nVoicePlayingIndex, nPlayingBegin, nPlayingEnd);
	}
	this.m_TextSpriteList.Alloc(this.m_nLinesPerPage);
	this.m_VoiceDecideRectList.Alloc(this.m_nLinesPerPage);
	int nY = 0;
	int n = 0;
	for (n = 0; n < this.m_TextSpriteList.Numof(); ++n)
	{
		int nX = 0;
		int Height = 0;
		this.CreateTextSprite(this.m_TextSpriteList[n], this.m_VoiceDecideRectList[n], nNew + n, nX, nY, nZ, nCurBegin, nCurEnd, bCurVoice, nPlayingBegin, nPlayingEnd, bVoicePlaying, Height);
		nY += Height + this.m_nLineSpace;
	}
}

bool CBackLogView::PlayVoice(ref array@int VoiceNumberList)
{
	if (VoiceNumberList.Empty())
	{
		return false;
	}
	this.m_PlayingVoiceNumberList.Alloc(VoiceNumberList.Numof());
	this.m_PlayingVoiceNumberList.Copy(0, VoiceNumberList, 0, VoiceNumberList.Numof());
	this.m_PlayingVoiceIndex = 0;
	SYS_StopVoice();
	SYS_PlayVoice(this.m_PlayingVoiceNumberList[this.m_PlayingVoiceIndex]);
	this.m_Playing = true;
	return true;
}

bool CBackLogView::CheckPlayingVoice()
{
	if (!this.m_Playing)
	{
		return false;
	}
	if (!SYS_IsPlayVoice())
	{
		if (this.m_PlayingVoiceIndex + 1 >= this.m_PlayingVoiceNumberList.Numof())
		{
			this.m_Playing = false;
			this.m_PlayingVoiceNumberList.Free();
			this.m_PlayingVoiceIndex = 0;
			return true;
		}
		this.m_PlayingVoiceIndex++;
		SYS_PlayVoice(this.m_PlayingVoiceNumberList[this.m_PlayingVoiceIndex]);
	}
	return false;
}

void CBackLogView::view()
{
	int nViewTextLine = this.m_nLinesTotal - this.m_nLinesPerPage;
	if (nViewTextLine < 0)
	{
		nViewTextLine = 0;
	}
	int bKeyClear = 0;
	int bExit = 0;
	int bDelay = 0;
	int bDelayOn = 0;
	int bUpdate = 1;
	int nIndexOld = -1;
	int nNew = 0;
	int nDelta = 0;
	int bDragThumb = 0;
	int nDragThumbY = 0;
	int nDragMouseY = 0;
	int nVoicePlayingIndex = 0;
	bool bVoicePlaying = false;
	int nOldCurBegin = 0;
	int nOldCurEnd = 0;
	int nOldViewTextLine = -1;
	this.UpdateScrollBox(nViewTextLine, bDragThumb);
	CASClick LButtonClick;
	CASClick RButtonClick;
	CASClick SpaceKeyClick;
	CASClick EscapeKeyClick;
	LButtonClick.Init(1, true);
	RButtonClick.Init(2, true);
	SpaceKeyClick.Init(32, true);
	EscapeKeyClick.Init(27, true);
	this.m_ExitButtonLButtonClick.Init(1, true);
	CASKeyRepeat UpKeyRepeat;
	CASKeyRepeat DownKeyRepeat;
	CASKeyRepeat PageUpKeyRepeat;
	CASKeyRepeat PageDownKeyRepeat;
	CASClick UpKeyClick;
	CASClick DownKeyClick;
	CASClick PageUpKeyClick;
	CASClick PageDownKeyClick;
	CASClick OkKeyClick;
	UpKeyRepeat.Init(38, true);
	DownKeyRepeat.Init(40, true);
	PageUpKeyRepeat.Init(33, true);
	PageDownKeyRepeat.Init(34, true);
	UpKeyClick.Init(38, true);
	DownKeyClick.Init(40, true);
	PageUpKeyClick.Init(33, true);
	PageDownKeyClick.Init(34, true);
	OkKeyClick.Init(13, true);
	CASJoyRepeat l_UpJoyRepeat;
	CASJoyRepeat l_DownJoyRepeat;
	CASJoyRepeat l_PageUpJoyRepeat;
	CASJoyRepeat l_PageDownJoyRepeat;
	CASJoyClick l_UpJoyClick;
	CASJoyClick l_DownJoyClick;
	CASJoyClick l_PageUpJoyClick;
	CASJoyClick l_PageDownJoyClick;
	CASJoyClick l_JoyCancelClick;
	CASJoyClick l_JoyOkClick;
	l_UpJoyRepeat.Init(AFL_Joystick_GetButtonAssignment(9), true);
	l_DownJoyRepeat.Init(AFL_Joystick_GetButtonAssignment(10), true);
	l_PageUpJoyRepeat.Init(AFL_Joystick_GetButtonAssignment(11), true);
	l_PageDownJoyRepeat.Init(AFL_Joystick_GetButtonAssignment(12), true);
	l_UpJoyClick.Init(AFL_Joystick_GetButtonAssignment(9), true);
	l_DownJoyClick.Init(AFL_Joystick_GetButtonAssignment(10), true);
	l_PageUpJoyClick.Init(AFL_Joystick_GetButtonAssignment(11), true);
	l_PageDownJoyClick.Init(AFL_Joystick_GetButtonAssignment(12), true);
	l_JoyCancelClick.Init(AFL_Joystick_GetButtonAssignment(5), true);
	l_JoyOkClick.Init(AFL_Joystick_GetButtonAssignment(4), true);
	int l_Focus = 0;
	while (!bExit)
	{
		_g_MouseCursorPos._Update();
		_g_MouseWheel._Update(true);
		if (bUpdate || this.m_bRedraw)
		{
			this.draw(nViewTextLine, nOldViewTextLine, this.m_nBaseZ + 1, nIndexOld, nVoicePlayingIndex, bVoicePlaying, this.m_bRedraw);
			this.m_bRedraw = false;
			nOldViewTextLine = nViewTextLine;
			UpdateView(true);
			bUpdate = 0;
			if (bDelay && !bDelayOn)
			{
				int nStartTime = GetTickCount();
				while (GetTickCount() - nStartTime < this.m_nButtonStartDelay)
				{
					if (!LButtonClick.IsKeyDown())
					{
						break;
					}
					UpdateView(true);
				}
				bDelayOn = 1;
			}
		}
		else
		{
			UpdateView(true);
		}
		nDelta = 0;
		int nPrevViewTextLine = nViewTextLine;
		if (_g_MouseWheel.GetBackCount() > 0 && nViewTextLine >= this.m_nScrollTotalLines)
		{
			break;
		}
		nDelta += _g_MouseWheel._GetDelta() * 3;
		if (!this.CheckReturnButton())
		{
			break;
		}
		this.UpdateScrollBox(nViewTextLine, bDragThumb);
		this.UpdateUpButton(bDragThumb);
		this.UpdateDownButton(bDragThumb);
		int nIndex = this.get_index_at_mouse_pos(nViewTextLine);
		if (nIndex != nIndexOld)
		{
			int nCurBegin = 0;
			int nCurEnd = 0;
			this.get_index_range(nIndex, nCurBegin, nCurEnd);
			if (nCurBegin != nOldCurBegin || nCurEnd != nOldCurEnd)
			{
				SBackLogViewText sldCur;
				sldCur = this.GetBacklog(nIndex);
				if (!sldCur.VoiceNumberList.Empty())
				{
					this.PlayUnderCursorSound();
				}
			}
			bUpdate = 1;
			nIndexOld = nIndex;
			this.m_bRedraw = true;
			nOldCurBegin = nCurBegin;
			nOldCurEnd = nCurEnd;
		}
		if (UpKeyClick.IsKeyTrigger())
		{
			l_Focus = 10;
		}
		if (DownKeyClick.IsKeyTrigger())
		{
			l_Focus = 11;
		}
		if (PageUpKeyClick.IsKeyTrigger())
		{
			l_Focus = 12;
		}
		if (PageDownKeyClick.IsKeyTrigger())
		{
			l_Focus = 13;
		}
		if (l_UpJoyClick.IsKeyTrigger())
		{
			l_Focus = 20;
		}
		if (l_DownJoyClick.IsKeyTrigger())
		{
			l_Focus = 21;
		}
		if (l_PageUpJoyClick.IsKeyTrigger())
		{
			l_Focus = 22;
		}
		if (l_PageDownJoyClick.IsKeyTrigger())
		{
			l_Focus = 23;
		}
		if (UpKeyRepeat.IsKeyDown() && l_Focus == 10)
		{
			nDelta -= 1;
		}
		if (DownKeyRepeat.IsKeyDown() && l_Focus == 11)
		{
			nDelta += 1;
		}
		if (l_UpJoyRepeat.IsKeyDown() && l_Focus == 20)
		{
			nDelta -= 1;
		}
		if (l_DownJoyRepeat.IsKeyDown() && l_Focus == 21)
		{
			nDelta += 1;
		}
		if (PageUpKeyRepeat.IsKeyDown() && l_Focus == 12)
		{
			nDelta -= this.m_nLinesPerPage - 1;
		}
		if (PageDownKeyRepeat.IsKeyDown() && l_Focus == 13)
		{
			nDelta += this.m_nLinesPerPage - 1;
		}
		if (l_PageUpJoyRepeat.IsKeyDown() && l_Focus == 22)
		{
			nDelta -= this.m_nLinesPerPage - 1;
		}
		if (l_PageDownJoyRepeat.IsKeyDown() && l_Focus == 23)
		{
			nDelta += this.m_nLinesPerPage - 1;
		}
		if (RButtonClick.IsClick(-2147483648))
		{
			this.PlayCancelSound();
			break;
		}
		if (SpaceKeyClick.IsClick(-2147483648))
		{
			this.PlayCancelSound();
			break;
		}
		if (EscapeKeyClick.IsClick(-2147483648))
		{
			this.PlayCancelSound();
			break;
		}
		if (l_JoyCancelClick.IsClick(-2147483648))
		{
			this.PlayCancelSound();
			break;
		}
		if (LButtonClick.IsKeyDown() || l_JoyOkClick.IsClick(-2147483648) || OkKeyClick.IsClick(-2147483648))
		{
			nDelta = 0;
			if (bDragThumb)
			{
				this.UpdateScrollPosByMousePos(nViewTextLine);
			}
			else if (this.IsScrollBoxAreaUnderCursor())
			{
				this.PlayDecideSound();
				bDragThumb = 1;
				this.UpdateScrollPosByMousePos(nViewTextLine);
			}
			else if (!bDragThumb && this.IsUpButtonUnderCursor())
			{
				if (!bDelay)
				{
					this.PlayDecideSound();
				}
				bDelay = 1;
				nDelta -= 1;
			}
			else if (!bDragThumb && this.IsDownButtonUnderCursor())
			{
				if (!bDelay)
				{
					this.PlayDecideSound();
				}
				bDelay = 1;
				nDelta += 1;
			}
			else if (nIndex >= 0)
			{
				SBackLogViewText sld;
				sld = this.GetBacklog(nIndex);
				if (this.PlayVoice(sld.VoiceNumberList))
				{
					bVoicePlaying = true;
					bKeyClear = 1;
					nVoicePlayingIndex = nIndex;
					bUpdate = 1;
					this.m_bRedraw = true;
				}
			}
		}
		else
		{
			bDelay = 0;
			bDelayOn = 0;
			bDragThumb = 0;
		}
		nNew = nViewTextLine + nDelta;
		this.ClipScrollPos(nNew);
		if (nNew != nViewTextLine || nPrevViewTextLine != nViewTextLine)
		{
			nViewTextLine = nNew;
			bUpdate = 1;
		}
		if (this.CheckPlayingVoice())
		{
			bVoicePlaying = false;
			bUpdate = 1;
			this.m_bRedraw = true;
		}
		if (bKeyClear)
		{
			bKeyClear = 0;
		}
	}
}

bool CBackLogView::IsScrollBoxAreaUnderCursor()
{
	int nX = 0;
	int nY = 0;
	if (!AFL_Mouse_GetPos(nX, nY))
	{
		return false;
	}
	if (nX >= this.m_BackLogModel.GetScrollBoxAreaX() && nX < this.m_BackLogModel.GetScrollBoxAreaX() + this.m_BackLogModel.GetScrollBoxAreaWidth() && nY >= this.m_BackLogModel.GetScrollBoxAreaY() && nY < this.m_BackLogModel.GetScrollBoxAreaY() + this.m_BackLogModel.GetScrollBoxAreaHeight())
	{
		return true;
	}
	return false;
}

void CBackLogView::UpdateScrollPosByMousePos(ref int nViewTextLine)
{
	int nX = 0;
	int nY = 0;
	if (!AFL_Mouse_GetPos(nX, nY))
	{
		return;
	}
	int nOffsetY = nY - this.m_BackLogModel.GetScrollBoxAreaY();
	if (nOffsetY < 0)
	{
		nViewTextLine = 0;
		return;
	}
	else if (nOffsetY >= this.m_BackLogModel.GetScrollBoxAreaHeight())
	{
		this.ClipScrollPos(nViewTextLine);
		return;
	}
	int nScrollBoxHeight = this.m_ScrollBoxStateSprite.GetHeight();
	nViewTextLine = ((nOffsetY - nScrollBoxHeight / 2) * this.m_nScrollTotalLines) / (this.m_BackLogModel.GetScrollBoxAreaHeight() - nScrollBoxHeight);
	this.ClipScrollPos(nViewTextLine);
}

void CBackLogView::UpdateScrollBox(int nViewTextLine, bool bDragging)
{
	if (bDragging)
	{
		this.m_ScrollBoxStateSprite.SetActiveState(1);
	}
	else
	{
		int nNewActiveState = this.m_ScrollBoxStateSprite.IsMouseCursorInRect() ? 1 : 0;
		if (this.m_ScrollBoxStateSprite.GetActiveState() != nNewActiveState && nNewActiveState == 1)
		{
			this.PlayUnderCursorSound();
		}
		this.m_ScrollBoxStateSprite.SetActiveState(nNewActiveState);
	}
	int nScrollBoxY = 0;
	if (this.m_nScrollTotalLines != 0)
	{
		int nScrollBoxHeight = this.m_ScrollBoxStateSprite.GetHeight();
		nScrollBoxY = (nViewTextLine * (this.m_BackLogModel.GetScrollBoxAreaHeight() - nScrollBoxHeight)) / this.m_nScrollTotalLines;
	}
	this.m_ScrollBoxStateSprite.SetPos(this.m_BackLogModel.GetScrollBoxAreaX(), this.m_BackLogModel.GetScrollBoxAreaY() + nScrollBoxY);
}

bool CBackLogView::CheckReturnButton()
{
	bool bUnderCursor = this.m_ExitButtonSprite.IsMouseCursorInRect();
	int nNewActiveState = bUnderCursor ? 1 : 0;
	if (nNewActiveState != this.m_ExitButtonSprite.GetActiveState() && bUnderCursor)
	{
		this.PlayUnderCursorSound();
	}
	this.m_ExitButtonSprite.SetActiveState(nNewActiveState);
	if (this.m_ExitButtonLButtonClick.IsClick(bUnderCursor ? 1 : 0) && bUnderCursor)
	{
		this.PlayCancelSound();
		return false;
	}
	return true;
}

bool CBackLogView::IsUpButtonUnderCursor()
{
	if (this.m_BackLogModel.GetUpButtonCG().Empty())
	{
		return false;
	}
	return this.m_UpButtonStateSprite.IsMouseCursorInRect();
}

void CBackLogView::UpdateUpButton(bool bDragging)
{
	if (this.m_BackLogModel.GetUpButtonCG().Empty())
	{
		return;
	}
	if (bDragging)
	{
		this.m_UpButtonStateSprite.SetActive(0);
	}
	else
	{
		int nNewActiveState = this.m_UpButtonStateSprite.IsMouseCursorInRect() ? 1 : 0;
		if (this.m_UpButtonStateSprite.GetActive() != nNewActiveState && nNewActiveState == 1)
		{
			this.PlayUnderCursorSound();
		}
		this.m_UpButtonStateSprite.SetActive(nNewActiveState);
	}
}

bool CBackLogView::IsDownButtonUnderCursor()
{
	if (this.m_BackLogModel.GetDownButtonCG().Empty())
	{
		return false;
	}
	return this.m_DownButtonStateSprite.IsMouseCursorInRect();
}

void CBackLogView::UpdateDownButton(bool bDragging)
{
	if (this.m_BackLogModel.GetDownButtonCG().Empty())
	{
		return;
	}
	if (bDragging)
	{
		this.m_DownButtonStateSprite.SetActive(0);
	}
	else
	{
		int nNewActiveState = this.m_DownButtonStateSprite.IsMouseCursorInRect() ? 1 : 0;
		if (this.m_DownButtonStateSprite.GetActive() != nNewActiveState && nNewActiveState == 1)
		{
			this.PlayUnderCursorSound();
		}
		this.m_DownButtonStateSprite.SetActive(nNewActiveState);
	}
}

int CBackLogView::get_index_at_mouse_pos(int nTop)
{
	int nX = 0;
	int nY = 0;
	if (!AFL_Mouse_GetPos(nX, nY))
	{
		return -1;
	}
	int n = 0;
	for (n = 0; n < this.m_VoiceDecideRectList.Numof(); ++n)
	{
		if (this.m_VoiceDecideRectList[n].IsIn(nX, nY))
		{
			return nTop + n;
		}
	}
	return -1;
}

void CBackLogView::CreateBacklogTextList()
{
	this.m_aLogData.Free();
	int nNumofADVLog = AnteaterADVEngine.ADVLogList_GetNumofADVLog();
	int i = 0;
	for (i = 0; i < nNumofADVLog; ++i)
	{
		this.AddBacklogText(i);
	}
}

void CBackLogView::AddBacklogText(int nADVLog)
{
	int NumofVoice = AnteaterADVEngine.ADVLogList_GetNumofADVLogVoice(nADVLog);
	array@int VoiceNumberList;
	int VoiceIndex = 0;
	for (VoiceIndex = 0; VoiceIndex < NumofVoice; ++VoiceIndex)
	{
		int VoiceNumber = AnteaterADVEngine.ADVLogList_GetADVLogVoice(nADVLog, VoiceIndex);
		VoiceNumberList.PushBack(VoiceNumber);
	}
	int nNumofText = AnteaterADVEngine.ADVLogList_GetNumofADVLogText(nADVLog);
	int i = 0;
	for (i = 0; i < nNumofText; ++i)
	{
		SBackLogViewText BackLogViewText;
		AnteaterADVEngine.ADVLogList_GetADVLogText(nADVLog, i, BackLogViewText.m_sText);
		BackLogViewText.VoiceNumberList.Alloc(VoiceNumberList.Numof());
		BackLogViewText.VoiceNumberList.Copy(0, VoiceNumberList, 0, VoiceNumberList.Numof());
		this.m_aLogData.PushBack(BackLogViewText);
	}
	SBackLogViewText SeparatorData;
	SeparatorData.m_bSeparator = 1;
	this.m_aLogData.PushBack(SeparatorData);
}

int CBackLogView::GetNumofBacklogText()
{
	return this.m_aLogData.Numof();
}

SBackLogViewText CBackLogView::GetBacklog(int nNum)
{
	if (nNum < 0 || nNum >= this.m_aLogData.Numof())
	{
		SBackLogViewText DummyData;
		return DummyData;
	}
	return this.m_aLogData[nNum];
}

void CBackLogView::PlayDecideSound()
{
	if (this.m_BackLogModel.GetDecideSound() == -2147483648)
	{
		return;
	}
	ÉVÉXÉeÉÄå¯â âπ(this.m_BackLogModel.GetDecideSound());
}

void CBackLogView::PlayUnderCursorSound()
{
	if (this.m_BackLogModel.GetUnderCursorSound() == -2147483648)
	{
		return;
	}
	ÉVÉXÉeÉÄå¯â âπ(this.m_BackLogModel.GetUnderCursorSound());
}

void CBackLogView::PlayCancelSound()
{
	if (this.m_BackLogModel.GetCancelSound() == -2147483648)
	{
		return;
	}
	ÉVÉXÉeÉÄå¯â âπ(this.m_BackLogModel.GetCancelSound());
}

void CBackLogView::ClipScrollPos(ref int nScrollPos)
{
	if (nScrollPos < 0)
	{
		nScrollPos = 0;
	}
	else if (nScrollPos > this.m_nScrollTotalLines)
	{
		nScrollPos = this.m_nScrollTotalLines;
	}
}

