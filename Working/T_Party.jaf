bool T_Party::updateNumber()
{
	return this.m_sNumber.update();
}

bool T_Party::blinkChara()
{
	return this.m_sChara.blink();
}

bool T_Party::blinkList()
{
	return this.m_sList.blink();
}

bool T_Party::remakeCharaList()
{
	return this.m_sList.remakeChara();
}

void T_Party::scrollList(int nID)
{
	this.m_sScroll.exec(nID);
}

int T_Party::partyOut(int nCharaNo, int nStatus)
{
	return this.m_sChara.erase(nCharaNo, nStatus);
}

int T_Party::checkInputStore(ref int nSelectID)
{
	return this.checkInput(1, nSelectID);
}

int T_Party::checkKeyStore(int nID)
{
	return this.checkKey(1, nID);
}

bool T_Party::checkWheelStore()
{
	return this.m_sScroll.checkWheel();
}

bool T_Party::checkDrop(int nID, int nCharaNo)
{
	return this.m_sChara.checkDrop(this.getCharaIndex(nID), nCharaNo);
}

bool T_Party::getButtonActive(int nID)
{
	return this.m_sButton.getButtonActive(nID);
}

int T_Party::getStatusListID(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_sList.getCount() ? -1 : 114000 + nIndex + 1;
}

int T_Party::getStatusListIndex(int nID)
{
	if (nID < 114000 || nID >= 119000)
	{
		return -1;
	}
	int idx = nID + -114001;
	return idx < 0 || idx >= this.m_sList.getCount() ? -1 : idx;
}

int T_Party::getStatusCharaID(int nIndex)
{
	return nIndex < 0 || nIndex >= 5 ? -1 : 119000 + nIndex + 1;
}

int T_Party::getStatusCharaIndex(int nID)
{
	if (nID < 119000 || nID >= 120000)
	{
		return -1;
	}
	int idx = nID + -119001;
	return idx < 0 || idx >= 5 ? -1 : idx;
}

int T_Party::getListID(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_sList.getCount() ? -1 : 120000 + nIndex + 1;
}

int T_Party::getListIndex(int nID)
{
	if (nID < 120000 || nID >= 130000)
	{
		return -1;
	}
	int idx = nID + -120001;
	return idx < 0 || idx >= this.m_sList.getCount() ? -1 : idx;
}

int T_Party::getCharaID(int nIndex)
{
	return nIndex < 0 || nIndex >= 5 ? -1 : 130000 + nIndex + 1;
}

int T_Party::getCharaIndex(int nID)
{
	if (nID < 130000 || nID > 139999)
	{
		return -1;
	}
	int idx = nID + -130001;
	return idx < 0 || idx >= 5 ? -1 : idx;
}

int T_Party::getCharaNo(int nIndex)
{
	return this.m_sList.getCharaNo(nIndex);
}

int T_Party::getPartyChara(int nIndex)
{
	return this.m_sChara.getCharaNo(nIndex);
}

int T_Party::getPartyBackupList(ref array@int anList)
{
	return this.m_sChara.getBackupParty(anList);
}

int T_Party::getPartyChangeList(ref array@int anList)
{
	return this.m_sChara.getChangeList(anList);
}

ref T_PartyListManager T_Party::getList()
{
	return this.m_sList;
}

ref T_LimitJob T_Party::getJob()
{
	return this.m_sJob;
}

ref T_Sort T_Party::getSort()
{
	return this.m_sSort;
}

T_Party::T_Party()
{
	this.clear();
}

T_Party::~T_Party()
{
	this.delete();
}

int T_Party::run(int nMode, int nLayout)
{
	int nRet = -1;
	if (!this.create(nMode, nLayout < 0 ? パーティ画面レイアウト() : nLayout))
	{
		return -1;
	}
	効果音_窓開き();
	_EFFECT(1, 100);
	int nID = this.getFirstList();
	while (true)
	{
		nID = this.checkSelect(nID);
		int nID2 = nID;
		while (nID2 > 0)
		{
			if (this.exec(nID2, nRet))
			{
				goto label0;
			}
			nID2 = nRet;
		}
		nID = this.getDefaultID(nID);
	}
label0:
	this.delete();
	return nRet;
}

void T_Party::scroll(int nValue)
{
	this.m_sList.scroll(nValue);
	this.checkStatus(0);
	this.update(-1, false);
}

void T_Party::scrollLeft()
{
	int nValue = this.m_sScroll.setValue(this.m_sScroll.getValue() - 1, -1, -1);
	this.scroll(nValue);
}

void T_Party::scrollRight()
{
	int nValue = this.m_sScroll.setValue(this.m_sScroll.getValue() + 1, -1, -1);
	this.scroll(nValue);
}

bool T_Party::remakeList(int nJobType)
{
	if (!this.m_sList.remake(-1, nJobType))
	{
		return false;
	}
	this.m_sList.setBlendRate(this.m_bOpenFlag ? 255 : -1);
	this.hideComment(-1);
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), this.m_sList.getScrollMax(), -1);
	this.setButtonActive();
	this.setButtonShow(true);
	return true;
}

int T_Party::sortList(int nSortMode)
{
	if (!this.m_sList.sort(nSortMode, false))
	{
		return -1;
	}
	this.update(-1, false);
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), -1, -1);
	return this.m_sList.getSortMode();
}

bool T_Party::changeJobList(int nJobType)
{
	if (!this.m_sJob.setJobType(nJobType))
	{
		return false;
	}
	return this.remakeList(this.m_sJob.getJobType());
}

int T_Party::showStatusList(int nID)
{
	int idx = this.getStatusListIndex(nID);
	if (idx < 0)
	{
		return -1;
	}
	int nCharaNo = this.getCharaNo(idx);
	if (nCharaNo <= 0)
	{
		return -1;
	}
	this.resetSelect();
	int nRet = Ｒ８ステータス画面(11, nCharaNo, this.m_sList.getSortMode(), this.m_sList.getJobType());
	this.m_sChara.remake();
	this.m_sList.remakeChara();
	return nRet;
}

void T_Party::checkStatus(int nID)
{
	if (this.m_sList.isBattle())
	{
		return;
	}
	int i = 0;
	int cnt = this.m_sList.getCount();
	int nID1 = 0;
	int nID2 = 0;
	if (nID > 139999)
	{
		goto label0;
	}
	if (nID > 130000)
	{
		int idx = this.getCharaIndex(nID);
		if (idx < 0)
		{
			goto label0;
		}
		int nNo = this.m_sChara.getCharaNo(idx);
		if (nNo > 0)
		{
			nID2 = this.getStatusCharaID(idx);
		}
		goto label0;
	}
	if (nID > 120000)
	{
		int idx = this.getListIndex(nID);
		if (idx < 0)
		{
			goto label0;
		}
		switch (this.getStatus(idx))
		{
			case 2:
			case 3:
				nID1 = this.getStatusListID(idx);
				break;
			case 1:
				nID1 = this.m_bOpenFlag ? this.getStatusListID(idx) : 0;
				break;
			case 4:
			default:
				break;
		}
		goto label0;
	}
	if (nID > 119000)
	{
		nID2 = nID;
		goto label0;
	}
	if (nID > 114000)
	{
		nID1 = nID;
		goto label0;
	}
label0:
	for (i = 0; i < cnt; ++i)
	{
		int nID3 = this.getStatusListID(i);
		this.m_sButton.setButtonShow(nID3, nID3 == nID1);
	}
	for (i = 0; i < 5; ++i)
	{
		int nID3 = this.getStatusCharaID(i);
		this.m_sButton.setButtonShow(nID3, nID3 == nID2);
	}
}

void T_Party::resetSelect()
{
	this.m_sSort.resetSelect();
	this.m_sScroll.resetSelect();
	this.m_sJob.resetSelect();
	this.m_sButton.resetSelect();
	システムバー_選択解除();
	this.hideComment(-1);
	this.checkStatus(0);
}

void T_Party::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		goto label0;
	}
	if (nID > 600000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
		goto label0;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		goto label0;
	}
	if (nID > 180000)
	{
		this.m_sJob.setSelect(nID, bSelect);
		goto label1;
	}
	if (nID > 170000)
	{
		this.m_sSort.setSelect(nID, bSelect);
		goto label1;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
	}
label1:
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
label0:
	this.checkStatus(bSelect ? nID : 0);
}

void T_Party::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 180000)
	{
		this.m_sJob.setCursor(nID);
		return;
	}
	if (nID > 170000)
	{
		this.m_sSort.setCursor(nID);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonCursor(nID);
		return;
	}
}

void T_Party::setInputFlag(bool bInputFlag)
{
	this.m_sSort.setInputFlag(bInputFlag);
	this.m_sScroll.setInputFlag(bInputFlag);
	this.m_sJob.setInputFlag(bInputFlag);
	this.m_sButton.setInputFlag(bInputFlag);
}

void T_Party::setListButtonShow(int nID, bool bShow)
{
	if (nID > 900000)
	{
		return;
	}
	if (nID > 600000)
	{
		return;
	}
	if (nID > 190000)
	{
		return;
	}
	if (nID > 180000)
	{
		return;
	}
	if (nID > 170000)
	{
		return;
	}
	if (nID > 130000)
	{
		return;
	}
	if (nID > 120000)
	{
		this.m_sButton.setButtonShow(nID, bShow);
		return;
	}
	if (nID > 100000)
	{
		return;
	}
}

void T_Party::setSelectChara(int nIndex, bool bSelect)
{
	if (nIndex < 0 || nIndex >= 5)
	{
		return;
	}
	int nID = this.getCharaID(nIndex);
	int nNo = this.m_sChara.getCharaNo(nIndex);
	this.m_sButton.setButtonSelect(nID, bSelect, true);
	this.m_sButton.setButtonActive(nID, bSelect ? 1 : nNo > 0);
}

bool T_Party::setLayout(int nLayout)
{
	this.deleteList();
	if (!this.m_sList.remake(nLayout, -1))
	{
		return false;
	}
	this.m_sList.setBlendRate(this.m_bOpenFlag ? 255 : -1);
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), this.m_sList.getScrollMax(), this.m_sList.getScrollPage());
	this.createList(nLayout);
	this.createBase(this.m_sList.getMode(), nLayout);
	this.setButtonZ(this.m_spBase.getZ());
	this.setButtonActive();
	this.setShow(true);
	パーティ画面レイアウト_設定(nLayout);
	return true;
}

void T_Party::setSelectLock(int nID, bool bSelect)
{
	if (nID > 190000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		return;
	}
	this.m_sButtonLock.setButtonSelect(nID, bSelect, true);
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
}

