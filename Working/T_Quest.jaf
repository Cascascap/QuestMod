void T_Quest::update()
{
	this.m_sList.update();
}

bool T_Quest::blinkList()
{
	return this.m_sList.blink();
}

void T_Quest::scrollList(int nID)
{
	this.m_sScroll.exec(nID);
}

int T_Quest::sortList(int nID)
{
	this.execSort(nID);
	return this.m_sList.getSortMode();
}

int T_Quest::limitList(int nID)
{
	this.execLimit(nID);
	return this.m_sLimit.getQuestType();
}

int T_Quest::checkInputStore(ref int nSelectID)
{
	return this.checkInput(1, false, nSelectID);
}

int T_Quest::checkKeyStore(int nID)
{
	return this.checkKey(1, false, nID);
}

bool T_Quest::checkWheelStore()
{
	return this.checkWheel(1, false);
}

bool T_Quest::getButtonActive(int nID)
{
	return this.m_sButton.getButtonActive(nID) || this.m_sButton2.getButtonActive(nID);
}

int T_Quest::getQuestIndex(int nID)
{
	if (nID < 160000 || nID >= 180000)
	{
		return -1;
	}
	int idx = nID + -160001;
	return idx < 0 || idx >= 13 ? -1 : idx;
}

int T_Quest::getButtonID(int nIndex)
{
	return nIndex < 0 || nIndex >= 13 ? -1 : 160000 + nIndex + 1;
}

int T_Quest::getListNo(int nIndex)
{
	return nIndex < 0 || nIndex >= 13 ? -1 : this.m_sList.getList(this.m_sList.getTopIndex() + nIndex);
}

bool T_Quest::isLocked()
{
	return this.m_sList.getSelectNo() > 0;
}

ref T_QuestListManager T_Quest::getList()
{
	return this.m_sList;
}

ref T_LimitQuest T_Quest::getLimit()
{
	return this.m_sLimit;
}

ref T_Sort T_Quest::getSort()
{
	return this.m_sSort;
}

ref T_ScrollBar T_Quest::getScrollBar()
{
	return this.m_sScroll;
}

ref T_ButtonGroup T_Quest::getButton()
{
	return this.m_sButton;
}

ref T_ButtonGroup T_Quest::getButton2()
{
	return this.m_sButton2;
}

T_Quest::T_Quest()
{
	this.clear();
}

T_Quest::~T_Quest()
{
	this.delete();
}

int T_Quest::run()
{
	int nRet = 0;
	if (!this.create())
	{
		return -1;
	}
	_EFFECT(1, 100);
	int nID = this.getFirstList();
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

void T_Quest::scroll(int nValue)
{
	this.hideComment(-1);
	this.m_sList.setTopIndex(nValue);
	this.setButtonActive();
	this.setButtonShow(true);
}

bool T_Quest::remakeList(int nQuestNo, int nQuestType)
{
	if (!this.m_sList.remake(nQuestType))
	{
		return false;
	}
	this.hideComment(-1);
	int idx = this.m_sList.getListIndex(nQuestNo);
	if (idx >= 0)
	{
		this.m_sList.setTopIndex(idx);
	}
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), this.m_sList.getListCount(), -1);
	this.setText();
	this.setButtonActive();
	this.setButtonShow(true);
	return true;
}

void T_Quest::resetSelect()
{
	this.m_sLimit.resetSelect();
	this.m_sSort.resetSelect();
	this.m_sScroll.resetSelect();
	this.m_sButton.resetSelect();
	this.m_sButton2.resetSelect();
	システムバー_選択解除();
	this.hideComment(-1);
}

void T_Quest::setSelect(int nID, bool bSelect, int nMode)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		return;
	}
	if (nID > 600000)
	{
		this.m_sButton2.setButtonSelect(nID, bSelect, true);
		return;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		return;
	}
	if (nID > 180000)
	{
		this.m_sSort.setSelect(nID, bSelect);
		goto label0;
	}
	if (nID > 170000)
	{
		this.m_sLimit.setSelect(nID, bSelect);
		return;
	}
	if (nID > 160000)
	{
		this.m_sButton2.setButtonSelect(nID, bSelect, true);
		goto label0;
	}
	if (nID > 100000)
	{
		if (nID == 100008)
		{
			this.m_sButton2.setButtonSelect(nID, bSelect, true);
		}
		else
		{
			this.m_sButton.setButtonSelect(nID, bSelect, true);
		}
		goto label0;
	}
label0:
	if (nMode == 0)
	{
		if (bSelect)
		{
			this.showComment(nID);
		}
		else
		{
			this.hideComment(nID);
		}
	}
}

void T_Quest::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true, 0);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 600000)
	{
		this.m_sButton2.setButtonCursor(nID);
		return;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 180000)
	{
		this.m_sSort.setCursor(nID);
		return;
	}
	if (nID > 170000)
	{
		this.m_sLimit.setCursor(nID);
		return;
	}
	if (nID > 160000)
	{
		this.m_sButton2.setButtonCursor(nID);
		return;
	}
	if (nID > 100000)
	{
		if (nID == 100008)
		{
			this.m_sButton2.setButtonCursor(nID);
		}
		else
		{
			this.m_sButton.setButtonCursor(nID);
		}
		return;
	}
}

void T_Quest::setListButtonShow(int nID, bool bShow)
{
	if (nID > 900000)
	{
		return;
	}
	if (nID > 600000)
	{
		return;
	}
	if (nID > 190000)
	{
		return;
	}
	if (nID > 180000)
	{
		return;
	}
	if (nID > 160000)
	{
		this.m_sButton2.setButtonShow(nID, bShow);
		return;
	}
	if (nID > 100000)
	{
		return;
	}
}

void T_Quest::setInputFlag(bool bInputFlag)
{
	this.m_sLimit.setInputFlag(bInputFlag);
	this.m_sSort.setInputFlag(bInputFlag);
	this.m_sScroll.setInputFlag(bInputFlag);
	this.m_sButton.setInputFlag(bInputFlag);
	this.m_sButton2.setInputFlag(bInputFlag);
}

bool T_Quest::create()
{
	this.delete();
	システムバー_作成(11, -1, true);
	this.m_spBase.attach(街マップ_土台作成(11011));
	this.m_spBase.setPos(0, 0);
	this.m_sList.create(0, -1, 0);
	this.m_sText.create(236, 22, -1, 0, 1, 1);
	this.m_sText.setPos(654, 90);
	this.m_sText.setTextSpace(-4);
	this.m_sText.setFontType(257);
	this.m_sText.setFontSize(20);
	this.m_sText.setFontColor(255, 255, 255);
	this.m_sText.setFontBold(0);
	this.m_sLimit.create(11, 170000);
	this.m_sSort.create(2, 180000, "Pending", "Quest ID", "Clears", "Difficulty", "Ease", "Reputation", "Alphabetical", "", "", "", "", "", "", "", "", "");
	this.m_sSort.setPos(1020, 579);
	this.m_sScroll.create(2, 438, 190000, 0, 0);
	this.m_sScroll.setPos(919, 60);
	this.m_sScroll.setActive(-1, true);
	this.m_sScroll.setCallback(&scrollQuestList);
	this.m_sScroll.setValue(0, this.m_sList.getListCount(), 13);
	this.m_sButton.create();
	this.m_sButton2.create();
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		ボタン登録_ＣＧ(this.m_sButton2, this.getButtonID(i), クエスト一覧_項目Ｘ(i, 0), クエスト一覧_項目Ｙ(i, 0), 11012, -1, -1, -2147483648, -2147483648);
	}
	ボタン登録_ＣＧ(this.m_sButton, 100001, 389, 498, 11015, -1, -1, -2147483648, -2147483648);
	this.m_sButton.setButtonSoundClick(100001, 5012);
	ボタン登録_ＣＧ(this.m_sButton, 100002, 359, 62, 11019, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100003, 6, 62, 11021, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100004, 6, 62, 11023, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton2, 100008, 945, 60, 11020, -1, -1, -2147483648, -2147483648);
	街マップ_タブ作成(this.m_sButton2, 600014);
	this.m_sComment.create();
	this.m_spMarkBattle.setCg(11016);
	this.m_spMarkBattle.setPos(405, 538);
	this.m_spMarkMap.setCg(11017);
	this.m_spMarkMap.setPos(508, 538);
	this.setZ(1);
	this.setText();
	this.setButtonActive();
	this.setShow(true);
	this.m_sShortcutInfo.create(9901);
	this.m_sShortcutInfo.addAll(this.m_sButton);
	this.m_sShortcutInfo.addAll(this.m_sButton2);
	this.m_sShortcutInfo.addAll(システムバー_ボタン群());
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&クエスト_上矢印);
	this.m_sInputKey.setArrowDownCallback(&クエスト_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&クエスト_左矢印);
	this.m_sInputKey.setArrowRightCallback(&クエスト_右矢印);
	this.m_sInputKey.setSelectCallback(&クエスト_選択設定);
	return true;
}

void T_Quest::delete()
{
	this.hideComment(-1);
	this.m_spBase.delete();
	this.m_sText.delete();
	this.m_sList.delete();
	this.m_sComment.delete();
	this.m_spMarkBattle.delete();
	this.m_spMarkMap.delete();
	this.m_sLimit.delete();
	this.m_sSort.delete();
	this.m_sScroll.delete();
	this.m_sButton.delete();
	this.m_sButton2.delete();
	this.m_sShortcutInfo.delete();
	this.m_sInputKey.delete();
	システムバー_削除();
	this.clear();
}

void T_Quest::clear()
{
	this.m_nCommentID = -1;
	this.m_nQuestCommentID = -1;
}

int T_Quest::checkSelect(int nID)
{
	int nRet = 0;
	bool bLock = this.isLocked();
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true, 0);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(0, bLock, nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		this.checkWheel(0, bLock);
		if (キャンセル_確認())
		{
			nRet = bLock ? 100009 : 600001;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(0, bLock, nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_Quest::checkInput(int nMode, bool bLock, ref int nSelectID)
{
	int nRet = 0;
	nSelectID = 0;
	if (nMode == 0 && !bLock)
	{
		switch (システムバー_入力確認(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label0;
				}
				break;
			case 1:
				this.m_sLimit.setInputFlag(false);
				this.m_sSort.setInputFlag(false);
				this.m_sScroll.setInputFlag(false);
				this.m_sButton.setInputFlag(false);
				this.m_sButton2.setInputFlag(false);
				return 1;
			case 2:
				return 2;
			default:
				break;
		}
	}
	if (!bLock)
	{
		switch (this.m_sLimit.checkInput(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label0;
				}
				break;
			case 1:
				this.m_sSort.setInputFlag(false);
				this.m_sScroll.setInputFlag(false);
				this.m_sButton.setInputFlag(false);
				this.m_sButton2.setInputFlag(false);
				システムバー_入力ＯＦＦ();
				return 1;
			case 2:
				return 2;
			default:
				break;
		}
		switch (this.m_sSort.checkInput(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label0;
				}
				break;
			case 1:
				this.m_sLimit.setInputFlag(false);
				this.m_sScroll.setInputFlag(false);
				this.m_sButton.setInputFlag(false);
				this.m_sButton2.setInputFlag(false);
				システムバー_入力ＯＦＦ();
				return 1;
			case 2:
				return 2;
			default:
				break;
		}
		switch (this.m_sScroll.checkInput(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label0;
				}
				break;
			case 1:
			case 2:
				return 2;
			default:
				break;
		}
	}
	if (nMode == 0)
	{
		switch (this.m_sButton.checkInput(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label1;
				}
				break;
			case 1:
				this.m_sLimit.setInputFlag(false);
				this.m_sSort.setInputFlag(false);
				this.m_sScroll.setInputFlag(false);
				this.m_sButton2.setInputFlag(false);
				システムバー_入力ＯＦＦ();
				return 1;
			case 2:
				return 2;
			default:
				break;
		}
	}
	if (!bLock)
	{
		switch (this.m_sButton2.checkInput(nSelectID))
		{
			case 0:
				if (nSelectID > 0)
				{
					goto label1;
				}
				break;
			case 1:
				this.m_sLimit.setInputFlag(false);
				this.m_sSort.setInputFlag(false);
				this.m_sScroll.setInputFlag(false);
				this.m_sButton.setInputFlag(false);
				システムバー_入力ＯＦＦ();
				return 1;
			case 2:
				return 2;
			default:
				break;
		}
	}
label1:
	if (nMode == 0)
	{
		if (nSelectID > 0)
		{
			this.showComment(nSelectID);
		}
		else
		{
			this.hideComment(-1);
		}
	}
label0:
	if (nMode == 0 && !bLock)
	{
		this.m_sButton2.setInputFlag(true);
		システムバー_入力ＯＮ();
	}
	this.m_sLimit.setInputFlag(true);
	this.m_sSort.setInputFlag(true);
	this.m_sScroll.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	return 0;
}

int T_Quest::checkKey(int nMode, bool bLock, int nID)
{
	if (nMode == 0 && !bLock)
	{
		int nID2 = システムバー_キー確認(nID);
		if (nID2 > 0)
		{
			return nID2;
		}
	}
	if (!bLock)
	{
		int nID2 = this.m_sSort.checkKey();
		if (nID2 > 0)
		{
			return nID2;
		}
		nID2 = this.m_sButton2.checkKey();
		if (nID2 > 0)
		{
			return nID2;
		}
		if (this.m_sScroll.checkKey())
		{
			return nMode == 1 ? -1 : 0;
		}
	}
	if (nMode == 0)
	{
		int nID2 = this.m_sButton.checkKey();
		if (nID2 > 0)
		{
			return nID2;
		}
		if (this.m_sInputKey.check(nID))
		{
			return 0;
		}
		this.m_sShortcutInfo.check();
	}
	return 0;
}

bool T_Quest::checkWheel(int nMode, bool bLock)
{
	if (!bLock)
	{
		if (this.m_sScroll.checkWheel())
		{
			return true;
		}
	}
	if (nMode == 0)
	{
		ホイール_クリア();
	}
	return false;
}

void T_Quest::showComment(int nID)
{
	if (this.m_nCommentID == nID)
	{
		goto label0;
	}
	switch (nID)
	{
		case 100003:
			string szText = "If saved as a favorite quest," + "@the quest will always be displayed" + "@at the top of the list.";
			if (説明_表示(nID, "", szText, "", 500, false) > 0)
			{
				説明_位置設定(this.m_sButton.getButtonPosX(nID), this.m_sButton.getButtonPosY(nID) + this.m_sButton.getButtonHeight(nID));
			}
			break;
		case 100008:
			if (説明_表示(nID, "", "Please use this for organization.", "", 500, false) > 0)
			{
				説明_位置設定((this.m_sButton2.getButtonPosX(nID) + this.m_sButton2.getButtonWidth(nID)) - 説明_幅(), this.m_sButton2.getButtonPosY(nID) + this.m_sButton2.getButtonHeight(nID));
			}
			break;
		default:
			説明_消し(this.m_nCommentID);
			this.m_nCommentID = -1;
			goto label0;
	}
	this.m_nCommentID = nID;
label0:
	this.showQuestComment(nID);
}

void T_Quest::hideComment(int nID)
{
	説明_消し(-1);
	説明_ＩＤクリア();
	this.hideQuestComment(nID);
	this.m_nCommentID = -1;
}

void T_Quest::showQuestComment(int nID)
{
	if (this.m_nQuestCommentID == nID)
	{
		return;
	}
	int nNo = this.m_sList.getSelectNo();
	if (nNo > 0)
	{
		return;
	}
	int idx = this.getQuestIndex(nID);
	if (idx < 0)
	{
		this.hideQuestComment(-1);
		return;
	}
	this.m_sComment.show(this.getListNo(idx));
	this.m_nQuestCommentID = nID;
}

void T_Quest::hideQuestComment(int nID)
{
	int nNo = this.m_sList.getSelectNo();
	if (nNo > 0)
	{
		return;
	}
	nID = nID < 0 ? this.m_nQuestCommentID : nID;
	if (nID > 0)
	{
		this.m_sComment.show(-1);
	}
	this.m_nQuestCommentID = -1;
}

void T_Quest::setZ(int nZ)
{
	this.m_spBase.setZ(nZ);
	this.m_sText.setZ(nZ + 1);
	this.m_sSort.setZ(nZ + 1);
	this.m_sScroll.setZ(nZ + 1);
	this.m_sButton.setZ(nZ + 10);
	this.m_sButton2.setZ(nZ + 10);
	this.m_sComment.setZ(nZ + 1);
	this.m_spMarkBattle.setZ(nZ + 15);
	this.m_spMarkMap.setZ(nZ + 15);
	this.m_sList.setZ(nZ + 15);
}

void T_Quest::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sText.setShow(bShow);
	this.m_sList.setShow(bShow);
	this.m_sLimit.setShow(bShow);
	this.m_sSort.setShow(bShow);
	this.m_sScroll.setShow(bShow);
	this.m_sComment.setShow(false);
	this.m_spMarkBattle.setShow(0);
	this.m_spMarkMap.setShow(0);
	システムバー_表示設定(bShow);
	this.setButtonShow(bShow);
}

void T_Quest::setButtonShow(bool bShow)
{
	this.m_sButton.setShow(bShow);
	this.m_sButton2.setShow(bShow);
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		this.m_sButton2.setButtonShow(this.getButtonID(i), this.getListNo(i) > 0 ? bShow : 0);
	}
	this.m_sButton.setButtonShow(100001, false);
	this.m_sButton.setButtonShow(100002, false);
	this.m_sButton.setButtonShow(100003, false);
	this.m_sButton.setButtonShow(100004, false);
}

void T_Quest::setButtonActive()
{
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		クエスト_ボタンＳＰ作成(this.getListNo(i), this.m_sButton2.getButton(this.getButtonID(i)));
	}
	this.m_sLimit.setButtonActive();
	int nMode = this.m_sList.getSortMode();
	this.m_sSort.setCurrentID(nMode > 0 ? 180000 + nMode : 0, false);
}

void T_Quest::setText()
{
	int nClearCount1 = クエスト_クリア数(0);
	int nClearCount2 = クエスト_クリア数(1);
	int nTotalCount1 = クエスト_発生数(0) + nClearCount1;
	int nTotalCount2 = クエスト_発生数(1) + nClearCount2;
	string szText = "Clear: %03d/%03d" % nClearCount1 % nTotalCount1;
	if (nClearCount2 > 0 || nTotalCount2 > 0)
	{
		szText += " (%03d/%03d)" % (nClearCount1 + nClearCount2) % (nTotalCount1 + nTotalCount2);
	}
	this.m_sText.setPos(654, 91);
	this.m_sText.setDrawType(2);
	this.m_sText.setText(szText, false);
}

