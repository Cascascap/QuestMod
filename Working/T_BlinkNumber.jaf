bool T_BlinkNumber::isBlink()
{
	return this.m_nBlinkStatus == 1;
}

int T_BlinkNumber::getWidth()
{
	return this.m_sNumber.getRealWidth();
}

int T_BlinkNumber::getHeight()
{
	return this.m_sNumber.getRealHeight();
}

int T_BlinkNumber::getSpNo()
{
	return this.m_sNumber.getTextSpNo();
}

T_BlinkNumber::T_BlinkNumber()
{
	this.clear();
}

T_BlinkNumber::~T_BlinkNumber()
{
	this.delete();
}

bool T_BlinkNumber::create(int nSize, string szText)
{
	this.delete();
	sact_text_metrics_t tmNumber;
	tmNumber.nSize = 30;
	tmNumber.nColorR = 255;
	tmNumber.nColorG = 255;
	tmNumber.nColorB = 255;
	tmNumber.nWeight = 40;
	tmNumber.nFace = 258;
	tmNumber.nShadowPixelL = 1;
	tmNumber.nShadowPixelR = 1;
	tmNumber.nShadowPixelU = 1;
	tmNumber.nShadowPixelD = 1;
	tmNumber.nShadowColorR = 0;
	tmNumber.nShadowColorG = 0;
	tmNumber.nShadowColorB = 0;
	if (!this.m_sNumber.createFromTextMetrics(1, szText, tmNumber, 0))
	{
		return false;
	}
	this.m_nBlinkStatus = 0;
	return true;
}

void T_BlinkNumber::delete()
{
	this.m_sNumber.delete();
	this.clear();
}

void T_BlinkNumber::clear()
{
	this.m_nBlinkStatus = -1;
	this.m_nBlinkCount = -1;
}

void T_BlinkNumber::setPos(int nX, int nY)
{
	this.m_sNumber.setPos(nX, nY);
}

void T_BlinkNumber::setZ(int nZ)
{
	this.m_sNumber.setZ(nZ);
}

void T_BlinkNumber::setShow(bool bShow)
{
	this.m_sNumber.setShow(bShow);
}

bool T_BlinkNumber::start()
{
	this.end();
	if (this.m_nBlinkStatus < 0)
	{
		return false;
	}
	this.m_nBlinkStatus = 1;
	this.m_nBlinkCount = 0;
	this.m_sNumber.setShow(true);
	this.m_sTimer.Reset();
	return true;
}

void T_BlinkNumber::end()
{
	if (!this.isBlink())
	{
		return;
	}
	this.m_sNumber.setShow(false);
	this.m_nBlinkStatus = 2;
	this.m_nBlinkCount = -1;
}

bool T_BlinkNumber::update()
{
	if (!this.isBlink())
	{
		return false;
	}
	if (this.m_sTimer.Get() < 500)
	{
		return true;
	}
	this.m_nBlinkCount++;
	if (this.m_nBlinkCount >= 6)
	{
		this.end();
		return false;
	}
	this.m_sNumber.setShow(this.m_nBlinkCount % 2 == 0);
	this.m_sTimer.Reset();
	return true;
}

T_BlinkNumberManager::T_BlinkNumberManager()
{
	this.clear();
}

T_BlinkNumberManager::~T_BlinkNumberManager()
{
	this.delete();
}

void T_BlinkNumberManager::create(int nZ)
{
	this.delete();
	this.m_nZ = nZ;
}

void T_BlinkNumberManager::delete()
{
	this.eraseAll();
	this.clear();
}

void T_BlinkNumberManager::clear()
{
	this.m_nZ = -1;
}

bool T_BlinkNumberManager::add(int nX, int nY, int nWidth, int nHeight, int nOldValue, int nNewValue)
{
	if (this.m_nZ < 0)
	{
		return false;
	}
	string szText = "";
	if (nOldValue < nNewValue)
	{
		szText = "+%d" % (nNewValue - nOldValue);
	}
	else if (nOldValue > nNewValue)
	{
		szText = "-%d" % (nOldValue - nNewValue);
	}
	else
	{
		return false;
	}
	int cnt = this.m_asNumber.Numof();
	this.m_asNumber.Realloc(cnt + 1);
	ref T_BlinkNumber rfsNumber = this.m_asNumber[cnt];
	if (!rfsNumber.create(-1, szText))
	{
		return false;
	}
	rfsNumber.setZ(this.m_nZ);
	this.setPos(cnt, nX, nY, nWidth, nHeight);
	return true;
}

int T_BlinkNumberManager::start()
{
	int i = 0;
	int cnt = this.m_asNumber.Numof();
	int nRet = -1;
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_asNumber[i].start())
		{
			nRet = 1;
		}
	}
	this.erase();
	return nRet;
}

void T_BlinkNumberManager::end()
{
	this.eraseAll();
}

int T_BlinkNumberManager::update()
{
	int i = 0;
	int cnt = this.m_asNumber.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asNumber[i].update();
	}
	this.erase();
	return this.m_asNumber.Numof() > 0 ? 1 : -1;
}

bool T_BlinkNumberManager::suspend()
{
	if (this.m_nZ < 0)
	{
		return false;
	}
	this.eraseAll();
	return true;
}

bool T_BlinkNumberManager::resume()
{
	if (this.m_nZ < 0)
	{
		return false;
	}
	this.erase();
	return true;
}

void T_BlinkNumberManager::erase()
{
	int i = 0;
	int cnt = this.m_asNumber.Numof();
	while (i < cnt)
	{
		ref T_BlinkNumber rfsNumber = this.m_asNumber[i];
		if (!rfsNumber.isBlink())
		{
			rfsNumber.delete();
			this.m_asNumber.Erase(i);
			--cnt;
		}
		else
		{
			++i;
		}
	}
}

void T_BlinkNumberManager::eraseAll()
{
	int i = 0;
	int cnt = this.m_asNumber.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asNumber[i].delete();
	}
	if (!this.m_asNumber.Empty())
	{
		this.m_asNumber.Free();
	}
}

bool T_BlinkNumberManager::setPos(int nIndex, int nX, int nY, int nWidth, int nHeight)
{
	if (nIndex < 0 || nIndex >= this.m_asNumber.Numof())
	{
		return false;
	}
	ref T_BlinkNumber rfsNumber = this.m_asNumber[nIndex];
	int nW = rfsNumber.getWidth();
	int nH = rfsNumber.getHeight() - 11;
	int nX2 = (nX + nWidth) - nW;
	int nY2 = nY - nH;
	while (true)
	{
		if (!this.checkPos(nIndex, nX2, nY2, nW, nH))
		{
			break;
		}
		nY2 -= nH;
	}
	rfsNumber.setPos(nX2, nY2);
	return true;
}

bool T_BlinkNumberManager::checkPos(int nIndex, int nX, int nY, int nWidth, int nHeight)
{
	int i = 0;
	int cnt = this.m_asNumber.Numof();
	if (nIndex < 0 || nIndex >= cnt)
	{
		return false;
	}
	T_Rect rcCheck;
	rcCheck.set(nX, nY, nWidth, nHeight);
	for (i = 0; i < cnt; ++i)
	{
		if (i == nIndex)
		{
			continue;
		}
		bool bRet = false;
		T_Sprite spWork;
		spWork.attach(this.m_asNumber[i].getSpNo());
		bRet = rcCheck.spriteOverlap(spWork);
		spWork.detach();
		if (bRet)
		{
			return true;
		}
	}
	return false;
}

