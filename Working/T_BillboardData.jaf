T_BillboardData::T_BillboardData()
{
	this.clear();
}

void T_BillboardData::clear()
{
	this.m_anCgNo.Fill(0, 2500, 0);
	this.m_anSize.Fill(0, 2500, 2147483647);
	this.m_anHoseiX.Fill(0, 2500, 2147483647);
	this.m_anHoseiY.Fill(0, 2500, 2147483647);
	this.m_anHoseiZ.Fill(0, 2500, 2147483647);
	this.m_anEnterFlag.Fill(0, 2500, 0);
}

void T_BillboardData::copy(ref T_BillboardData rfData, int nIndex)
{
	if (rfData === NULL)
	{
		return;
	}
	if (nIndex < 0)
	{
		this.m_anCgNo.Copy(0, rfData.m_anCgNo, 0, 2500);
		this.m_anSize.Copy(0, rfData.m_anSize, 0, 2500);
		this.m_anHoseiX.Copy(0, rfData.m_anHoseiX, 0, 2500);
		this.m_anHoseiY.Copy(0, rfData.m_anHoseiY, 0, 2500);
		this.m_anHoseiZ.Copy(0, rfData.m_anHoseiZ, 0, 2500);
		this.m_anEnterFlag.Copy(0, rfData.m_anEnterFlag, 0, 2500);
		return;
	}
	if (!マップ位置_インデクス確認(nIndex))
	{
		return;
	}
	this.m_anCgNo[nIndex] = rfData.m_anCgNo[nIndex];
	this.m_anSize[nIndex] = rfData.m_anSize[nIndex];
	this.m_anHoseiX[nIndex] = rfData.m_anHoseiX[nIndex];
	this.m_anHoseiY[nIndex] = rfData.m_anHoseiY[nIndex];
	this.m_anHoseiZ[nIndex] = rfData.m_anHoseiZ[nIndex];
	this.m_anEnterFlag[nIndex] = rfData.m_anEnterFlag[nIndex];
}

bool T_BillboardData::load(int nVersion)
{
	int i = 0;
	for (i = 0; i < 2500; ++i)
	{
		if (!File2.ReadInt(this.m_anCgNo[i]))
		{
			return false;
		}
		if (!File2.ReadInt(this.m_anSize[i]))
		{
			return false;
		}
		if (!File2.ReadInt(this.m_anHoseiX[i]))
		{
			return false;
		}
		if (!File2.ReadInt(this.m_anHoseiY[i]))
		{
			return false;
		}
		if (!File2.ReadInt(this.m_anHoseiZ[i]))
		{
			return false;
		}
		this.m_anEnterFlag[i] = ＢＢ情報_移動フラグ(this.m_anCgNo[i]);
	}
	return true;
}

bool T_BillboardData::loadResize(int nVersion, int nMapSizeX, int nMapSizeY)
{
	int i = 0;
	int cnt = nMapSizeX * nMapSizeY;
	int nCgNo = 0;
	int nSize = 0;
	int nHoseiX = 0;
	int nHoseiY = 0;
	int nHoseiZ = 0;
	for (i = 0; i < cnt; ++i)
	{
		if (!File2.ReadInt(nCgNo))
		{
			return false;
		}
		if (!File2.ReadInt(nSize))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiX))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiY))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiZ))
		{
			return false;
		}
		int idx = マップ位置_インデクス変換_サイズ変更(i, nMapSizeX, nMapSizeY);
		if (idx >= 0)
		{
			this.m_anCgNo[idx] = nCgNo;
			this.m_anSize[idx] = nSize;
			this.m_anHoseiX[idx] = nHoseiX;
			this.m_anHoseiY[idx] = nHoseiY;
			this.m_anHoseiZ[idx] = nHoseiZ;
			this.m_anEnterFlag[idx] = ＢＢ情報_移動フラグ(nCgNo);
		}
	}
	return true;
}

bool T_BillboardData::loadOld()
{
	int i = 0;
	int cnt = 0;
	int nCgNo = 0;
	int nSize = 0;
	int nHoseiX = 0;
	int nHoseiY = 0;
	int nHoseiZ = 0;
	if (!File2.ReadInt(cnt))
	{
		return false;
	}
	for (i = 0; i < cnt; ++i)
	{
		if (!File2.ReadInt(nCgNo))
		{
			return false;
		}
		if (!File2.ReadInt(nSize))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiX))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiY))
		{
			return false;
		}
		if (!File2.ReadInt(nHoseiZ))
		{
			return false;
		}
		int idx = マップ位置_インデクス変換_旧データ(i);
		if (idx >= 0)
		{
			this.m_anCgNo[idx] = nCgNo;
			this.m_anSize[idx] = nSize;
			this.m_anHoseiX[idx] = nHoseiX;
			this.m_anHoseiY[idx] = nHoseiY;
			this.m_anHoseiZ[idx] = nHoseiZ;
			this.m_anEnterFlag[idx] = ＢＢ情報_移動フラグ(nCgNo);
		}
	}
	return true;
}

bool T_BillboardData::save()
{
	return true;
}

void T_BillboardDataManager::setUpdate(bool bUpdate)
{
	this.m_bUpdate = bUpdate;
}

bool T_BillboardDataManager::isUpdate()
{
	return this.m_bUpdate;
}

T_BillboardDataManager::T_BillboardDataManager()
{
	this.clear();
}

void T_BillboardDataManager::clear()
{
	this.m_sData.clear();
	this.m_bUpdate = false;
}

bool T_BillboardDataManager::load(int nVersion)
{
	this.clear();
	return this.m_sData.load(nVersion);
}

bool T_BillboardDataManager::loadResize(int nVersion, int nMapSizeX, int nMapSizeY)
{
	this.clear();
	return this.m_sData.loadResize(nVersion, nMapSizeX, nMapSizeY);
}

bool T_BillboardDataManager::loadOld()
{
	this.clear();
	return this.m_sData.loadOld();
}

void T_BillboardDataManager::unload()
{
	this.clear();
}

bool T_BillboardDataManager::save()
{
	this.m_bUpdate = false;
	return true;
}

void T_BillboardDataManager::backup(ref T_BillboardData sData)
{
	if (sData === NULL)
	{
		return;
	}
	sData.copy(this.m_sData, -1);
}

void T_BillboardDataManager::restore(ref T_BillboardData sData)
{
	if (sData === NULL)
	{
		return;
	}
	this.m_sData.copy(sData, -1);
}

bool T_BillboardDataManager::set(int nMapX, int nMapY, int nCgNo)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anCgNo[idx] = nCgNo;
	this.m_sData.m_anSize[idx] = 2147483647;
	this.m_sData.m_anHoseiX[idx] = 2147483647;
	this.m_sData.m_anHoseiY[idx] = 2147483647;
	this.m_sData.m_anHoseiZ[idx] = 2147483647;
	this.m_sData.m_anEnterFlag[idx] = ＢＢ情報_移動フラグ(nCgNo);
	this.m_bUpdate = true;
	return true;
}

bool T_BillboardDataManager::setSize(int nMapX, int nMapY, int nSize)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anSize[idx] = nSize;
	this.m_bUpdate = true;
	return true;
}

bool T_BillboardDataManager::setHoseiX(int nMapX, int nMapY, int nHoseiX)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anHoseiX[idx] = nHoseiX;
	this.m_bUpdate = true;
	return true;
}

bool T_BillboardDataManager::setHoseiY(int nMapX, int nMapY, int nHoseiY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anHoseiY[idx] = nHoseiY;
	this.m_bUpdate = true;
	return true;
}

bool T_BillboardDataManager::setHoseiZ(int nMapX, int nMapY, int nHoseiZ)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anHoseiZ[idx] = nHoseiZ;
	this.m_bUpdate = true;
	return true;
}

bool T_BillboardDataManager::setEnterFlag(int nMapX, int nMapY, int nEnterFlag)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return false;
	}
	this.m_sData.m_anEnterFlag[idx] = nEnterFlag;
	this.m_bUpdate = true;
	return true;
}

int T_BillboardDataManager::getCgNo(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anCgNo[idx];
}

int T_BillboardDataManager::getSize(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anSize[idx];
}

int T_BillboardDataManager::getHoseiX(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anHoseiX[idx];
}

int T_BillboardDataManager::getHoseiY(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anHoseiY[idx];
}

int T_BillboardDataManager::getHoseiZ(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anHoseiZ[idx];
}

int T_BillboardDataManager::getEnterFlag(int nMapX, int nMapY)
{
	int idx = マップ位置_インデクス(nMapX, nMapY);
	if (idx < 0)
	{
		return 0;
	}
	return this.m_sData.m_anEnterFlag[idx];
}

