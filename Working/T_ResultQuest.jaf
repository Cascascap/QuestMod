T_ResultQuest::T_ResultQuest()
{
	this.clear();
}

T_ResultQuest::~T_ResultQuest()
{
	this.delete();
}

bool T_ResultQuest::create(int nZ)
{
	this.delete();
	int i = 0;
	int cnt = this.createList();
	if (cnt <= 0)
	{
		return false;
	}
	this.m_spBase.setCg(10358);
	this.m_spBase.setZ(nZ);
	this.m_spLabel.setCg(10359);
	this.m_spLabel.setZ(nZ + 1);
	for (i = 0; i < cnt; ++i)
	{
		this.createQuest(i, this.m_anQuestNo[i], nZ + 10);
	}
	return true;
}

void T_ResultQuest::delete()
{
	int i = 0;
	int cnt = this.m_aspQuest.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspQuest[i].delete();
	}
	this.m_spBase.delete();
	this.m_spLabel.delete();
	this.clear();
}

void T_ResultQuest::clear()
{
	this.m_nMode = -1;
	this.m_nStrX = -1;
	this.m_nStrY = -1;
	this.m_nEndX = -1;
	this.m_nEndY = -1;
	this.m_nTotalTime = -1;
	if (!this.m_anMoveTime.Empty())
	{
		this.m_anMoveTime.Free();
	}
	if (!this.m_anWaitTime.Empty())
	{
		this.m_anWaitTime.Free();
	}
	if (!this.m_anQuestNo.Empty())
	{
		this.m_anQuestNo.Free();
	}
}

bool T_ResultQuest::start(int nMode, int nTotalTime)
{
	if (this.m_anQuestNo.Empty())
	{
		return false;
	}
	this.end();
	switch (nMode)
	{
		case 0:
			this.m_nStrX = 0;
			this.m_nStrY = 768;
			this.m_nEndX = 0;
			this.m_nEndY = 0;
			break;
		case 1:
			this.m_nStrX = 0;
			this.m_nStrY = 0;
			this.m_nEndX = 0;
			this.m_nEndY = -768;
			break;
		default:
			return false;
	}
	this.m_nMode = nMode;
	this.m_nTotalTime = nTotalTime;
	int i = 0;
	int cnt = this.m_anQuestNo.Numof() + 1;
	this.m_anMoveTime.Alloc(cnt);
	this.m_anWaitTime.Alloc(cnt);
	if (this.m_nMode == 0)
	{
		int nMoveTime = (nTotalTime * 3) / 4;
		int nInterval = nMoveTime / (cnt + 1);
		for (i = 0; i < cnt; ++i)
		{
			this.m_anMoveTime[i] = nMoveTime;
			this.m_anWaitTime[i] = nTotalTime - nMoveTime;
			nMoveTime -= nInterval;
		}
	}
	else
	{
		int nMoveTime = (nTotalTime * 2) / 3;
		for (i = 0; i < cnt; ++i)
		{
			this.m_anMoveTime[i] = nMoveTime;
			this.m_anWaitTime[i] = 0;
		}
	}
	this.setPos(this.m_nStrX, this.m_nStrY);
	this.setShow(true);
	return true;
}

void T_ResultQuest::end()
{
	if (this.m_nTotalTime < 0)
	{
		return;
	}
	this.setPos(this.m_nEndX, this.m_nEndY);
	this.m_nMode = -1;
	this.m_nStrX = -1;
	this.m_nStrY = -1;
	this.m_nEndX = -1;
	this.m_nEndY = -1;
	this.m_nTotalTime = -1;
	if (!this.m_anMoveTime.Empty())
	{
		this.m_anMoveTime.Free();
	}
	if (!this.m_anWaitTime.Empty())
	{
		this.m_anWaitTime.Free();
	}
}

bool T_ResultQuest::update(int nTime)
{
	if (this.m_nTotalTime < 0)
	{
		return false;
	}
	int nX1 = this.m_nStrX + é¿êîåvéZ(this.m_nEndX - this.m_nStrX, nTime, this.m_nTotalTime);
	int nY1 = this.m_nStrY + é¿êîåvéZ(this.m_nEndY - this.m_nStrY, nTime, this.m_nTotalTime);
	if (this.m_nMode != 1)
	{
		this.m_spBase.setPos(nX1, nY1);
	}
	int i = 0;
	int cnt = this.m_anMoveTime.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int nTime2 = nTime - this.m_anWaitTime[i];
		if (nTime2 > 0)
		{
			ref int nMoveTime = this.m_anMoveTime[i];
			int nX2 = this.m_nStrX + é¿êîåvéZ(this.m_nEndX - this.m_nStrX, nTime2, nMoveTime);
			int nY2 = this.m_nStrY + é¿êîåvéZ(this.m_nEndY - this.m_nStrY, nTime2, nMoveTime);
			this.setQuestPos(i - 1, nX2, nY2);
		}
		else
		{
			this.setQuestPos(i - 1, this.m_nStrX, this.m_nStrY);
		}
	}
	return true;
}

int T_ResultQuest::createList()
{
	int i = 0;
	int cnt = ÅüÇmÇdÇvÉNÉGÉXÉg.Numof();
	int nCount = 0;
	for (i = 1; i < cnt; ++i)
	{
		int nQuestNo = ÅüÇmÇdÇvÉNÉGÉXÉg[i];
		if (nQuestNo <= 0)
		{
			continue;
		}
		this.m_anQuestNo.PushBack(nQuestNo);
		++nCount;
		if (nCount >= 11)
		{
			break;
		}
	}
	return nCount;
}

bool T_ResultQuest::createQuest(int nIndex, int nQuestNo, int nZ)
{
	if (nIndex < 0 || nIndex >= this.m_aspQuest.Numof())
	{
		return false;
	}
	T_QuestList sQuest;
	sQuest.create();
	if (!sQuest.set(nQuestNo))
	{
		return false;
	}
	T_Sprite spWork;
	ref T_Sprite rfSp = this.m_aspQuest[nIndex];
	rfSp.setCg(10360);
	spWork.setCg(11012);
	rfSp.copyCg(5, 5, spWork, 0, 0, spWork.getWidth() / 2, spWork.getHeight());
	sQuest.copyToSprite2(rfSp, 5, 5);
	rfSp.setZ(nZ);
	return true;
}

void T_ResultQuest::setPos(int nX, int nY)
{
	int i = 0;
	int cnt = this.m_anQuestNo.Numof();
	int nHH = 38 + 65 * cnt;
	int nYY = (768 - nHH) / 2;
	if (this.m_nMode != 1)
	{
		this.m_spBase.setPos(nX, nY);
	}
	this.m_spLabel.setPos(nX + 25, nY + nYY);
	int nX2 = nX + 3;
	int nY2 = nY + nYY + 38;
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspQuest[i].setPos(nX2, nY2);
		nY2 += 65;
	}
}

void T_ResultQuest::setShow(bool bShow)
{
	int i = 0;
	int cnt = this.m_anQuestNo.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspQuest[i].setShow(bShow);
	}
	this.m_spBase.setShow(bShow);
	this.m_spLabel.setShow(bShow);
}

void T_ResultQuest::setQuestPos(int nIndex, int nX, int nY)
{
	int i = 0;
	int cnt = this.m_anQuestNo.Numof();
	if (nIndex >= cnt)
	{
		return;
	}
	int nHH = 38 + 65 * cnt;
	int nYY = (768 - nHH) / 2;
	if (nIndex < 0)
	{
		this.m_spLabel.setPos(nX + 25, nY + nYY);
		return;
	}
	int nX2 = nX + 3;
	int nY2 = nY + nYY + 38 + 65 * nIndex;
	this.m_aspQuest[nIndex].setPos(nX2, nY2);
}

