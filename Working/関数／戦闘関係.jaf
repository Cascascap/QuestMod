string 戦闘グループ文字列(int no)
{
	if (no == 135)
	{
		return "LV 0 Monsters";
	}
	if (no == 2)
	{
		return "LV 1 Monsters";
	}
	if (no == 3)
	{
		return "LV 1 Monsters (Weak)";
	}
	if (no == 4)
	{
		return "LV 1 Doggy";
	}
	if (no == 5)
	{
		return "LV 1 Ruronta";
	}
	if (no == 6)
	{
		return "LV 5 Monsters";
	}
	if (no == 7)
	{
		return "LV 5 Monsters (Weak)";
	}
	if (no == 8)
	{
		return "LV 5 Monsters";
	}
	if (no == 9)
	{
		return "LV 5 Goldfish";
	}
	if (no == 10)
	{
		return "LV 5 Kalar";
	}
	if (no == 13)
	{
		return "LV 5 Kalar Veteran";
	}
	if (no == 11)
	{
		return "LV 5 Hanny";
	}
	if (no == 12)
	{
		return "LV 5 Yankee";
	}
	if (no == 85)
	{
		return "LV 5 Soil Pollution";
	}
	if (no == 14)
	{
		return "LV 10 Monsters";
	}
	if (no == 15)
	{
		return "LV 10 Monsters (Weak)";
	}
	if (no == 16)
	{
		return "LV 10 Magball";
	}
	if (no == 21)
	{
		return "LV 10 Thugs";
	}
	if (no == 22)
	{
		return "LV 10 Wood Boxen";
	}
	if (no == 23)
	{
		return "LV 10 Gecky";
	}
	if (no == 24)
	{
		return "LV 10 Squidmen";
	}
	if (no == 17)
	{
		return "LV 10 Hanny";
	}
	if (no == 18)
	{
		return "LV 10 Zombie";
	}
	if (no == 19)
	{
		return "LV 10 Uglies (Lion Mind)";
	}
	if (no == 20)
	{
		return "LV 10 Uglies (Cheetah Mind)";
	}
	if (no == 25)
	{
		return "LV 15 Monsters";
	}
	if (no == 26)
	{
		return "LV 15 Monsters (Weak)";
	}
	if (no == 27)
	{
		return "LV 15 Jar";
	}
	if (no == 28)
	{
		return "LV 15 Splish-Splash";
	}
	if (no == 29)
	{
		return "LV 15 D. Shield";
	}
	if (no == 30)
	{
		return "LV 15 Crimson Eye";
	}
	if (no == 31)
	{
		return "LV 20 Monsters";
	}
	if (no == 32)
	{
		return "LV 20 Monsters (Weak)";
	}
	if (no == 33)
	{
		return "LV 20 Insect";
	}
	if (no == 34)
	{
		return "LV 20 Frog Lady";
	}
	if (no == 35)
	{
		return "LV 20 Japanese Soldier";
	}
	if (no == 36)
	{
		return "LV 20 Hanny";
	}
	if (no == 37)
	{
		return "LV 20 Spirit";
	}
	if (no == 38)
	{
		return "LV 20 Bomber";
	}
	if (no == 39)
	{
		return "LV 25 Monsters";
	}
	if (no == 40)
	{
		return "LV 25 Monsters (Weak)";
	}
	if (no == 41)
	{
		return "LV 25 Smile Man";
	}
	if (no == 42)
	{
		return "LV 25 Lead Ball";
	}
	if (no == 43)
	{
		return "LV 25 Hanny";
	}
	if (no == 44)
	{
		return "LV 25 Samera~i";
	}
	if (no == 45)
	{
		return "LV 25 Asshole";
	}
	if (no == 116)
	{
		return "LV 25 Abnormal";
	}
	if (no == 118)
	{
		return "LV 25 Goldfish";
	}
	if (no == 46)
	{
		return "LV 30 Monsters (Weak)";
	}
	if (no == 47)
	{
		return "LV 30 Monsters";
	}
	if (no == 48)
	{
		return "LV 30 Ebony Eye";
	}
	if (no == 49)
	{
		return "LV 30 Hanny";
	}
	if (no == 50)
	{
		return "LV 30 NASU";
	}
	if (no == 86)
	{
		return "LV 30 NASU (Weak)";
	}
	if (no == 51)
	{
		return "LV 30 Kalar";
	}
	if (no == 83)
	{
		return "LV 30 Monsters";
	}
	if (no == 102)
	{
		return "LV 30 Monsters";
	}
	if (no == 113)
	{
		return "LV 30 Abnormal";
	}
	if (no == 115)
	{
		return "LV 30 Abnormal";
	}
	if (no == 121)
	{
		return "LV 30 Monsters";
	}
	if (no == 61)
	{
		return "LV 35 Sea-dwellers";
	}
	if (no == 60)
	{
		return "LV 35 Helmanian Army";
	}
	if (no == 53)
	{
		return "LV 35 Monsters (Weak)";
	}
	if (no == 54)
	{
		return "LV 35 Monsters";
	}
	if (no == 55)
	{
		return "LV 35 Hugant";
	}
	if (no == 56)
	{
		return "LV 35 Blue Wand";
	}
	if (no == 57)
	{
		return "LV 25 Hunting Grounds";
	}
	if (no == 59)
	{
		return "LV 35 Hyper Building";
	}
	if (no == 129)
	{
		return "LV 35 Bug";
	}
	if (no == 58)
	{
		return "LV 35 Circle";
	}
	if (no == 114)
	{
		return "LV 35 Abnormal";
	}
	if (no == 117)
	{
		return "LV 35 Abnormal";
	}
	if (no == 62)
	{
		return "LV 40 Ghouls";
	}
	if (no == 79)
	{
		return "LV 40 Bone";
	}
	if (no == 63)
	{
		return "LV 40 Ghouls";
	}
	if (no == 80)
	{
		return "LV 40 Blue Wand";
	}
	if (no == 64)
	{
		return "LV 40 Monsters";
	}
	if (no == 81)
	{
		return "LV 40 Hanny";
	}
	if (no == 82)
	{
		return "Amazusa Group";
	}
	if (no == 98)
	{
		return "LV 40 Kawanakajima";
	}
	if (no == 99)
	{
		return "LV 40 Alicist Security";
	}
	if (no == 100)
	{
		return "LV 40 Contaminated";
	}
	if (no == 101)
	{
		return "LV 40 Night Horror";
	}
	if (no == 103)
	{
		return "LV 40 Hanny";
	}
	if (no == 106)
	{
		return "LV 40 Mechavalry";
	}
	if (no == 119)
	{
		return "LV 40 Magic Users";
	}
	if (no == 130)
	{
		return "LV 40 Majician";
	}
	if (no == 111)
	{
		return "LV 45 Monsters (Weak)";
	}
	if (no == 89)
	{
		return "LV 45 Monsters";
	}
	if (no == 90)
	{
		return "LV 45 Monsters";
	}
	if (no == 91)
	{
		return "LV 45 Shepherds";
	}
	if (no == 92)
	{
		return "LV 45 Mountain Dwellers";
	}
	if (no == 93)
	{
		return "LV 45 Squidmen";
	}
	if (no == 112)
	{
		return "LV 45 Forest Dwellers (Weak)";
	}
	if (no == 104)
	{
		return "LV 45 Forest Dwellers";
	}
	if (no == 105)
	{
		return "LV 45 Sea Dwellers";
	}
	if (no == 107)
	{
		return "LV 45 Horned Whales";
	}
	if (no == 133)
	{
		return "LV 45 Horror";
	}
	if (no == 66)
	{
		return "LV 50 Monsters (Weak)";
	}
	if (no == 67)
	{
		return "LV 50 Monsters";
	}
	if (no == 68)
	{
		return "LV 50 Monsters";
	}
	if (no == 69)
	{
		return "LV 50 Monsters";
	}
	if (no == 108)
	{
		return "LV 50 Elastic Grape";
	}
	if (no == 109)
	{
		return "LV 50 Shepherds";
	}
	if (no == 123)
	{
		return "LV 50 Hanny Cannon";
	}
	if (no == 124)
	{
		return "LV 60 Monsters";
	}
	if (no == 125)
	{
		return "LV 60 Monsters";
	}
	if (no == 126)
	{
		return "LV 60 Hanny";
	}
	if (no == 127)
	{
		return "LV 70 Monsters";
	}
	if (no == 131)
	{
		return "LV 70 Guardian";
	}
	if (no == 128)
	{
		return "Malgrid X";
	}
	if (no == 94)
	{
		return "Rising Dragon Mountain 1";
	}
	if (no == 95)
	{
		return "Rising Dragon Mountain 2";
	}
	if (no == 96)
	{
		return "Rising Dragon Mountain 3";
	}
	if (no == 97)
	{
		return "Rising Dragon Mountain 4";
	}
	if (no == 70)
	{
		return "LV %d Bones" % FA[3];
	}
	if (no == 71)
	{
		return "LV 30 Bones";
	}
	if (no == 72)
	{
		return "LV 50 Bones";
	}
	if (no == 84)
	{
		return "Pocky Rock";
	}
	if (no == 110)
	{
		return "Treasure Dango";
	}
	if (no == 122)
	{
		return "Happy Can Can";
	}
	if (no == 120)
	{
		return "Billboard";
	}
	if (no == 73)
	{
		return "LV 1 Adventurers";
	}
	if (no == 74)
	{
		return "LV 10 Adventurers";
	}
	if (no == 75)
	{
		return "LV 20 Adventurers";
	}
	if (no == 76)
	{
		return "LV 30 Adventurers";
	}
	if (no == 77)
	{
		return "LV 40 Adventurers";
	}
	if (no == 78)
	{
		return "Contaminated";
	}
	if (no == 87)
	{
		return "Snatcher";
	}
	if (no == 88)
	{
		return "Tofu Ghost";
	}
	if (no == 132)
	{
		return "Adventurer Punishers";
	}
	if (no == 134)
	{
		return "Philanthropists";
	}
	return "???";
}

void エンカウント中身登録(int a1, int a2, int a3, int a4, int a5)
{
	int loop = 0;
	for (loop = 1; loop < 6; ++loop)
	{
		◆エンカウント中身[loop] = 0;
	}
	if (a1 == 0)
	{
		◆ランダムエンカウント有無 = 0;
	}
	if (a1 != 0)
	{
		◆ランダムエンカウント有無 = 1;
	}
	◆エンカウント中身[1] = a1;
	◆エンカウント中身[2] = a2;
	if (a2 != 0)
	{
		◆ランダムエンカウント有無 = 2;
	}
	◆エンカウント中身[3] = a3;
	if (a3 != 0)
	{
		◆ランダムエンカウント有無 = 3;
	}
	◆エンカウント中身[4] = a4;
	if (a4 != 0)
	{
		◆ランダムエンカウント有無 = 4;
	}
	◆エンカウント中身[5] = a5;
	if (a5 != 0)
	{
		◆ランダムエンカウント有無 = 5;
	}
}

int 雑魚戦闘処理(int ▲配置敵)
{
	lint loop = 0;
	lint re = 0;
	lint ▲バグと戦闘 = 0;
	lint aa = 0;
	lint ▲味方平均レベル = 0;
	lint ▲威圧合計 = 0;
	◆戦闘ランク = 0;
	◆敵強化率 = 0;
	◆戦闘後アイテム取得 = 0;
	◆戦闘後アイテム取得／女の子 = 0;
	◆戦闘グループ = 0;
	FA[75] = 1;
	if (▲配置敵 == 1)
	{
		FA[75] = 2;
		lint rr = 0;
		lint aa = 0;
		lint bb = 0;
		lint dummy = 0;
		if (◆iiq == 66)
		{
			aa = 1;
		}
		if (◆iiq == 178)
		{
			aa = 1;
		}
		if (◆iiq == 174)
		{
			aa = 1;
		}
		if (◆iiq == 175)
		{
			aa = 1;
		}
		if (◆iiq == 190)
		{
			aa = 1;
		}
		if (◆ＭＡＰ基礎型 == 17)
		{
			aa = 1;
		}
		if (aa == 0 && ＰＴＡ有無／固有(1) != 0 && ◆クエスト冒険者接触 == 0 && RAND(5) == 1)
		{
			aa = 1;
			◆クエスト冒険者接触 = 1;
			▲配置敵 = 73;
			if (Ｑ難易度(◆iiq, -1) >= 10 && RAND(2) == 1)
			{
				▲配置敵 = 74;
			}
			if (Ｑ難易度(◆iiq, -1) >= 15 && RAND(2) == 1)
			{
				▲配置敵 = 75;
			}
			if (Ｑ難易度(◆iiq, -1) >= 25 && RAND(2) == 1)
			{
				▲配置敵 = 76;
			}
			if (Ｑ難易度(◆iiq, -1) >= 35 && RAND(2) == 1)
			{
				▲配置敵 = 77;
			}
			ADVON();
			セット表示(0, gＭ, 1000, 0);
			ト書き();
			'A group of similarly-dressed men appeared before Rance\'s party.' A;
			'They yelled a cheerful greeting, appearing to be friendly.' B;
			選択初期();
			選択_項目追加(1, "Attack (They might have money!)", -1, -1, -1, "", -1);
			選択_項目追加(2, "Ignore them", -1, -1, -1, "", -1);
			rr = 選択_実行(false, 0, 0, false);
			if (rr == 2)
			{
				立ち絵表示(0, 1, 200);
				セリフ(2005, "");
				'"It\'s just a bunch of guys, don\'t care.' R;
				' Don\'t pay them any attention.' R;
				' Let\'s keep going."' A;
				ADVOFF();
				return 0;
			}
			セリフ(2004, "");
			'"Alright, you guys are villains, I\'ve decided.' R;
			' So you\'re all dead!' R;
			' And we\'re taking all your stuff!"' A;
			ADVOFF();
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				◆戦闘後アイテム取得 = 武器防具を選ぶ(dummy);
			}
		}
		if (aa == 0 && ◆クエストボーン接触 == 0 && ◆クエスト戦闘回数 > 5 && RAND(2) == 1)
		{
			aa = 1;
			◆クエストボーン接触 = 1;
			▲配置敵 = 70;
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				◆戦闘後アイテム取得 = 特殊を選ぶ(0);
			}
		}
		if (aa == 0 && ◆金 >= 5000 && ◆クエスト戦闘勝利回数／配置敵 >= 5 && FA[122] == 0 && RAND(8) == 1)
		{
			aa = 1;
			FA[122] = 1;
			▲配置敵 = 87;
		}
		int ▲発生率 = 8;
		if (◆iiq == 147)
		{
			▲発生率 = 1;
		}
		if (aa == 0 && ◆クエスト戦闘勝利回数／配置敵 >= 5 && FA[123] == 0 && RAND(▲発生率) == 1)
		{
			aa = 1;
			FA[123] = 1;
			▲配置敵 = 120;
		}
		if (aa == 0 && ◆クエスト戦闘勝利回数／配置敵 >= 5 && FA[124] == 0 && RAND(8) == 1)
		{
			aa = 1;
			FA[124] = 1;
			▲配置敵 = 88;
		}
		if (aa == 0 && ◆プラスキット == 1 && RAND(3) == 1 && 汚染人間発生確認() == 1)
		{
			aa = 1;
			FA[39] = 1;
			▲配置敵 = 78;
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				◆戦闘後アイテム取得 = 209;
			}
			if (EV("戦闘接触／汚染冒険者／初", -2147483648) == false)
			{
				戦闘接触／汚染冒険者／初();
			}
			else
			{
				戦闘接触／汚染冒険者／汎用();
			}
		}
		if (aa == 0 && ◆ワールド >= 2 && ◆クエスト戦闘勝利回数／配置敵 >= 5 && RAND(7) == 1)
		{
			▲配置敵 = 132;
		}
	}
	if (▲配置敵 == 0)
	{
		if (◆iiq == 95 && QD[1] == 1 && ◆クエスト戦闘回数 % 2 == 0)
		{
			if (EV("ビル／バグ１匹目", -2147483648) == false)
			{
				ビル／バグ１匹目();
			}
			▲配置敵 = 129;
			▲バグと戦闘 = 1;
		}
	}
	if (◆iiq == 66 && ◆クエスト戦闘回数 == 0)
	{
		▲配置敵 = 10;
	}
	雑魚セット生成(▲配置敵);
	LOG("\n・Battle (Random encounter: %s) \n" % 戦闘グループ文字列(◆戦闘グループ));
	LOG_TADA("\n＞雑魚接触　敵グループ（" + 戦闘グループ文字列(◆戦闘グループ) + "）\n");
	for (loop = 1; loop < 6; loop++)
	{
		if (PTB[loop] != 0)
		{
			LOG_TADA("　　" + string(loop) + "：" + Ｃ名前(PTB[loop], "") + "　素早：" + string(Ｃ素早さ(PTB[loop], -1)) + "　" + 属性文字列(Ｃ弱点属性(PTB[loop], -1)) + "　" + 種族文字列(Ｃ種族(PTB[loop], -1)) + "　" + タイプ文字列(Ｃタイプ(PTB[loop], -1)) + "\n");
		}
	}
	if (ＰＴＡ総数() == 5 && ▲配置敵 == 0)
	{
		▲味方平均レベル = ＰＴＡ平均レベル();
		▲威圧合計 = ＣＳ総数取得／スタメン(292, 0) * 20;
		aa = ▲味方平均レベル - (FA[3] + 10);
		int ▲逃げる確率 = (aa + ▲威圧合計) * 2;
		if (▲逃げる確率 > 70)
		{
			▲逃げる確率 = 70;
		}
		if (▲バグと戦闘 == 1)
		{
			▲逃げる確率 = 0;
		}
		if (◇戦闘イベント名 == "警報トラップ")
		{
			▲逃げる確率 = 0;
		}
		if (◆ワールド >= 2)
		{
			▲逃げる確率 = 0;
		}
		if (aa > 0 && ▲逃げる確率 > RAND(100))
		{
			LOG_TADA("\n＞敵の逃げるチェック　味方平均レベル（" + string(▲味方平均レベル) + "）＋威圧（" + string(▲威圧合計) + "）　　敵ランク（" + string(FA[3]) + "）\n");
			LOG_TADA("＞敵が逃げ出した　" + string(▲逃げる確率) + "％　\n");
			LOG("                 Enemy fled. (Chance: %s%)\n" % string3(▲逃げる確率));
			ADVON();
			セット表示(0, 0, 0, 0);
			ト書き();
			'Monsters appeared...' R;
			R();
			'...but when they saw the party, they skittered away in fear.' A;
			ADVOFF();
			return 1;
		}
	}
	◆戦闘ランク = 0;
	if (▲配置敵 == 1)
	{
		◆戦闘ランク = 1;
	}
	◆クエスト戦闘回数++;
	if (◆クエスト戦闘回数 >= 5)
	{
		FA[142] = 1;
	}
	◆クエスト戦闘回数／ＭＡＰ内++;
	FA[87]++;
	re = Ｒ８戦闘(0);
	戦闘後処理(re);
	if (re == 2)
	{
		return 2;
	}
	if (re != 1)
	{
		return 9;
	}
	if (◆iiq == 95 && ▲バグと戦闘 == 1)
	{
		if (Ｉクエスト倉庫は満杯ですか？() == 1)
		{
			return 1;
		}
		QD[2]++;
		if (QD[2] > 5)
		{
			QD[2] = 5;
		}
		クエスト進行率書き換え(40 + QD[2] * 10);
		Ｒ８アイテム取得(313, 0);
		if (QD[2] == 5)
		{
			ビル／バグ５匹捕獲();
		}
	}
	return 1;
}

int 特定戦闘処理(int exp, int m1, int m2, int m3, int m4, int m5)
{
	int loop = 0;
	int re = 0;
	Ｒ８エンカウント進行(-15);
	◆戦闘ランク = 0;
	◆敵強化率 = 0;
	◆クエスト戦闘回数++;
	◆クエスト戦闘回数／ＭＡＰ内++;
	◆戦闘グループ = 0;
	FA[87]++;
	◆戦闘後アイテム取得 = 0;
	◆戦闘後アイテム取得／女の子 = 0;
	FA[75] = 4;
	ＰＴＢ登録(exp, m1, m2, m3, m4, m5);
	if (◆名前変更フラグ == 1)
	{
		◆名前変更フラグ = 0;
		ＰＴＢ名前変更(◆名前変更[1], ◆名前変更[2], ◆名前変更[3], ◆名前変更[4], ◆名前変更[5]);
	}
	LOG_TADA("＞特定戦闘処理\n");
	for (loop = 1; loop < 6; ++loop)
	{
		if (PTB[loop] != 0)
		{
			LOG_TADA("　" + string(loop) + "：" + string(PTB[loop]) + " " + Ｃ名前(PTB[loop], "") + "\n");
		}
	}
	string ボス名 = "";
	if (PTB[2] != 0)
	{
		ボス名 = Ｃ名前(PTB[2], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[1], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[3], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[4], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[5], "");
	}
	LOG("\n・Battle (Scripted: %s) \n" % ボス名);
	re = Ｒ８戦闘(0);
	戦闘後処理(re);
	if (re == 2)
	{
		return 2;
	}
	if (re != 1)
	{
		return 9;
	}
	return 1;
}

int ボス戦闘処理(int exp, int m1, int m2, int m3, int m4, int m5, string 条件)
{
	int loop = 0;
	int re = 0;
	Ｒ８エンカウント進行(-15);
	◆戦闘ランク = 2;
	◆敵強化率 = 0;
	◆戦闘グループ = 0;
	◆クエスト戦闘回数++;
	◆クエスト戦闘回数／ＭＡＰ内++;
	FA[87]++;
	◆戦闘後アイテム取得 = 0;
	◆戦闘後アイテム取得／女の子 = 0;
	FA[75] = 3;
	if (条件 == "強化")
	{
		◆敵強化率 = 130;
	}
	ＰＴＢ登録(exp, m1, m2, m3, m4, m5);
	if (◆名前変更フラグ == 1)
	{
		◆名前変更フラグ = 0;
		ＰＴＢ名前変更(◆名前変更[1], ◆名前変更[2], ◆名前変更[3], ◆名前変更[4], ◆名前変更[5]);
	}
	if (条件 == "２倍体力")
	{
		for (loop = 1; loop < 6; ++loop)
		{
			if (Ｃ体力最大(loop, -1) != 0)
			{
				Ｃ体力最大(loop, Ｃ体力最大(loop, -1) * 2);
				if (◆ワールド == 3)
				{
					Ｃ体力最大(loop, Ｃ体力最大(loop, -1) * 2);
				}
			}
			if (Ｃ体力(loop, -1) != 0)
			{
				Ｃ体力(loop, Ｃ体力(loop, -1) * 2);
				if (◆ワールド == 3)
				{
					Ｃ体力(loop, Ｃ体力(loop, -1) * 2);
				}
			}
			LOG_TADA("　ボスの体力を２倍にします　\n");
		}
	}
	◆戦闘曲 = 53;
	if (Ｃ番号(PTB[2], -1) == 322)
	{
		◆戦闘曲 = 54;
	}
	if (Ｃ番号(PTB[2], -1) == 430)
	{
		◆戦闘曲 = 59;
	}
	if (Ｃ番号(PTB[2], -1) == 321)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 320)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 331)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 306)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 307)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 329)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 330)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 333)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 334)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 336)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 319)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 376)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 377)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 383)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 372)
	{
		◆戦闘曲 = 58;
	}
	if (Ｃ番号(PTB[2], -1) == 455)
	{
		◆戦闘曲 = 99;
	}
	if (Ｃ番号(PTB[2], -1) == 495)
	{
		◆戦闘曲 = 58;
	}
	LOG_TADA("\n＞ボス接触\n");
	for (loop = 1; loop < 6; ++loop)
	{
		if (PTB[loop] != 0)
		{
			LOG_TADA(string(loop) + "：" + string(PTB[loop]) + " " + Ｃ名前(PTB[loop], "") + "\n");
		}
	}
	string ボス名 = "";
	if (PTB[2] != 0)
	{
		ボス名 = Ｃ名前(PTB[2], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[1], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[3], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[4], "");
	}
	if (ボス名 == "")
	{
		ボス名 = Ｃ名前(PTB[5], "");
	}
	LOG("\n・Battle (Boss: %s) \n" % ボス名);
	re = Ｒ８戦闘(1);
	戦闘後処理(re);
	if (re == 2)
	{
		return 2;
	}
	if (re != 1)
	{
		return 9;
	}
	return 1;
}

void 雑魚セット生成(int ▲配置敵)
{
	int ra = 0;
	int exp = 0;
	if (▲配置敵 == 0)
	{
		◇雑魚戦エンカウントフラグ = 1;
	}
	◆戦闘グループ = 0;
	◆敵強化率 = 0;
	for (; ; )
	{
		if (◆ランダムエンカウント有無 == 0)
		{
			LOG_TADA("ＥＲＲＯＲ　雑魚セット生成　◆ランダムエンカウント有無＝＝０　なのに呼ばれました\n");
			◆戦闘グループ = 135;
			break;
		}
		lint ▲確率 = 1000;
		if (◆ワールド == 3)
		{
			▲確率 = 500;
		}
		if (FA[270] != 0)
		{
			▲確率 -= FA[270];
		}
		if (▲確率 < 200)
		{
			▲確率 = 200;
		}
		if (RAND(▲確率) == 45 && FA[75] == 1 && ▲配置敵 == 0)
		{
			◆戦闘グループ = 84;
			FA[93]++;
			break;
		}
		lint vv = 0;
		lint ▲ボーナス = 0;
		▲確率 = 1000;
		if (ＣＳ有無／スタメン(vv, 522, 0) != 0)
		{
			▲確率 = 500;
		}
		if (◆ワールド == 3 && ▲確率 == 500)
		{
			▲確率 = 400;
		}
		if (◆ワールド == 3 && ▲確率 == 1000)
		{
			▲確率 = 500;
		}
		if (FA[271] != 0)
		{
			▲確率 -= FA[271];
		}
		if (▲確率 < 200)
		{
			▲確率 = 200;
		}
		if (FA[274] == 0 && クリア確認(168) == 1 && RAND(5) == 1)
		{
			FA[274] = 1;
			▲ボーナス = 99;
		}
		else if (FA[275] == 0 && クリア確認(206) == 1 && RAND(5) == 1)
		{
			FA[275] = 1;
			▲ボーナス = 99;
		}
		if ((RAND(▲確率) == 20 || ▲ボーナス == 99) && FA[75] == 1 && FA[188] >= 4 && ▲配置敵 == 0)
		{
			◆戦闘グループ = 110;
			FA[207]++;
			break;
		}
		▲確率 = 100 + FA[260] * 40;
		if (FA[269] != 0)
		{
			▲確率 -= FA[269];
		}
		if (▲確率 < 100)
		{
			▲確率 = 100;
		}
		if (◆iiq == 147)
		{
			▲確率 = 1;
		}
		if (RAND(▲確率) == 12 && FA[75] == 1 && ▲配置敵 == 0)
		{
			◆戦闘グループ = 122;
			FA[260]++;
			FA[117]++;
			break;
		}
		if (◆ワールド == 3 && FA[348] < 3 && RAND(10) == 1)
		{
			FA[348]++;
			int ▲合計ＬＶ = 0;
			int loop = 0;
			for (loop = 1; loop < 6; ++loop)
			{
				if (PTA[loop] != 0)
				{
					▲合計ＬＶ += ＣＬＶ(PTA[loop], -1);
				}
			}
			LOG("・World 3 Special Encounter #%s   Level total: %s\n" % string3(FA[348]) % string3(▲合計ＬＶ));
			if (▲合計ＬＶ > 400)
			{
				◆戦闘グループ = 134;
				break;
			}
		}
		ra = RAND(◆ランダムエンカウント有無);
		if (◆エンカウント中身[ra] != 0)
		{
			◆戦闘グループ = ◆エンカウント中身[ra];
			break;
		}
		if (◆エンカウント中身[1] != 0)
		{
			◆戦闘グループ = ◆エンカウント中身[1];
			break;
		}
		◆戦闘グループ = 135;
		break;
	}
	if (▲配置敵 != 1 && ▲配置敵 != 0)
	{
		◆戦闘グループ = ▲配置敵;
	}
	ra = RAND(5);
	if (ra == ◆前回エンカウント乱数)
	{
		ra = RAND(5);
	}
	◆前回エンカウント乱数 = ra;
	if (▲配置敵 == 1 && RAND(3) == 1)
	{
		ra = 6;
	}
	if (◆iiq == 77 && ▲配置敵 == 1)
	{
		◆戦闘グループ = 62;
		if (FA[57] == 1)
		{
			◆戦闘グループ = 82;
			FA[57] = 0;
		}
	}
	exp = 10;
	FA[3] = 0;
	if (◆戦闘グループ == 135)
	{
		FA[3] = 0;
		exp = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 135, 135, 135, 135, 135);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 135, 135, 135, 135, 135);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 135, 135, 135, 135, 135);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 140, 140);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 140, 140);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 140, 140);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[174] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 140, 422, 140, 0, 0);
		}
	}
	if (◆戦闘グループ == 3)
	{
		FA[3] = 0;
		exp = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 135, 135);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 140, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 137, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 139, 139);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 140, 137);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 140, 137, 140, 0, 0);
		}
	}
	if (◆戦闘グループ == 2)
	{
		FA[3] = 0;
		exp = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 139, 139, 139, 139, 139);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 135, 135, 135, 135, 135);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 139, 139);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 137, 142, 137, 140, 140);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 135, 142, 135, 137, 135);
		}
		if (ra == 6)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 165, 137, 140, 140);
		}
	}
	if (◆戦闘グループ == 4)
	{
		FA[3] = 0;
		exp = 16;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 135, 138, 135, 139, 139);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 139, 138, 139, 139, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 137, 137, 138, 0, 139);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 138, 138, 135, 139, 139);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 139, 138, 139, 139, 138);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 144, 138, 144, 0, 0);
		}
	}
	if (◆戦闘グループ == 5)
	{
		FA[3] = 0;
		exp = 19;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 137, 137, 137, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 137, 135, 137, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 137, 137, 137, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 137, 142, 137, 139, 139);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 137, 135, 137, 153, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 137, 137, 137, 153, 153);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[155] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 137, 403, 137, 153, 153);
		}
	}
	FA[3] = 5;
	if (◆戦闘グループ == 7)
	{
		exp = 20;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 144, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 153, 153);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 147, 147);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 149, 0, 148, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 149, 146);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 144, 138, 144, 148, 153);
		}
	}
	if (◆戦闘グループ == 6)
	{
		exp = 30;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 147, 147, 147, 148, 153);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 144, 144, 144, 146, 146);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 144, 149, 144, 148, 148);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 149, 146, 146, 153, 153);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 147, 148, 147, 148, 148);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 147, 155, 147, 148, 148);
		}
	}
	if (◆戦闘グループ == 8)
	{
		exp = 30;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 153, 153, 153, 153, 153);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 147, 0, 147, 147, 147);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 146, 146);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 153, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 147, 146, 147, 153, 146);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 147, 146, 147, 151, 151);
		}
	}
	if (◆戦闘グループ == 9)
	{
		exp = 22;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 146, 144, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 146, 146);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 146, 146);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 146, 149, 146, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 158, 149, 149, 151, 151);
		}
	}
	if (◆戦闘グループ == 11)
	{
		exp = 26;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 151, 151);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 151, 151);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 140, 149, 140, 151, 151);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 140, 153, 140, 140, 140);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 151, 151, 151, 140, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 140, 158, 140, 151, 151);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[156] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 140, 404, 140, 151, 151);
		}
	}
	if (◆戦闘グループ == 10)
	{
		exp = 22;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 308, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 312, 0, 308, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 312, 312, 0, 308, 308);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 312, 0, 308, 308);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 308, 308, 308, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 308, 309, 308, 312, 312);
		}
	}
	if (◆戦闘グループ == 13)
	{
		exp = 30;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 308, 157, 308, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 312, 312, 309, 151);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 312, 312, 0, 308, 308);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 159, 312, 159, 308, 308);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 308, 309, 308, 157, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 308, 309, 308, 312, 312);
		}
	}
	if (◆戦闘グループ == 12)
	{
		exp = 17;
		FA[3] = 5;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 144, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 144, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 144, 144);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 144, 144);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 135, 0, 144, 144);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 144, 144, 144, 159, 159);
		}
	}
	if (◆戦闘グループ == 85)
	{
		exp = 18;
		FA[3] = 8;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 152, 152, 152);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 152, 152, 152);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 152, 137);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 137, 144);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 137, 152, 152, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 144, 144, 144, 152, 152);
		}
	}
	FA[3] = 10;
	if (◆戦闘グループ == 15)
	{
		exp = 40;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 154, 159);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 155, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 156, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 164, 154);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 157, 148);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 158, 158, 158, 159, 159);
		}
	}
	if (◆戦闘グループ == 14)
	{
		exp = 50;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 158, 158, 158, 159, 159);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 154, 157, 154, 163, 148);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 156, 157, 156, 163, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 155, 155, 155, 154, 154);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 164, 157, 157, 159, 159);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 155, 166, 155, 163, 163);
		}
	}
	if (◆戦闘グループ == 16)
	{
		exp = 50;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 156, 0, 159, 159);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 156, 156, 156, 159, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 156, 154, 156, 159, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 159, 159, 159, 159, 159);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 156, 157, 156, 159, 159);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 156, 166, 156, 159, 159);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[157] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 156, 405, 156, 156, 156);
		}
	}
	if (◆戦闘グループ == 21)
	{
		exp = 45;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 341, 138, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 340, 340);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 340, 144, 340, 342, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 340, 0, 340, 342, 341);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 340, 340, 340, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 340, 341, 340, 342, 342);
		}
	}
	if (◆戦闘グループ == 22)
	{
		exp = 55;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 157, 164, 157, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 154, 157, 154, 148, 148);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 158, 157, 0, 148, 148);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 157, 157, 164, 159, 159);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 157, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 154, 154, 154, 157, 157);
		}
	}
	if (◆戦闘グループ == 23)
	{
		exp = 55;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 157, 164, 157, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 164, 157, 164, 148, 148);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 164, 157, 164, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 164, 164);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 164, 163);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 164, 164, 164, 157, 157);
		}
	}
	if (◆戦闘グループ == 24)
	{
		exp = 50;
		FA[3] = 10;
		if (ra == 1)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 165, 136, 0, 0);
		}
		if (ra == 2)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 136, 136, 165, 157);
		}
		if (ra == 3)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 156, 136, 156, 165, 0);
		}
		if (ra == 4)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 164, 165, 164, 163, 163);
		}
		if (ra == 5)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 165, 136, 155, 0);
		}
		if (ra == 6)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 136, 136, 165, 157);
		}
	}
	if (◆戦闘グループ == 17)
	{
		exp = 60;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 140, 158, 140, 151, 151);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 158, 157, 158, 151, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 158, 158, 158, 151, 151);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 151, 158, 151, 151, 151);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 158, 164, 158, 158, 151);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 140, 158, 140, 173, 173);
		}
	}
	if (◆戦闘グループ == 18)
	{
		exp = 60;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 160, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 160, 160);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 160, 0, 160, 160);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 161, 0, 160, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 160, 160, 160, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 160, 160, 160, 160, 160);
		}
	}
	if (◆戦闘グループ == 19)
	{
		exp = 30;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 258, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 258, 258, 258, 258, 258);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 258, 258);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 258, 152, 258, 138, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 144, 258);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 258, 258, 258, 258, 258);
		}
	}
	if (◆戦闘グループ == 20)
	{
		exp = 80;
		FA[3] = 10;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 259, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 259, 259, 259, 160, 160);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 156, 156, 156, 259, 259);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 259, 152, 259, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 144, 144, 166, 144, 259);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 144, 176, 144, 259, 259);
		}
	}
	if (◆戦闘グループ == 26)
	{
		exp = 130;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 166, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 169, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 166, 173);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 170, 171);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 168, 174, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 169, 169, 155, 171, 170);
		}
	}
	if (◆戦闘グループ == 25)
	{
		exp = 150;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 169, 169, 155, 171, 170);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 166, 166, 168, 170, 170);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 166, 169, 166, 171, 171);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 169, 168, 168, 173, 173);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 173, 0, 155, 170, 171);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 173, 173, 173, 170, 187);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[167] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 4, 169, 415, 169, 0, 0);
		}
	}
	if (◆戦闘グループ == 27)
	{
		exp = 160;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 166, 166, 166, 174, 174);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 171, 158, 171, 174, 174);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 171, 168, 168, 174, 174);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 169, 174, 163, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 173, 169, 0, 174, 163);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 169, 166, 169, 174, 174);
		}
	}
	if (◆戦闘グループ == 28)
	{
		exp = 160;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 166, 175, 166, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 166, 175, 166, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 170, 175, 170, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 168, 175, 170, 173, 173);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 168, 175, 170, 173, 173);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 166, 177, 175, 188, 173);
		}
	}
	if (◆戦闘グループ == 29)
	{
		exp = 120;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 173, 173);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 173, 173);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 170, 170, 170, 178, 188);
		}
	}
	if (◆戦闘グループ == 30)
	{
		exp = 120;
		FA[3] = 15;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 171, 171, 171, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 171, 171);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 170, 0, 171, 171);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 166, 171, 166, 174, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 171, 171, 171, 155, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 171, 171, 171, 155, 170);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[158] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 171, 406, 171, 171, 171);
		}
	}
	if (◆戦闘グループ == 32)
	{
		exp = 220;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 177, 177);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 176, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 178, 0, 140, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 188, 187);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 176, 179);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 176, 176, 176, 179, 179);
		}
	}
	if (◆戦闘グループ == 31)
	{
		exp = 300;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 176, 176, 176, 179, 179);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 177, 0, 177, 177, 177);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 178, 178, 178, 188, 151);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 181, 181, 181, 153, 153);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 180, 187, 180, 0, 188);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 178, 163, 178, 179, 179);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[168] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 181, 416, 181, 0, 0);
		}
	}
	if (◆戦闘グループ == 33)
	{
		exp = 320;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 180, 180, 180, 180, 180);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 180, 180, 180, 180, 180);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 177, 177, 177, 177, 177);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 177, 173, 177, 177, 177);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 173, 173, 177, 177, 177);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 180, 177, 180, 180, 180);
		}
	}
	if (◆戦闘グループ == 34)
	{
		exp = 320;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 170, 187, 170, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 177, 177, 177, 187, 187);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 157, 0, 157, 187, 187);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 187, 182, 187, 188, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 176, 187, 0, 174, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 157, 170, 157, 187, 187);
		}
	}
	if (◆戦闘グループ == 35)
	{
		exp = 330;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 153, 181, 153, 153, 153);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 181, 181, 181, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 181, 181, 181, 153, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 181, 181, 181, 182, 182);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 182, 182, 182, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 182, 182, 182, 0, 0);
		}
	}
	if (◆戦闘グループ == 37)
	{
		exp = 200;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 185, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 184, 0, 184, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 184, 0, 183, 183);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 184, 185);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 185, 0, 185, 183, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 185, 184, 185, 183, 0);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[159] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 183, 407, 183, 183, 183);
		}
	}
	if (◆戦闘グループ == 38)
	{
		exp = 300;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 186, 186);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 186, 186, 186, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 186, 186, 186, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 186, 183, 186, 0, 186);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 180, 186, 180, 186, 186);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 180, 186, 180, 186, 186);
		}
	}
	if (◆戦闘グループ == 36)
	{
		exp = 300;
		FA[3] = 20;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 178, 187, 178, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 178, 187, 178, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 178, 158, 178, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 178, 140, 178, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 178, 168, 178, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 178, 188, 178, 151, 151);
		}
	}
	if (◆戦闘グループ == 40)
	{
		exp = 500;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 189, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 198, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 190, 190);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 191, 191);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 192, 197, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 189, 192, 189, 197, 0);
		}
	}
	if (◆戦闘グループ == 39)
	{
		exp = 600;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 189, 189, 189, 192, 188);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 189, 189, 189, 197, 197);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 192, 198, 192, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 190, 191, 190, 179, 193);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 191, 191, 189, 198, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 191, 192, 191, 193, 198);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[169] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 190, 417, 190, 0, 0);
		}
	}
	if (◆戦闘グループ == 41)
	{
		exp = 620;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 195, 185, 195, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 195, 183, 195, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 192, 0, 195, 195);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 185, 183, 185, 195, 195);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 185, 0, 185, 195, 195);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 185, 0, 185, 195, 195);
		}
	}
	if (◆戦闘グループ == 42)
	{
		exp = 620;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 191, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 191, 191);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 191, 191, 191, 198, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 193, 191, 193, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 182, 182, 182, 198, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 191, 191, 191, 197, 197);
		}
	}
	if (◆戦闘グループ == 43)
	{
		exp = 620;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 178, 178, 178, 153, 153);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 178, 178, 178, 194, 194);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 194, 192, 194, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 178, 158, 178, 198, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 158, 178, 142, 194, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 178, 178, 178, 194, 194);
		}
	}
	if (◆戦闘グループ == 44)
	{
		exp = 620;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 189, 189, 189, 189, 189);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 189, 192, 189, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 189, 155, 189, 197, 197);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 181, 189, 181, 188, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 192, 192, 0, 197, 197);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 189, 155, 189, 192, 192);
		}
	}
	if (◆戦闘グループ == 45)
	{
		exp = 420;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 196, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 196, 196);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 196, 195);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 196, 194);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 191, 196, 191, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 196, 196, 196, 196, 0);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[160] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 196, 408, 196, 196, 196);
		}
	}
	if (◆戦闘グループ == 116)
	{
		exp = 620;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 446, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 196, 446, 196, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 446, 0, 446, 446);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 151, 446, 151, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 195, 446, 195, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 446, 446, 446, 0, 0);
		}
	}
	if (◆戦闘グループ == 118)
	{
		exp = 700;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 146, 146);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 146, 146, 146, 146, 146);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 199, 146, 199, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 199, 146, 199, 150, 150);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 192, 192, 199, 150, 229);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 199, 146, 199, 150, 150);
		}
	}
	if (◆戦闘グループ == 46)
	{
		exp = 800;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 200, 0, 194, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 201, 201);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 203, 198, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 205, 205);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 206, 210);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 206, 210);
		}
	}
	if (◆戦闘グループ == 47)
	{
		exp = 1000;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 200, 200, 200, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 200, 200, 203, 203);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 205, 205, 210, 205, 174);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 202, 0, 202, 210, 206);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 206, 202, 206, 205, 205);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 206, 202, 206, 205, 205);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[170] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 205, 418, 205, 0, 0);
		}
	}
	if (◆戦闘グループ == 48)
	{
		exp = 1200;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 171, 171);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 202, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 200, 203, 200, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 200, 207, 200, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 205, 202, 205, 203, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 202, 206);
		}
	}
	if (◆戦闘グループ == 121)
	{
		exp = 1200;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 171, 171);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 174, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 200, 203, 200, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 200, 207, 200, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 205, 174, 205, 203, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 203, 203, 203, 0, 206);
		}
	}
	if (◆戦闘グループ == 49)
	{
		exp = 1150;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 201, 201, 201, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 201, 178, 201, 194, 194);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 201, 0, 194, 204);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 201, 192, 201, 204, 204);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 206, 198, 188, 204, 201);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 201, 178, 201, 194, 194);
		}
	}
	if (◆戦闘グループ == 102)
	{
		exp = 1200;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 207, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 178, 201);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 200, 0, 194, 204);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 192, 0, 204, 204);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 206, 198, 188, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 198, 178, 198, 194, 194);
		}
	}
	if (◆戦闘グループ == 50)
	{
		exp = 1250;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 207, 207, 207, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 207, 200, 207, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 207, 207, 207, 203, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 207, 202, 207, 186, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 200, 207, 200, 204, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 207, 207, 207, 203, 204);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[161] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 207, 409, 207, 207, 207);
		}
	}
	if (◆戦闘グループ == 86)
	{
		exp = 800;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 200, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 207, 207);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 207, 207);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 207, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 202, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 207, 202, 207, 186, 204);
		}
	}
	if (◆戦闘グループ == 52)
	{
		exp = 1350;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 209, 209, 209, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 209, 208, 209, 202, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 208, 208, 203, 188, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 205, 182, 205, 204, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 209, 202, 209, 208, 174);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 209, 202, 209, 208, 203);
		}
	}
	if (◆戦闘グループ == 51)
	{
		exp = 800;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 206, 313, 206, 310, 311);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 308, 313, 202, 310, 311);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 189, 313, 189, 310, 311);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 180, 313, 180, 310, 311);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 201, 313, 158, 310, 311);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 310, 202, 310, 310, 311);
		}
	}
	if (◆戦闘グループ == 83)
	{
		exp = 1000;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 200, 200, 200, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 200, 200, 194, 194);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 205, 205, 210, 205, 174);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 202, 0, 202, 210, 206);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 206, 202, 206, 198, 198);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 206, 202, 206, 205, 205);
		}
	}
	if (◆戦闘グループ == 113)
	{
		exp = 1000;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 361, 361);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 361, 361);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 361, 361);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 361, 361);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 361, 361);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 361, 0, 361, 361);
		}
	}
	if (◆戦闘グループ == 115)
	{
		exp = 1000;
		FA[3] = 30;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 441, 441);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 442, 442);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 443, 443);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 444, 444);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 445, 445);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 140, 140, 140, 0, 0);
		}
	}
	if (◆戦闘グループ == 53)
	{
		exp = 1500;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 211, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 216, 216);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 210, 214);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 215, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 211, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 211, 215);
		}
	}
	if (◆戦闘グループ == 54)
	{
		exp = 1700;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 211, 211);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 213, 213);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 214, 220, 214, 204, 204);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 215, 0, 215, 173, 173);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 218, 0, 218, 215, 203);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 215, 218, 215, 214, 214);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[171] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 218, 419, 218, 0, 0);
		}
	}
	if (◆戦闘グループ == 61)
	{
		exp = 2000;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 213, 213);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 213, 213);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 153, 220, 153, 215, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 215, 0, 215, 214, 214);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 213, 175);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 213, 220);
		}
	}
	if (◆戦闘グループ == 60)
	{
		exp = 2000;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 212, 343);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 355, 299, 355, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 355, 299, 355, 355, 355);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 299, 355, 355, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 299, 299);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 299, 218, 299, 355, 355);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[162] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 299, 410, 299, 355, 355);
		}
	}
	if (◆戦闘グループ == 56)
	{
		exp = 2200;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 216, 216, 216, 216, 216);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 216, 216, 216, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 216, 216, 216, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 216, 0, 216, 216, 216);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 216, 0, 216, 216, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 216, 0, 216, 216, 0);
		}
	}
	if (◆戦闘グループ == 55)
	{
		exp = 2200;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 211, 211);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 211, 211);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 211, 210);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 218, 215, 218, 173, 173);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 218, 0, 220, 208, 203);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 215, 218, 215, 214, 214);
		}
	}
	if (◆戦闘グループ == 57)
	{
		exp = 1400;
		FA[3] = 25;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 166, 166);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 158, 164, 158, 198, 0);
		}
		if (ra == 3)
		{
			FA[74] = 1;
			ＰＴＢ登録(exp, 136, 136, 136, 165, 157);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 155, 155, 155, 154, 154);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 177, 178, 177, 182, 182);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 186, 186, 186, 184, 184);
		}
	}
	if (◆戦闘グループ == 59)
	{
		exp = 1400;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 177, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 216, 216);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 218, 218);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 200, 218, 200, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 218, 207, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 218, 186, 218, 158, 0);
		}
	}
	if (◆戦闘グループ == 129)
	{
		exp = 1400;
		FA[3] = 35;
		ＰＴＢ登録(1500, 219, 219, 219, 219, 219);
	}
	if (◆戦闘グループ == 58)
	{
		exp = 1700;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 218, 218, 218, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 218, 218, 216, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 218, 201, 201, 194, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 218, 207, 218, 218, 218);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 218, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 218, 218, 218, 208, 208);
		}
	}
	if (◆戦闘グループ == 114)
	{
		exp = 1400;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 362, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 362, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 362, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 362, 362);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 362, 362);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 362, 362);
		}
	}
	if (◆戦闘グループ == 117)
	{
		exp = 1400;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 361, 361, 361, 362, 362);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 440, 361, 440, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 440, 362, 440, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 440, 443, 445, 362, 446);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 361, 361, 361, 443, 443);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 440, 361, 440, 0, 0);
		}
	}
	if (◆戦闘グループ == 62)
	{
		exp = 2500;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 222, 222);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 222, 222);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 227, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 231, 222, 231, 229, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 223, 228, 228, 230, 229);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 223, 222, 231, 229, 229);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[163] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 229, 411, 229, 229, 229);
		}
	}
	if (◆戦闘グループ == 79)
	{
		exp = 1000;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 253, 252, 253, 255, 255);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 253, 252, 253, 255, 255);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 253, 252, 253, 255, 255);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 253, 253, 253, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 255, 255);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 253, 252, 253, 229, 229);
		}
	}
	if (◆戦闘グループ == 63)
	{
		exp = 2800;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 227, 253);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 231, 0, 227, 226, 226);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 222, 222, 228, 230, 229);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 226, 226, 226, 174, 206);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 227, 222, 227, 223, 223);
		}
	}
	if (◆戦闘グループ == 80)
	{
		exp = 2200;
		FA[3] = 35;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 217, 217, 217, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 217, 217, 217, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 217, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 217, 0, 217, 217, 217);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 217, 217);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 217, 0, 217, 217, 0);
		}
	}
	if (◆戦闘グループ == 64)
	{
		exp = 3000;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 223, 223, 223, 226, 226);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 228, 230, 228, 228, 228);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 81)
	{
		exp = 500;
		FA[3] = 25;
		ra = RAND(3);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 140, 140);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 178, 178);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 158, 158);
		}
	}
	if (◆戦闘グループ == 98)
	{
		exp = 2800;
		FA[3] = 40;
		int ▲敵 = 0;
		if (◆ワールド == 3)
		{
			▲敵 = 201;
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, ▲敵, 0, 225, 225);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 225, 225, 225, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 359, 359, 359, ▲敵, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 231, 359, 231, ▲敵, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 359, 0, 359, 231, ▲敵);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 225, 231, 225, 359, 359);
		}
	}
	if (◆戦闘グループ == 99)
	{
		exp = 2900;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 226, 226, 226, 304, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 304, 304, 304, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 304, 217, 304, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 226, 226, 226, 304, 304);
		}
	}
	if (◆戦闘グループ == 100 || ◆戦闘グループ == 78)
	{
		exp = 2900;
		FA[3] = 40;
		ra = RAND(6);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 344, 363, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 363, 364, 363, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 364, 0, 366, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(300, 450, 450, 450, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 367, 450, 363, 365, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 344, 364, 363, 366, 365);
		}
	}
	if (◆戦闘グループ == 101)
	{
		exp = 2800;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 227, 227);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 227, 227);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 227, 227);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 222, 222, 227, 229, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 222, 222, 222, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 227, 227, 227, 223, 223);
		}
	}
	if (◆戦闘グループ == 103)
	{
		exp = 3000;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 223, 223, 223, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 223, 223, 223, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 223, 223);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 214, 214, 214, 223, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 228, 230, 228, 228, 228);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 223, 223, 223, 215, 314);
		}
	}
	if (◆戦闘グループ == 119)
	{
		exp = 3000;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 140, 140);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 228, 228, 228, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 387, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 248, 203);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 214, 140);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 223, 223, 223, 215, 314);
		}
	}
	if (◆戦闘グループ == 130)
	{
		exp = 3000;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 230, 0, 230, 249, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 429, 227);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 230, 222);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 209, 209, 209, 223, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 228, 230, 228, 228, 228);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 210, 210, 210, 230, 230);
		}
	}
	if (◆戦闘グループ == 106)
	{
		exp = 3000;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 434, 434);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 434, 434);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 435, 205, 435, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 435, 0, 435, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 435, 434, 435, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 435, 435, 435, 434, 434);
		}
	}
	if (◆戦闘グループ == 111)
	{
		exp = 3500;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 239, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 239, 218);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 250, 250);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 248, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 250, 248);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 239, 223, 250, 248, 223);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[164] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 250, 412, 250, 0, 0);
		}
	}
	if (◆戦闘グループ == 89)
	{
		exp = 4000;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 239, 225, 239, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 239, 0, 250, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 250, 0, 250, 249, 249);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 248, 239);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 250, 0, 248, 249);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 239, 239, 250, 248, 248);
		}
	}
	if (◆戦闘グループ == 90)
	{
		exp = 4200;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 241, 231, 241, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 241, 250, 241, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 250, 0, 228, 249, 249);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 390, 239, 390, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 229, 250, 229, 390, 390);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 241, 241, 250, 390, 390);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[165] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 390, 413, 390, 0, 0);
		}
	}
	if (◆戦闘グループ == 92)
	{
		exp = 3900;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 234, 234);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 234, 242);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 234, 429);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 429, 220, 429, 249, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 242, 214, 242, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 429, 429, 429, 242, 242);
		}
	}
	if (◆戦闘グループ == 112)
	{
		exp = 3500;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 246, 246);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 246, 246);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 432, 432);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 432, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 246, 0, 249, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 246, 0, 246, 432, 0);
		}
	}
	if (◆戦闘グループ == 104)
	{
		exp = 4500;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 246, 246, 246, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 246, 0, 246, 246, 246);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 432, 432, 432, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 432, 0, 432, 432, 432);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 246, 250, 246, 0, 249);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 246, 246, 246, 432, 432);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[166] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 432, 414, 432, 0, 0);
		}
	}
	if (◆戦闘グループ == 105)
	{
		exp = 4300;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 234, 395, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 234, 245, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 395, 395, 395, 187, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 245, 0, 245, 438, 438);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 395, 438, 230, 249);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 449, 449, 449, 165, 0);
		}
	}
	if (◆戦闘グループ == 107)
	{
		exp = 5000;
		FA[3] = 45;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 215, 439);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 439, 215);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 215, 439, 215, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 215, 215, 439, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 209, 209, 209, 439, 174);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 439, 215, 439, 0, 0);
		}
	}
	if (◆戦闘グループ == 133)
	{
		exp = 5000;
		FA[3] = 45;
		◆奇襲／イベント強制 = 11;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 473, 473, 473, 227, 227);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 227, 473, 227, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 227, 473, 227, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 227, 227, 227, 473, 473);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 473, 473);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 227, 227, 227, 473, 473);
		}
	}
	if (◆戦闘グループ == 66)
	{
		exp = 7000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 398, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 238, 0, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 234, 238);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 402, 249);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 402, 398);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 238, 238);
		}
	}
	if (◆戦闘グループ == 67 || ◆戦闘グループ == 65)
	{
		exp = 8000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 398, 402, 398, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 238, 238, 238, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 234, 238);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 398, 402, 398, 249, 249);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 402, 402);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 238, 238, 238, 398, 398);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[172] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 238, 420, 238, 0, 0);
		}
		if (◆クエスト戦闘回数／ＭＡＰ内 == 2 && FA[173] == 0 && Ｉ有無(322, 0, "") == 0)
		{
			ＰＴＢ登録(exp / 2, 238, 421, 238, 0, 0);
		}
	}
	if (◆戦闘グループ == 68)
	{
		exp = 9000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 393, 398);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 393, 238, 0, 249);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 393, 234, 393, 174, 140);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 251, 251);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 251, 0, 251, 402, 398);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 393, 393, 393, 238, 238);
		}
	}
	if (◆戦闘グループ == 68)
	{
		exp = 9000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 393, 398);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 393, 238, 0, 249);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 393, 234, 393, 174, 140);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 251, 251);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 251, 0, 251, 402, 398);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 393, 393, 393, 238, 238);
		}
	}
	if (◆戦闘グループ == 69)
	{
		exp = 9000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 436, 436);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 435, 436, 435, 434, 249);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 244, 436, 435, 456, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 244, 244);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 398, 244, 251, 456, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 436, 436, 436, 434, 456);
		}
	}
	if (◆戦闘グループ == 123)
	{
		◇戦闘イベント名 = "ハニー砲台";
		exp = 9000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 400, 400, 400, 400, 400);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 400, 400, 400, 400, 400);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 400, 400, 400, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 400, 400, 400, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 400, 400, 400, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 400, 400);
		}
	}
	if (◆戦闘グループ == 108)
	{
		exp = 4500;
		FA[3] = 40;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 425, 425, 425, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 141, 425, 141, 425, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 425, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 141, 425, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 141, 0, 425, 141, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 425, 425, 425, 425, 425);
		}
	}
	if (◆戦闘グループ == 109)
	{
		exp = 8800;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 393, 344, 223, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 393, 344, 210, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 251, 251);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 251, 344, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 208, 344, 402, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 393, 398, 393, 344, 0);
		}
	}
	if (◆戦闘グループ == 124)
	{
		exp = 12000;
		FA[3] = 60;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 240, 456, 240, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 247, 425, 247, 456, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 247, 247, 247, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 244, 244, 240, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 240, 251, 240, 249, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 247, 240, 247, 456, 0);
		}
	}
	if (◆戦闘グループ == 125)
	{
		exp = 11000;
		FA[3] = 60;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 386, 386);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 386, 217, 386, 217, 217);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 390, 391, 390, 438, 438);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 390, 229, 390, 391, 391);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 240, 454, 391, 249, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 247, 386, 386, 456, 391);
		}
	}
	if (◆戦闘グループ == 126)
	{
		exp = 11000;
		FA[3] = 60;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 237, 237);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 237, 237);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 223, 201, 223, 237, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 387, 237);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 387, 237);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 237, 237, 237, 456, 0);
		}
	}
	if (◆戦闘グループ == 127)
	{
		exp = 15000;
		FA[3] = 70;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 233, 233, 233, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 237, 0, 237, 392, 392);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 401, 401, 401, 391, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 235, 235);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 235, 0, 235, 392, 233);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 235, 235, 235, 456, 0);
		}
	}
	if (◆戦闘グループ == 131)
	{
		exp = 13000;
		FA[3] = 70;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 0, 480, 0, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 480, 0, 174, 174);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 480, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(3000, 0, 224, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(3000, 0, 224, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 480, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 128)
	{
		exp = 10000;
		FA[3] = 70;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 448, 448, 448, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 448, 448, 448, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 448, 448, 448, 448, 448);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 458, 458, 458, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 244, 244, 244, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(100, 0, 152, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 94)
	{
		exp = 10000;
		FA[3] = 60;
		if (ra == 5 && Ｉ有無(334, 0, "") != 0)
		{
			ra = 4;
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 339, 240, 339, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 240, 0, 456, 248);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 227, 227, 227, 227, 227);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 158, 237, 238, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 424, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 424, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 95)
	{
		exp = 8000;
		FA[3] = 50;
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 238, 238, 238, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 393, 393);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 238, 398, 238, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 436, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 397, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 96)
	{
		exp = 5000;
		FA[3] = 45;
		if (ra == 5 && Ｉ有無(334, 0, "") != 0)
		{
			ra = 4;
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 241, 241, 241, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 0, 0, 0, 439, 439);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 395, 245, 395, 390, 390);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 424, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 241, 241, 241, 249, 249);
		}
	}
	if (◆戦闘グループ == 97)
	{
		exp = 4500;
		FA[3] = 45;
		if (ra == 5 && Ｉ有無(334, 0, "") != 0)
		{
			ra = 4;
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 239, 239, 239, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 248, 0, 248, 248, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 434, 434, 434, 249, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 225, 225, 225, 0, 0);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 0, 424, 0, 0, 0);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 0, 224, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 70)
	{
		exp = 400;
		FA[3] = 20;
		ＰＴＢ登録(exp, 252, 252, 252, 0, 0);
		if (Ｑ難易度(◆iiq, -1) >= 20)
		{
			exp = 400;
			FA[3] = 20;
			ＰＴＢ登録(exp, 252, 252, 252, 252, 255);
		}
		if (Ｑ難易度(◆iiq, -1) >= 25)
		{
			exp = 800;
			FA[3] = 25;
			ＰＴＢ登録(exp, 252, 253, 252, 252, 255);
		}
		if (Ｑ難易度(◆iiq, -1) >= 30)
		{
			exp = 1000;
			FA[3] = 30;
			ＰＴＢ登録(exp, 253, 252, 253, 255, 0);
		}
		if (Ｑ難易度(◆iiq, -1) >= 35)
		{
			exp = 1000;
			FA[3] = 35;
			ＰＴＢ登録(exp, 253, 252, 253, 255, 255);
		}
		if (Ｑ難易度(◆iiq, -1) >= 40)
		{
			exp = 2000;
			FA[3] = 40;
			ＰＴＢ登録(exp, 253, 254, 253, 0, 256);
		}
		if (Ｑ難易度(◆iiq, -1) >= 45)
		{
			exp = 3000;
			FA[3] = 45;
			ＰＴＢ登録(exp, 253, 254, 253, 257, 256);
		}
	}
	if (◆戦闘グループ == 73)
	{
		exp = 50;
		FA[3] = 0;
		ra = RAND(5);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 261, 266, 261, 271, 271);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 261, 286, 261, 271, 271);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 286, 266, 286, 276, 271);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 266, 261, 266, 281, 281);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 266, 261, 266, 281, 281);
		}
	}
	if (◆戦闘グループ == 74)
	{
		exp = 50;
		FA[3] = 10;
		ra = RAND(5);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 262, 267, 261, 272, 271);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 262, 287, 262, 271, 272);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 286, 267, 287, 277, 271);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 267, 262, 266, 282, 282);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 267, 262, 267, 282, 281);
		}
	}
	if (◆戦闘グループ == 75)
	{
		exp = 300;
		FA[3] = 20;
		ra = RAND(5);
		if (FA[109] == 1)
		{
			ra = RAND(6);
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 263, 268, 262, 273, 272);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 263, 288, 263, 272, 273);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 287, 268, 288, 278, 272);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 268, 263, 267, 283, 283);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 268, 263, 268, 283, 282);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 260, 263, 268, 273, 273);
		}
	}
	if (◆戦闘グループ == 76)
	{
		exp = 1200;
		FA[3] = 30;
		ra = RAND(5);
		if (FA[109] == 1)
		{
			ra = RAND(6);
		}
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 264, 269, 263, 274, 273);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 264, 289, 264, 273, 274);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 288, 269, 289, 279, 273);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 269, 264, 268, 284, 284);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 269, 264, 269, 284, 283);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 269, 264, 269, 356, 283);
		}
	}
	if (◆戦闘グループ == 77)
	{
		exp = 3500;
		FA[3] = 40;
		ra = RAND(5);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 265, 270, 264, 275, 274);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 265, 290, 265, 274, 275);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 289, 270, 290, 280, 274);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 270, 265, 269, 285, 285);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 270, 265, 270, 285, 284);
		}
	}
	if (◆戦闘グループ == 82)
	{
		exp = 800;
		FA[3] = 20;
		ra = RAND(3);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 305, 305, 188, 0, 0);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 305, 305, 153, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 305, 305, 142, 0, 0);
		}
		ＰＴＢ名前変更("Unlucky Laborer", "Unlucky Laborer", "", "", "");
	}
	if (◆戦闘グループ == 91)
	{
		exp = 3500;
		FA[3] = 45;
		ra = RAND(1);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 344, 344, 344, 0, 0);
		}
	}
	if (◆戦闘グループ == 93)
	{
		exp = 3500;
		FA[3] = 45;
		ra = RAND(1);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 135, 135, 0, 0, 0);
		}
	}
	if (◆戦闘グループ == 84)
	{
		exp = 1;
		FA[3] = 100;
		ＰＴＢ登録(exp, 0, 347, 0, 0, 0);
	}
	if (◆戦闘グループ == 110)
	{
		exp = 1;
		FA[3] = 100;
		ＰＴＢ登録(exp, 0, 431, 0, 0, 0);
	}
	if (◆戦闘グループ == 122)
	{
		◇戦闘イベント名 = "幸福きゃん";
		exp = 幸福きゃんきゃんの経験値取得();
		FA[3] = 100;
		ＰＴＢ登録(exp, 0, 143, 0, 0, 0);
	}
	if (◆戦闘グループ == 87)
	{
		◇戦闘イベント名 = "パチル";
		exp = 1;
		FA[3] = 100;
		ＰＴＢ登録(exp, 351, 351, 351, 149, 149);
	}
	if (◆戦闘グループ == 88)
	{
		exp = 1;
		FA[3] = 100;
		ＰＴＢ登録(exp, 357, 357, 357, 0, 0);
	}
	if (◆戦闘グループ == 132)
	{
		exp = 2220;
		ra = RAND(6);
		if (ra == 1)
		{
			ＰＴＢ登録(exp, 389, 389, 389, 223, 223);
		}
		if (ra == 2)
		{
			ＰＴＢ登録(exp, 393, 393, 393, 201, 201);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(exp, 247, 237, 247, 0, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(exp, 180, 180, 180, 223, 223);
		}
		if (ra == 5)
		{
			ＰＴＢ登録(exp, 163, 163, 163, 223, 223);
		}
		if (ra == 6)
		{
			ＰＴＢ登録(exp, 357, 357, 357, 201, 201);
		}
	}
	if (◆戦闘グループ == 134)
	{
		ra = RAND(4);
		if (ra == 1)
		{
			◇戦闘イベント名 = "コインコイン";
			ＰＴＢ登録(100, 472, 472, 472, 472, 472);
		}
		if (ra == 2)
		{
			◇戦闘イベント名 = "コインコイン";
			ＰＴＢ登録(100, 472, 472, 472, 0, 0);
		}
		if (ra == 3)
		{
			ＰＴＢ登録(20000, 142, 240, 142, 464, 0);
		}
		if (ra == 4)
		{
			ＰＴＢ登録(10000, 188, 164, 188, 464, 0);
		}
	}
	if (◆戦闘グループ == 120)
	{
		lint ▲ポスター敵 = 0;
		if (Ｉ有無(322, 0, "") == 0)
		{
			if (FA[155] == 0)
			{
				▲ポスター敵 = 403;
			}
			if (FA[156] == 0)
			{
				▲ポスター敵 = 404;
			}
			if (FA[157] == 0)
			{
				▲ポスター敵 = 405;
			}
			if (FA[158] == 0)
			{
				▲ポスター敵 = 406;
			}
			if (FA[159] == 0)
			{
				▲ポスター敵 = 407;
			}
			if (FA[160] == 0)
			{
				▲ポスター敵 = 408;
			}
			if (FA[161] == 0)
			{
				▲ポスター敵 = 409;
			}
			if (FA[162] == 0)
			{
				▲ポスター敵 = 410;
			}
			if (FA[163] == 0)
			{
				▲ポスター敵 = 411;
			}
			if (FA[164] == 0)
			{
				▲ポスター敵 = 412;
			}
			if (FA[165] == 0)
			{
				▲ポスター敵 = 413;
			}
			if (FA[166] == 0)
			{
				▲ポスター敵 = 414;
			}
			if (FA[167] == 0)
			{
				▲ポスター敵 = 415;
			}
			if (FA[168] == 0)
			{
				▲ポスター敵 = 416;
			}
			if (FA[169] == 0)
			{
				▲ポスター敵 = 417;
			}
			if (FA[170] == 0)
			{
				▲ポスター敵 = 418;
			}
			if (FA[171] == 0)
			{
				▲ポスター敵 = 419;
			}
			if (FA[172] == 0)
			{
				▲ポスター敵 = 420;
			}
			if (FA[173] == 0)
			{
				▲ポスター敵 = 421;
			}
			if (FA[174] == 0)
			{
				▲ポスター敵 = 422;
			}
		}
		exp = 100;
		FA[3] = 10;
		ＰＴＢ登録(exp, 142, ▲ポスター敵, 142, 0, 0);
	}
	if (◆ワールド == 2)
	{
		FA[3] += 2;
	}
	if (◆ワールド == 3)
	{
		FA[3] += 4;
	}
	if (◆ワールド == 4)
	{
		FA[3] += 6;
	}
	if (◆ワールド == 5)
	{
		FA[3] += 8;
	}
	if (◆戦闘背景番号 == 62)
	{
		◆戦闘背景番号 = 7;
	}
	if (ＰＴＢ有無／固有(424, "") != 0)
	{
		◆戦闘背景番号 = 62;
	}
	if (ＰＴＢ有無／固有(459, "") != 0)
	{
		◆戦闘背景番号 = 30;
	}
	return;
}

void ＰＴＢ登録(int exp, int a1, int a2, int a3, int a4, int a5)
{
	◆戦闘ＥＸＰ = exp;
	lint iic = 0;
	lint ▲敵数 = 0;
	lint bb = 0;
	for (iic = 1; iic < 6; iic++)
	{
		PTB[iic] = 0;
		Ｃ初期化(iic);
	}
	if (◇雑魚戦エンカウントフラグ == 1)
	{
		▲敵数 = 0;
		if (a1 != 0)
		{
			▲敵数++;
		}
		if (a2 != 0)
		{
			▲敵数++;
		}
		if (a3 != 0)
		{
			▲敵数++;
		}
		if (a4 != 0)
		{
			▲敵数++;
		}
		if (a5 != 0)
		{
			▲敵数++;
		}
		if (▲敵数 >= 4 && RAND(2) == 1 && FA[74] == 0)
		{
			bb = RAND(5);
			if (bb == 1)
			{
				a1 = 0;
			}
			if (bb == 2)
			{
				a2 = 0;
			}
			if (bb == 3)
			{
				a3 = 0;
			}
			if (bb == 4)
			{
				a4 = 0;
			}
			if (bb == 5)
			{
				a5 = 0;
			}
		}
		int ra = 3;
		lint ▲魔物減らし能力 = ＣＳ有無／ランク別効果／スタメン(iic, 262, 1);
		if (▲魔物減らし能力 != 0 && 確率演算(▲魔物減らし能力) == true)
		{
			ra = 1;
			LOG_TADA("　魔物減らしスキルにより　敵−１　\n");
		}
		int ▲パチル = 0;
		if (RAND(10) == 1)
		{
			▲パチル = 1;
		}
		int ▲ハニー = 0;
		if (ＣＳ有無／スタメン(iic, 536, 0) != 0)
		{
			▲ハニー = 1;
			▲パチル = 0;
		}
		int ▲臨時敵 = 0;
		if (RAND(10) == 1)
		{
			▲臨時敵 = 351;
		}
		if (ＣＳ有無／スタメン(iic, 536, 0) != 0)
		{
			▲臨時敵 = 140;
		}
		if (◆ワールド == 3 && RAND(8) == 1)
		{
			▲臨時敵 = 223;
		}
		if (▲敵数 >= 4 && RAND(ra) == 1 && FA[74] == 0)
		{
			bb = RAND(5);
			if (bb == 1)
			{
				a1 = 0;
				if (▲臨時敵 != 0)
				{
					a1 = ▲臨時敵;
				}
			}
			if (bb == 2)
			{
				a2 = 0;
				if (▲臨時敵 != 0)
				{
					a2 = ▲臨時敵;
				}
			}
			if (bb == 3)
			{
				a3 = 0;
				if (▲臨時敵 != 0)
				{
					a3 = ▲臨時敵;
				}
			}
			if (bb == 4)
			{
				a4 = 0;
				if (▲臨時敵 != 0)
				{
					a4 = ▲臨時敵;
				}
			}
			if (bb == 5)
			{
				a5 = 0;
				if (▲臨時敵 != 0)
				{
					a5 = ▲臨時敵;
				}
			}
		}
	}
	if (a1 != 0)
	{
		PTB[1] = 1;
		Ｃ敵登録(1, a1);
	}
	if (a2 != 0)
	{
		PTB[2] = 2;
		Ｃ敵登録(2, a2);
	}
	if (a3 != 0)
	{
		PTB[3] = 3;
		Ｃ敵登録(3, a3);
	}
	if (a4 != 0)
	{
		PTB[4] = 4;
		Ｃ敵登録(4, a4);
	}
	if (a5 != 0)
	{
		PTB[5] = 5;
		Ｃ敵登録(5, a5);
	}
	◇雑魚戦エンカウントフラグ = 0;
	FA[74] = 0;
	◆戦闘曲 = 51;
	if (クリア確認(67) == 1)
	{
		◆戦闘曲 = 55;
	}
	if (クリア確認(73) == 1)
	{
		◆戦闘曲 = 52;
	}
	if (クリア確認(127) == 1)
	{
		◆戦闘曲 = 60;
	}
	if (ハニー含有率(a1, a2, a3, a4, a5) >= 3)
	{
		◆戦闘曲 = 57;
	}
	if (◆マップ曲 == 8)
	{
		◆戦闘曲 = ◆マップ曲;
	}
	if (◆マップ曲 == 9)
	{
		◆戦闘曲 = ◆マップ曲;
	}
	if (◆マップ曲 == 10)
	{
		◆戦闘曲 = ◆マップ曲;
	}
	if (◆マップ曲 == 6 && (FA[75] == 1 || FA[75] == 2))
	{
		◆戦闘曲 = ◆マップ曲;
	}
	if (◇戦闘イベント名 == "幸福きゃん")
	{
		◆戦闘曲 = 56;
	}
}

void ＰＴＢ名前変更(string a1, string a2, string a3, string a4, string a5)
{
	if (a1 != "")
	{
		Ｃ名前(1, a1);
	}
	if (a2 != "")
	{
		Ｃ名前(2, a2);
	}
	if (a3 != "")
	{
		Ｃ名前(3, a3);
	}
	if (a4 != "")
	{
		Ｃ名前(4, a4);
	}
	if (a5 != "")
	{
		Ｃ名前(5, a5);
	}
}

void ＰＴＢ名前変更準備(string a1, string a2, string a3, string a4, string a5)
{
	◆名前変更フラグ = 1;
	◆名前変更[1] = "";
	◆名前変更[2] = "";
	◆名前変更[3] = "";
	◆名前変更[4] = "";
	◆名前変更[5] = "";
	◆名前変更[1] = a1;
	◆名前変更[2] = a2;
	◆名前変更[3] = a3;
	◆名前変更[4] = a4;
	◆名前変更[5] = a5;
}

void ＰＴＢカスタム登録(string a1, string a2, string a3, string a4, string a5)
{
	◆カスタム名[1] = a1;
	◆カスタム名[2] = a2;
	◆カスタム名[3] = a3;
	◆カスタム名[4] = a4;
	◆カスタム名[5] = a5;
}

int ハニー含有率(int a1, int a2, int a3, int a4, int a5)
{
	int aa = 0;
	aa += ハニー確認(a1);
	aa += ハニー確認(a2);
	aa += ハニー確認(a3);
	aa += ハニー確認(a4);
	aa += ハニー確認(a5);
	return aa;
}

int ハニー確認(int mno)
{
	if (mno == 140 || mno == 158 || mno == 178 || mno == 201 || mno == 223 || mno == 237)
	{
		return 1;
	}
	return 0;
}

void Ｔ戦闘前初期化(int flg)
{
	if (flg == 1)
	{
		◆ボス戦 = 1;
	}
	else
	{
		◆ボス戦 = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n■Ｔ戦闘前初期化()　");
		if (FA[75] == 1)
		{
			LOG_TADA("　エンカウント");
		}
		if (FA[75] == 2)
		{
			LOG_TADA("　配置敵");
		}
		if (FA[75] == 3)
		{
			LOG_TADA("　ボス敵");
		}
		if (FA[75] == 4)
		{
			LOG_TADA("　特定");
		}
		LOG_TADA("　◆ボス戦=" + string(◆ボス戦));
		LOG_TADA("　◆戦闘ランク=" + string(◆戦闘ランク));
		LOG_TADA("\n");
	}
	lint loop = 0;
	lint iic = 0;
	lint aa = 0;
	lint bb = 0;
	lint ii = 0;
	lint ▲ＰＴＡ最大素早さ = 0;
	lint vv = 0;
	◆戦闘ターン = 0;
	◆踏ん張り使用済み = 0;
	◆奇襲 = 0;
	◆戦闘タゲ取り = 0;
	◆戦闘中の入れ替え発生 = 0;
	FA[119] = 0;
	FA[149] = 0;
	FA[326] = 0;
	FA[349] = 0;
	◆ログ宝箱 = "";
	aa = 5;
	if (ＰＴＡ有無／固有(91) != 0)
	{
		aa = 3;
	}
	if (◆奇襲／イベント強制 == 11 || ◆奇襲／イベント強制 == 0 && FA[75] == 1 && ◆クエスト戦闘回数 >= 5 && RAND(aa) == 1)
	{
		aa = 1;
		if (ＰＴＡ職業有無(6) == 1)
		{
			aa = 0;
		}
		if (ＰＴＡ総数() < 5)
		{
			aa = 0;
		}
		if (ＰＴＡ有無／固有(91) != 0 && RAND(2) == 1)
		{
			aa = 1;
		}
		if (aa == 1)
		{
			◆奇襲 = 11;
			FA[339]++;
		}
	}
	for (loop = 1; loop < 6; loop++)
	{
		PTA_STAN[loop] = 0;
		PTB_STAN[loop] = 0;
		PTA_連続回避[loop] = 0;
		PTB_連続回避[loop] = 0;
		PTA_EXP無し[loop] = 0;
		if (PTA[loop] != 0)
		{
			if (Ｃ素早さ(PTA[loop], -1) > ▲ＰＴＡ最大素早さ)
			{
				▲ＰＴＡ最大素早さ = Ｃ素早さ(PTA[loop], -1);
			}
			Ｔ戦闘前初期化／キャラ(PTA[loop], 0);
		}
		if (PTB[loop] != 0)
		{
			Ｔ戦闘前初期化／キャラ(PTB[loop], 0);
		}
	}
	if (ＣＳ有無／スタメン(vv, 583, 1) != 0)
	{
		for (loop = 1; loop < 6; loop++)
		{
			if (PTB[loop] != 0 && RAND(3) == 1 && Ｃボス(PTB[loop], -1) == 0)
			{
				Ｃ状態変化(PTB[loop], 1);
				string ▲文字 = "→Chinu's Killer Tea Party activated.   One enemy has been poisoned.";
				Ｒ８戦闘ログ／追加(▲文字);
				if (FA[342] == 1)
				{
					LOG("　%s\n" % ▲文字);
				}
			}
		}
	}
	PTC[1] = 0;
	◆従魔オーナー番号 = 0;
	◆従魔固有番号 = 0;
	◆従魔アイテム番号 = 0;
	string ▲従魔成長ログ = "";
	int ▲バトルノートの場合 = 0;
	for (loop = 1; loop < 6; loop++)
	{
		iic = PTA[loop];
		if (iic != 0)
		{
			if (Ｉ種類詳細(Ｃ持ち物(iic, -1), -1) == 20 && ＣＳ有無(iic, 321, 0) != 0)
			{
				int ▲知識ランク = ＣＳ有無／ランク(iic, 321, 0);
				int ▲従魔番号 = Ｉ効果(Ｃ持ち物(iic, -1), 1, -1);
				int ▲従魔クラス = Ｉ効果(Ｃ持ち物(iic, -1), 2, -1);
				int ▲従魔レベル = Ｉ効果(Ｃ持ち物(iic, -1), 3, -1);
				int ▲使役成功 = 0;
				int ▲確率 = 0;
				if (▲従魔クラス == 1)
				{
					▲確率 = 100;
				}
				if (▲従魔クラス == 2)
				{
					if (▲知識ランク == 1)
					{
						▲確率 = 50;
					}
					if (▲知識ランク == 2)
					{
						▲確率 = 80;
					}
					if (▲知識ランク == 3)
					{
						▲確率 = 100;
					}
					if (▲知識ランク == 4)
					{
						▲確率 = 100;
					}
				}
				if (▲従魔クラス == 3)
				{
					if (▲知識ランク == 1)
					{
						▲確率 = 20;
					}
					if (▲知識ランク == 2)
					{
						▲確率 = 40;
					}
					if (▲知識ランク == 3)
					{
						▲確率 = 65;
					}
					if (▲知識ランク == 4)
					{
						▲確率 = 90;
					}
				}
				if (▲従魔クラス == 4)
				{
					if (▲知識ランク == 1)
					{
						▲確率 = 0;
					}
					if (▲知識ランク == 2)
					{
						▲確率 = 10;
					}
					if (▲知識ランク == 3)
					{
						▲確率 = 40;
					}
					if (▲知識ランク == 4)
					{
						▲確率 = 60;
					}
				}
				if (ＣＳ有無(iic, 493, 0) != 0)
				{
					▲確率 += 5;
				}
				if (ＣＳ有無(iic, 494, 0) != 0)
				{
					▲確率 += 5;
				}
				if (◆従魔固有番号 != 0)
				{
					▲確率 = 0;
				}
				if (確率演算(▲確率) == true)
				{
					▲使役成功 = 1;
				}
				LOG_TADA("従魔チェック　" + Ｃ名前(iic, "") + "\n");
				if (▲使役成功 == 1 && ◆従魔固有番号 == 0)
				{
					◆従魔オーナー番号 = iic;
					◆従魔固有番号 = 10;
					◆従魔アイテム番号 = ＩＣＧ番号(Ｃ持ち物(iic, -1), -1);
					PTC[1] = 10;
					▲従魔成長ログ = "\n";
					int ra = RAND(10);
					if (▲従魔クラス == 3)
					{
						ra = RAND(5);
					}
					if (▲従魔クラス == 4)
					{
						ra = RAND(2);
					}
					if (ＣＳ有無(iic, 492, 0) != 0)
					{
						ra += 2;
					}
					if (◆２倍モード == 1)
					{
						ra *= 2;
					}
					▲従魔成長ログ = "成長率" + string2(ra, 0) + "ＵＰ\n";
					if (▲従魔レベル >= 1000 && ＣＬＶ(◆従魔オーナー番号, -1) < 30)
					{
						ra = 0;
						▲従魔成長ログ = "成長無し（オーナーＬＶ３０以下）\n";
					}
					if (▲従魔レベル >= 3000 && ＣＬＶ(◆従魔オーナー番号, -1) < 50)
					{
						ra = 0;
						▲従魔成長ログ = "成長無し（オーナーＬＶ５０以下）\n";
					}
					if (▲従魔レベル == 5000)
					{
						ra = 0;
						▲従魔成長ログ = "成長限界（５０００）\n";
					}
					▲従魔レベル += ra;
					if (▲従魔レベル > 5000)
					{
						▲従魔レベル = 5000;
					}
					Ｉ効果(Ｃ持ち物(iic, -1), 3, ▲従魔レベル);
					Ｉ情報(Ｃ持ち物(iic, -1), "自動生成");
					int ▲従魔倍率 = 100 + ▲従魔レベル / 10;
					if (▲従魔倍率 < 100)
					{
						▲従魔倍率 = 100;
					}
					if (▲従魔倍率 > 600)
					{
						▲従魔倍率 = 600;
					}
					int iic7 = 10;
					Ｃ敵登録(iic7, Ｉ効果(Ｃ持ち物(iic, -1), 1, -1));
					if (▲従魔倍率 > 100)
					{
						LOG_TADA("従魔　元攻撃力＝" + string(Ｃ攻撃力(iic7, -1)) + "\n");
						Ｃ攻撃力(iic7, 倍率計算関数(Ｃ攻撃力(iic7, -1), ▲従魔倍率));
						Ｃ魔法力(iic7, 倍率計算関数(Ｃ魔法力(iic7, -1), ▲従魔倍率));
						LOG_TADA("従魔　後攻撃力＝" + string(Ｃ攻撃力(iic7, -1)) + "\n");
					}
					if (▲ＰＴＡ最大素早さ <= Ｃ素早さ(iic7, -1))
					{
						Ｃ素早さ(iic7, ▲ＰＴＡ最大素早さ);
					}
					string ▲文字 = "→" + Ｃ短縮名前(◆従魔オーナー番号, "") + " called " + Ｃ短縮名前(10, "") + " ";
					Ｒ８戦闘ログ／追加(▲文字);
					LOG("　%s\n" % ▲文字);
					LOG("   %s ability enhancement: %s% (LV: %s) %s" % Ｃ名前(10, "") % string3(▲従魔倍率) % string3(▲従魔レベル) % ▲従魔成長ログ);
					if (▲従魔番号 == 129)
					{
						▲バトルノートの場合 = ▲従魔レベル;
					}
				}
				if (▲使役成功 == 0)
				{
					LOG("     %s failed to summon familiar (Success rate: %s%)\n" % Ｃ短縮名前(iic, "") % string3(▲確率));
				}
			}
		}
	}
	lint ▲臨時オーナー = ＰＴＡ臨時オーナー設定();
	if (◆従魔固有番号 == 0 && ◆クエストパーティ編成禁止 != 1 && ▲臨時オーナー != 0)
	{
		int ii = 0;
		LOG_TADA("従魔のボーナス出しチェック\n");
		for (ii = 1; ii < 3001; ++ii)
		{
			int ▲従魔クラス = Ｉ効果(ii, 2, -1);
			aa = 200;
			if (▲従魔クラス == 2)
			{
				aa = 300;
			}
			if (▲従魔クラス == 3)
			{
				aa = 600;
			}
			if (▲従魔クラス == 4)
			{
				aa = 1000;
			}
			if (Ｉ種類詳細(ii, -1) == 20)
			{
				LOG_TADA("　従魔チェック＝" + string(ii) + "　経験値" + string(Ｉ効果(ii, 3, -1)) + "＞" + string(aa) + "\n");
			}
			if (Ｉ存在(ii, -1) == 7 && Ｉ種類詳細(ii, -1) == 20 && Ｉ効果(ii, 3, -1) >= aa && RAND(50) == 1)
			{
				LOG_TADA("　登録された　従魔アイテム番号＝" + string(ii) + "\n");
				LOG_TADA("　説明＝" + Ｉ情報(ii, "") + "\n");
				PTC[1] = 10;
				◆従魔固有番号 = 10;
				◆従魔アイテム番号 = ＩＣＧ番号(ii, -1);
				◆従魔オーナー番号 = ▲臨時オーナー;
				int ▲従魔番号 = Ｉ効果(ii, 1, -1);
				int ▲従魔レベル = Ｉ効果(ii, 3, -1);
				int ▲従魔倍率 = 100 + ▲従魔レベル / 10;
				if (▲従魔倍率 < 100)
				{
					▲従魔倍率 = 100;
				}
				if (▲従魔倍率 > 600)
				{
					▲従魔倍率 = 600;
				}
				int iic7 = 10;
				Ｃ敵登録(iic7, Ｉ効果(ii, 1, -1));
				if (▲従魔倍率 > 100)
				{
					Ｃ攻撃力(iic7, 倍率計算関数(Ｃ攻撃力(iic7, -1), ▲従魔倍率));
					Ｃ魔法力(iic7, 倍率計算関数(Ｃ魔法力(iic7, -1), ▲従魔倍率));
				}
				if (▲ＰＴＡ最大素早さ <= Ｃ素早さ(iic7, -1))
				{
					Ｃ素早さ(iic7, ▲ＰＴＡ最大素早さ);
				}
				string ▲文字 = "→" + Ｃ短縮名前(10, "") + " jumped in (beside " + Ｃ短縮名前(◆従魔オーナー番号, "") + ")";
				Ｒ８戦闘ログ／追加(▲文字);
				LOG("　%s\n" % ▲文字);
				LOG("   %s ability enhancement: %s% (LV: %s)\n" % Ｃ名前(10, "") % string3(▲従魔倍率) % string3(▲従魔レベル));
				LOG("   ※Familiars with a growth rate over a certain level will enter battle with a 1/50 chance\n");
				LOG("   ※Weak (200+), Normal (300+), Strong (600+), Amazing (1,000+)\n");
				if (▲従魔番号 == 129)
				{
					▲バトルノートの場合 = ▲従魔レベル;
				}
				break;
			}
		}
	}
	if (▲バトルノートの場合 != 0)
	{
		aa = ▲バトルノートの場合 / 500;
		if (aa > 10)
		{
			aa = 10;
		}
		if (aa != 0)
		{
			LOG("     Tactician starting buffs: 0-%s\n" % string3(aa));
			aa = RAND(aa);
			for (loop = 1; loop < aa + 1; loop++)
			{
				int no = RAND(5);
				int ra = RAND(2);
				if (PTA[no] != 0)
				{
					if (ra == 1)
					{
						Ｃ攻撃付与(PTA[no], 1);
					}
					if (ra == 2)
					{
						Ｃ防御付与(PTA[no], 1);
					}
				}
			}
		}
	}
	◆戦闘行動回数 = ゆらぎ関数((ＰＴＡ総数() + ＰＴＢ総数("")) * 2, 30);
	int ▲最低保障数 = ＰＴＡ総数();
	if (▲最低保障数 < 3)
	{
		▲最低保障数 = 3;
	}
	if (◆戦闘グループ == 84)
	{
		◆戦闘行動回数 += 5;
	}
	if (◆戦闘グループ == 87)
	{
		◆戦闘行動回数 = 3;
		if (RAND(2) == 1)
		{
			◆奇襲 = 11;
		}
	}
	if (◆戦闘グループ == 88)
	{
		◆戦闘行動回数 += 10;
	}
	aa = ＣＳ有無／ランク別効果／スタメン(iic, 260, 1);
	◆戦闘行動回数 += aa;
	if (aa != 0)
	{
		LOG_TADA("　長期戦スキルにより　戦闘回数＋" + string(aa) + "\n");
	}
	aa = ＣＳ有無／ランク別効果／スタメン(iic, 261, 1);
	◆戦闘行動回数 -= aa;
	if (aa != 0)
	{
		LOG_TADA("　短期戦スキルにより　戦闘回数−" + string(aa) + "\n");
	}
	if (◆奇襲 == 11)
	{
		◆戦闘行動回数 += ＰＴＢ総数("");
	}
	if (◆戦闘ランク == 1)
	{
		◆戦闘行動回数 -= RAND(6);
	}
	if (◆戦闘行動回数 < ▲最低保障数)
	{
		◆戦闘行動回数 = ▲最低保障数;
	}
	if (◆戦闘行動回数／固定 != 0)
	{
		◆戦闘行動回数 = ◆戦闘行動回数／固定;
	}
	if (◆ボス戦 == 1)
	{
		◆戦闘行動回数 = 999;
	}
	◆戦闘行動回数／固定 = 0;
	◆逃げる確率 = 20;
	aa = ＣＳ有無／ランク別効果／スタメン(iic, 268, 0);
	if (aa != 0 && ◆逃げる確率 < aa)
	{
		◆逃げる確率 = aa;
	}
	if (◆ボス戦 == 1)
	{
		◆逃げる確率 = 0;
	}
	if (◇戦闘イベント名 == "ストーン・Ｇ")
	{
		◆逃げる確率 = 0;
	}
	◆戦闘金持ち = 0;
	◆カロリア硬質化中 = 0;
	◆パチルに取られた金 = 0;
	if (◆iiq == 135)
	{
		◆クエストパーティ編成禁止 = 1;
	}
	if (FA[143] == 1)
	{
		string ▲文字 = "Warning: Magic cannot be used here (Goblin effect).";
		Ｒ８戦闘ログ／追加(▲文字);
		LOG("　%s\n" % ▲文字);
	}
	if (FA[230] == 1)
	{
		string ▲文字 = "Warning: Physical attacks cannot be used here (Troll effect).";
		Ｒ８戦闘ログ／追加(▲文字);
		LOG("　%s\n" % ▲文字);
	}
	LOG_TADA("＞戦闘開始\n");
	for (ii = 1; ii < 6; ii++)
	{
		iic = PTB[ii];
		if (iic != 0)
		{
			LOG_TADA("　　　敵：" + 固定文字列(Ｃ名前(iic, ""), 9) + "　ＨＰ：" + stringD(Ｃ体力(iic, -1), 6) + "　");
			aa = Ｃ攻撃力(iic, -1);
			if (Ｃ攻撃力(iic, -1) < Ｃ魔法力(iic, -1))
			{
				aa = Ｃ魔法力(iic, -1);
			}
			bb = Ｃ防御力(iic, -1);
			if (Ｃ防御力(iic, -1) < Ｃ魔抵力(iic, -1))
			{
				bb = Ｃ魔抵力(iic, -1);
			}
			LOG_TADA("　攻：" + stringD(aa, 6) + "　防：" + stringD(bb, 4) + "　早：" + stringD(Ｃ素早さ(iic, -1), 2) + "\n");
		}
	}
}

void Ｔ戦闘前初期化／キャラ(lint iic, lint fg)
{
	lint aa = 0;
	lint bb = 0;
	lint loop = 0;
	lint ra = 0;
	lint ra2 = 0;
	lint no = 0;
	lint vv = 0;
	lint iics = 0;
	Ｃ状態変化(iic, 0);
	Ｃ守護率(iic, 0);
	Ｃ隠密率(iic, 0);
	Ｃ狂戦士(iic, 0);
	Ｃ全体加護(iic, 0);
	Ｃバリア(iic, 0);
	Ｃ溜め(iic, 0);
	ＣＳ使用禁止切り替え(iic, 1);
	if (Ｃ番号(iic, -1) == 65)
	{
		◆クエストチート = 1;
	}
	for (loop = 1; loop < 20; loop++)
	{
		ＣＳ戦闘使用済み(iic, loop, 0);
	}
	if (Ｃ番号(iic, -1) == 12)
	{
		iics = ＣＳ有無(iic, 453, 0);
		if (iics != 0 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 125)
		{
			ＣＳ使用回数(iic, iics, 0);
		}
	}
	if (Ｃ番号(iic, -1) == 93)
	{
		iics = ＣＳ有無(iic, 459, 0);
		if (iics != 0 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 131)
		{
			ＣＳ使用回数(iic, iics, 0);
		}
	}
	if (Ｃ番号(iic, -1) == 55)
	{
		iics = ＣＳ有無(iic, 448, 0);
		if (iics != 0 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 69)
		{
			ＣＳ使用回数(iic, iics, 0);
		}
	}
	if (Ｃ番号(iic, -1) == 29)
	{
		iics = ＣＳ有無(iic, 518, 0);
		if (iics != 0 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 171)
		{
			ＣＳ使用回数(iic, iics, 0);
		}
	}
	if (Ｃ番号(iic, -1) == 30)
	{
		iics = ＣＳ有無(iic, 594, 0);
		if (iics != 0 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 170 && Ｉ固有番号(Ｃ武器(iic, -1), -1) != 319)
		{
			ＣＳ使用回数(iic, iics, 0);
		}
	}
	if (ＣＳ有無(iic, 361, 0) != 0 && ＰＴＡ有無／固有(22) == 0)
	{
		int iic鈴女 = Ｃ番号取得(22);
		if (iic鈴女 != 0)
		{
			Ｃ再計算(iic);
			Ｃ攻撃力(iic, Ｃ攻撃力(iic, -1) + Ｃ攻撃力(iic鈴女, -1) / 4);
			Ｃ戦闘後再計算(iic, 1);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " is being powered up by Suzume's ghost possession.";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
	}
	if (ＣＳ有無(iic, 372, 0) != 0)
	{
		Ｃ状態変化(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " is poisoned by cough-cough disease.";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無(iic, 572, 0) != 0 && ＰＴＡ条件確認("少女が居る") == 1)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ防御付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Something Intrinsic activated.  ▲Attack/Magic  ▲Defense/Resistance";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無(iic, 573, 0) != 0)
	{
		if (Ｃかっこよさ(iic) >= 5)
		{
			Ｃ攻撃付与(iic, 1);
			Ｃ防御付与(iic, 1);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Star activated.  ▲Attack/Magic  ▲Defense/Resistance";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
		else
		{
			Ｃ攻撃付与(iic, 2);
			Ｃ防御付与(iic, 2);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Star reverse activated.  ▼Attack/Magic  ▼Defense/Resistance";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
	}
	if (ＣＳ有無(iic, 575, 0) != 0 && Ｃ防具(iic, -1) == 0)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ防御付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Nudist activated.  ▲Attack/Magic  ▲Defense/Resistance";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無(iic, 576, 0) != 0)
	{
		if (◆クエスト戦闘回数 >= 20)
		{
			Ｃ攻撃付与(iic, 1);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Performer activated.  ▲Attack/Magic";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
		else
		{
			Ｃ攻撃付与(iic, 2);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Performer reverse activated.  ▼Attack/Magic";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
	}
	if (ＣＳ有無(iic, 577, 0) != 0 && ◆金 < 10000)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ防御付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " Weed-like Tenacity activated.  ▲Attack/Magic  ▲Defense/Resistance";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (fg == 1)
	{
		return;
	}
	if (ＣＳ有無(iic, 521, 0) != 0 && ＰＴＡ有無／固有(59) != 0)
	{
		Ｃ攻撃付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " With Prima activated.  ▲Attack/Magic";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無(iic, 520, 0) != 0 && ＰＴＡ有無／固有(31) != 0)
	{
		Ｃ状態変化(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " With Megadeth activated.  Poison status";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無(iic, 308, 0) != 0 && ＰＴＡ有無／固有(4) != 0)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ体力(iic, Ｃ体力最大(iic, -1));
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " With Kenshin activated.  ▲Attack/Magic  Full HP recovery";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	aa = ＣＳ有無／ランク別効果(iic, 249, 0);
	bb = ＣＳ有無／ランク別効果(iic, 497, 0);
	if (bb > aa)
	{
		aa = bb;
	}
	if (aa != 0)
	{
		Ｃ守護率(iic, aa);
	}
	if (Ｃ職業(iic, -1) == 4)
	{
		aa = ＣＳ有無／ランク別効果(iic, 250, 0);
		if (確率演算(aa) == true && FA[143] == 0)
		{
			Ｃバリア(iic, 1);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " deployed a barrier.";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
	}
	if (Ｃ職業(iic, -1) == 5)
	{
		aa = ＣＳ有無／ランク別効果(iic, 216, 0);
		if (確率演算(aa) == true)
		{
			◆全体加護変化あり = 1;
			Ｃ全体加護(iic, 1);
			string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " deployed Full Party Protection.";
			Ｒ８戦闘ログ／追加(▲文字);
			if (FA[342] == 1)
			{
				LOG("　%s\n" % ▲文字);
			}
		}
	}
	if (ＣＳ有無(iic, 307, 0) != 0)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ防御付与(iic, 1);
	}
	if (ＰＴＢ有無／固有(456, "") != 0 && iic < 6)
	{
		Ｃ攻撃付与(iic, 1);
		Ｃ防御付与(iic, 1);
	}
	if (ＣＳ有無／スタメン(vv, 527, 0) != 0 && PTA[2] == iic)
	{
		Ｃ攻撃付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " received support from Wichita.  ▲Attack/Magic";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無／スタメン(vv, 528, 0) != 0 && PTA[2] == iic)
	{
		Ｃ防御付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " received support from Wichita.  ▲Defense/Resistance";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	if (ＣＳ有無／スタメン(vv, 529, 0) != 0 && Ｃ性別(iic, -1) == 1)
	{
		Ｃ攻撃付与(iic, 1);
		string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " was exposed to Rizna's pheromones.  ▲Attack/Magic";
		Ｒ８戦闘ログ／追加(▲文字);
		if (FA[342] == 1)
		{
			LOG("　%s\n" % ▲文字);
		}
	}
	aa = ＣＳ有無／ランク別効果(iic, 323, 0);
	if (aa != 0)
	{
		LOG_TADA("　軍師の能力で初期付与　最大" + string(aa) + "個\n");
		for (loop = 1; loop < aa + 1; loop++)
		{
			no = RAND(5);
			if (PTA[no] != 0)
			{
				ra = RAND(2);
				if (ra == 1)
				{
					Ｃ攻撃付与(PTA[no], 1);
					string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " gave battle orders to " + Ｃ名前(PTA[no], "") + " (▲Attack/Magic)";
					Ｒ８戦闘ログ／追加(▲文字);
					if (FA[342] == 1)
					{
						LOG("　%s\n" % ▲文字);
					}
				}
				if (ra == 2)
				{
					Ｃ防御付与(PTA[no], 1);
					string ▲文字 = "→" + Ｃ短縮名前(iic, "") + " gave battle orders to " + Ｃ名前(PTA[no], "") + " (▲Defense/Resistance)";
					Ｒ８戦闘ログ／追加(▲文字);
					if (FA[342] == 1)
					{
						LOG("　%s\n" % ▲文字);
					}
				}
			}
		}
	}
	if (ＣＳ有無(iic, 290, 0) != 0)
	{
		if (◆ＭＡＰ基礎型 == 2 || ◆ＭＡＰ基礎型 == 10 || ◆ＭＡＰ基礎型 == 12)
		{
			if (RAND(2) == 1)
			{
				Ｃ攻撃付与(iic, 1);
				Ｃ防御付与(iic, 1);
				string ▲文字 = "→" + Ｃ短縮名前(iic, "") + "'s position improved due to favorable terrain. (▲Attack/Magic, ▲Defense/Resistance)";
				Ｒ８戦闘ログ／追加(▲文字);
				if (FA[342] == 1)
				{
					LOG("　%s\n" % ▲文字);
				}
			}
		}
		if (◆ＭＡＰ基礎型 == 3 || ◆ＭＡＰ基礎型 == 5 || ◆ＭＡＰ基礎型 == 11)
		{
			if (RAND(2) == 1)
			{
				Ｃ攻撃付与(iic, 2);
				Ｃ防御付与(iic, 2);
				string ▲文字 = "→" + Ｃ短縮名前(iic, "") + "'s position worsened due to unfavorable terrain. (▼Attack/Magic, ▼Defense/Resistance)";
				Ｒ８戦闘ログ／追加(▲文字);
				if (FA[342] == 1)
				{
					LOG("　%s\n" % ▲文字);
				}
			}
		}
	}
	if (◆奇襲／イベント強制 == 1 || ◆奇襲 == 0 && ◆ボス戦 == 0 && ＣＳ有無／ランク別効果(iic, 253, 0) >= RAND(100))
	{
		◆奇襲 = 1;
		FA[338]++;
		LOG_TADA("　奇襲　発動 " + string(ＣＳ有無／ランク別効果(iic, 253, 0)) + "％\n");
	}
	if (◆奇襲／イベント強制 == 2 || ◆奇襲 == 0 && ◆ボス戦 == 0 && ＣＳ有無／ランク別効果(iic, 252, 0) >= RAND(100))
	{
		◆奇襲 = 2;
		LOG_TADA("　先制攻撃　発動　" + string(ＣＳ有無／ランク別効果(iic, 252, 0)) + "％　\n");
		FA[73] = iic;
	}
	if (Ｃ番号(iic, -1) == 23 && Ｉ固有番号(Ｃ武器(iic, -1), -1) == 178 && RAND(2) == 1)
	{
		Ｃ隠密率(iic, 150);
	}
	if (◆iiq == 187)
	{
		恋人仙人／スキル禁止処理();
	}
	◆奇襲／イベント強制 = 0;
}

int ＰＴＡ臨時オーナー設定()
{
	array@int AAX[11];
	int loop = 0;
	int max = 0;
	int aa = 0;
	int iic = 0;
	for (loop = 1; loop < 6; ++loop)
	{
		if (PTA[loop] != 0 && Ｃ状態変化(PTA[loop], -1) != 3)
		{
			iic = PTA[loop];
			aa = 0;
			if (Ｃ職業(iic, -1) == 1 && ＣＳ有無(iic, 273, 0) != 0)
			{
				aa = 1;
			}
			if (Ｃ職業(iic, -1) == 2)
			{
				aa = 1;
			}
			if (Ｃ職業(iic, -1) == 6)
			{
				aa = 1;
			}
			if (Ｃ職業(iic, -1) == 4 && ＣＳ有無(iic, 250, 0) != 0)
			{
				aa = 1;
			}
			if (Ｃ職業(iic, -1) == 5 && ＣＳ有無(iic, 216, 0) != 0)
			{
				aa = 1;
			}
			if (aa == 0)
			{
				++max;
				AAX[max] = iic;
			}
		}
	}
	if (max == 0)
	{
		return 0;
	}
	return AAX[RAND(max)];
}

void 戦闘後処理(lint re)
{
	LOG_TADA("\n■戦闘後処理（" + 戦闘結果文字列(re) + "）\n");
	lint loop = 0;
	lint aa = 0;
	lint bb = 0;
	lint cc = 0;
	lint iic = 0;
	lint ▲敵生き残り数 = 0;
	lint ▲ここでアイテム取得可能 = 0;
	◆雑魚戦で倒した敵の数 = 0;
	◆奇襲 = 0;
	◆奇襲／イベント強制 = 0;
	▲ここでアイテム取得可能 = 1;
	if (Ｉクエスト倉庫は満杯ですか？() == 1)
	{
		▲ここでアイテム取得可能 = 0;
	}
	if (◆戦闘後アイテム取得 != 0)
	{
		▲ここでアイテム取得可能 = 0;
	}
	lint ▲戦闘後回復率 = ＣＳ有無／ランク別効果／スタメン(iic, 272, 0);
	for (loop = 1; loop < 6; loop++)
	{
		iic = PTA[loop];
		if (Ｃ戦闘後再計算(iic, -1) == 1)
		{
			Ｃ再計算(iic);
			Ｃ戦闘後再計算(iic, 0);
		}
		if (iic != 0 && Ｃ状態変化(iic, -1) == 3)
		{
			ＰＴＡ解除(iic);
			FA[36]++;
			FA[110]++;
		}
		Ｃ状態変化(iic, 0);
		if (▲戦闘後回復率 != 0)
		{
			aa = 倍率計算関数(Ｃ体力最大(iic, -1), ▲戦闘後回復率);
			Ｃ体力(iic, Ｃ体力(iic, -1) + aa);
		}
		if (ＣＩ防具機能の有無と効果(iic, 35) != 0)
		{
			Ｃ体力(iic, Ｃ体力最大(iic, -1));
		}
		if (ＣＩ防具機能の有無と効果(iic, 36) != 0)
		{
			Ｃ体力(iic, Ｃ体力(iic, -1) + Ｃ体力最大(iic, -1) / 4);
		}
		if (Ｉ固有番号(Ｃ防具(iic, -1), -1) == 54)
		{
			Ｃ体力(iic, Ｃ体力(iic, -1) - Ｃ体力最大(iic, -1) / 5);
			if (Ｃ体力(iic, -1) == 0)
			{
				Ｃ体力(iic, 1);
			}
		}
		if (Ｃ番号(iic, -1) == 27)
		{
			Ｃ補給／基本スキル(iic);
			Ｃ体力(iic, Ｃ体力最大(iic, -1));
		}
		if (◆iiq == 120)
		{
			Ｃ補給／基本スキル(iic);
		}
	}
	for (iic = 20; iic < 201; iic++)
	{
		Ｃ攻撃付与(iic, 0);
		Ｃ防御付与(iic, 0);
	}
	for (loop = 1; loop < 6; loop++)
	{
		if (PTB[loop] != 0)
		{
			if (Ｃ状態変化(PTB[loop], -1) == 3)
			{
				◆雑魚戦で倒した敵の数++;
				if (Ｃ番号(PTB[loop], -1) == 344)
				{
					FA[254]++;
				}
			}
			if (Ｃ状態変化(PTB[loop], -1) != 3)
			{
				▲敵生き残り数++;
			}
			if (Ｃ弱点把握(PTB[loop], -1) == 1)
			{
				■Ｍ／弱点把握(Ｃ番号(PTB[loop], -1), 1, "");
			}
			if (Ｃ番号(PTB[loop], -1) == 158)
			{
				MM[23] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 143)
			{
				MM[24] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 181)
			{
				MM[26] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 185)
			{
				MM[27] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 186)
			{
				MM[28] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 196)
			{
				MM[30] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 163)
			{
				MM[36] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 168)
			{
				MM[25] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 425)
			{
				MM[81] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 249)
			{
				MM[82] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 241)
			{
				MM[83] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 244)
			{
				MM[84] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 393)
			{
				MM[85] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 247)
			{
				MM[71] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 369)
			{
				MM[86] = 1;
			}
			if (Ｃ番号(PTB[loop], -1) == 451)
			{
				MM[87] = 1;
			}
			if (re == 1 && ▲ここでアイテム取得可能 == 1)
			{
				int ▲カンバン拾い = 0;
				if (Ｃ番号(PTB[loop], -1) == 403)
				{
					▲カンバン拾い = 1;
				}
				if (Ｃ番号(PTB[loop], -1) == 404)
				{
					▲カンバン拾い = 2;
				}
				if (Ｃ番号(PTB[loop], -1) == 405)
				{
					▲カンバン拾い = 3;
				}
				if (Ｃ番号(PTB[loop], -1) == 406)
				{
					▲カンバン拾い = 4;
				}
				if (Ｃ番号(PTB[loop], -1) == 407)
				{
					▲カンバン拾い = 5;
				}
				if (Ｃ番号(PTB[loop], -1) == 408)
				{
					▲カンバン拾い = 6;
				}
				if (Ｃ番号(PTB[loop], -1) == 409)
				{
					▲カンバン拾い = 7;
				}
				if (Ｃ番号(PTB[loop], -1) == 410)
				{
					▲カンバン拾い = 8;
				}
				if (Ｃ番号(PTB[loop], -1) == 411)
				{
					▲カンバン拾い = 9;
				}
				if (Ｃ番号(PTB[loop], -1) == 412)
				{
					▲カンバン拾い = 10;
				}
				if (Ｃ番号(PTB[loop], -1) == 413)
				{
					▲カンバン拾い = 11;
				}
				if (Ｃ番号(PTB[loop], -1) == 414)
				{
					▲カンバン拾い = 12;
				}
				if (Ｃ番号(PTB[loop], -1) == 415)
				{
					▲カンバン拾い = 13;
				}
				if (Ｃ番号(PTB[loop], -1) == 416)
				{
					▲カンバン拾い = 14;
				}
				if (Ｃ番号(PTB[loop], -1) == 417)
				{
					▲カンバン拾い = 15;
				}
				if (Ｃ番号(PTB[loop], -1) == 418)
				{
					▲カンバン拾い = 16;
				}
				if (Ｃ番号(PTB[loop], -1) == 419)
				{
					▲カンバン拾い = 17;
				}
				if (Ｃ番号(PTB[loop], -1) == 420)
				{
					▲カンバン拾い = 18;
				}
				if (Ｃ番号(PTB[loop], -1) == 421)
				{
					▲カンバン拾い = 19;
				}
				if (Ｃ番号(PTB[loop], -1) == 422)
				{
					▲カンバン拾い = 20;
				}
				if (▲カンバン拾い != 0)
				{
					◆戦闘後アイテム取得 = 322;
					FA[175] = ▲カンバン拾い;
					▲ここでアイテム取得可能 = 0;
				}
			}
			Ｃ初期化(PTB[loop]);
		}
		PTB[loop] = 0;
	}
	if (◆雑魚戦で倒した敵の数 != 0)
	{
		LOG_TADA("　　→　倒した敵の数　" + string(◆雑魚戦で倒した敵の数) + "\n");
	}
	if (FA[36] != 0)
	{
		LOG_TADA("　　→　戦闘不能回数　" + string(FA[36]) + "\n");
	}
	LOG_TADA("　FA[志望する者／死亡数]　" + string(FA[254]) + "\n");
	Ｒ８マップ情報更新(2);
	Ｒ８システム情報更新(2);
	if (◇戦闘イベント名 == "機々械々と戦闘")
	{
		◆戦闘グループ = 84;
	}
	if (◆戦闘グループ == 84 && re == 1 && ▲ここでアイテム取得可能 == 1)
	{
		◆戦闘後アイテム取得 = 310;
		▲ここでアイテム取得可能 = 0;
	}
	if (◆戦闘グループ == 110 && re == 1 && ▲ここでアイテム取得可能 == 1)
	{
		◆戦闘後アイテム取得 = ウルトラレアを選ぶ(0);
		if (◆戦闘後アイテム取得 == 0)
		{
			◆戦闘後アイテム取得 = 347;
		}
		▲ここでアイテム取得可能 = 0;
	}
	int ▲確率 = 2;
	if (ＰＴＡ有無／固有(18) != 0)
	{
		▲確率 = 1;
	}
	if (FA[75] == 2 && re == 1 && ▲敵生き残り数 == 0 && ▲ここでアイテム取得可能 == 1 && RAND(▲確率) == 1)
	{
		aa = 0;
		bb = 0;
		◆戦闘後アイテム取得 = 347;
		▲ここでアイテム取得可能 = 0;
	}
	string ▲拾ったアイテム名 = "";
	if (◆戦闘後アイテム取得 != 0 && re == 1 && Ｉクエスト倉庫は満杯ですか？() == 0)
	{
		int ii = 0;
		if (◆戦闘後アイテム取得／女の子 != 0)
		{
			ii = Ｉ生成(◆戦闘後アイテム取得, 0);
			if (ii != 0)
			{
				Ｉ存在(ii, 8);
				▲拾ったアイテム名 = Ｉ名前(ii, "");
				Ｒ８女の子モンスターＧＥＴ(◆戦闘後アイテム取得／女の子, 捕獲／文字列(◆戦闘後アイテム取得));
				◆戦闘後アイテム取得 = 0;
			}
		}
		if (◆戦闘後アイテム取得／女の子 == 0)
		{
			ii = Ｒ８アイテム取得(◆戦闘後アイテム取得, 0);
			▲拾ったアイテム名 = Ｉ名前(ii, "");
			◆戦闘後アイテム取得 = 0;
		}
		if (ii != 0)
		{
			LOG_TADA(string(ii) + "\n");
			LOG_TADA("　アイテム取得　" + Ｉ名前(ii, "") + "（ランク＝" + string(Ｉレアランク(ii, -1)) + "）");
			if (Ｉ未確定(ii, -1) == 1)
			{
				LOG_TADA("　→中身（" + ▲拾ったアイテム名 + "）");
			}
			LOG_TADA("\n");
		}
	}
	for (; ; )
	{
		if (◆iiq == 182 && QD[10] != 0)
		{
			LOG("     The flames may cause an avalanche (%s/20)\n" % string3(QD[10]));
		}
		if (re == 1)
		{
			LOG("     Victory (Battles: %s, Current Area: %s)\n" % string3(◆クエスト戦闘回数) % string3(◆クエスト戦闘回数／ＭＡＰ内));
			break;
		}
		if (re == 2)
		{
			LOG("     Defeat\n");
			break;
		}
		if (re == 4)
		{
			LOG("     Draw (Battles: %s, Current Area: %s)\n" % string3(◆クエスト戦闘回数) % string3(◆クエスト戦闘回数／ＭＡＰ内));
			break;
		}
		if (re == 5 || re == 6)
		{
			LOG("     Escaped\n");
			break;
		}
		LOG("\n");
	}
	if (◆ログ宝箱 != "" && re == 1)
	{
		LOG("・Dropped Treasure%s → %s\n" % ◆ログ宝箱 % ▲拾ったアイテム名);
		◆ログ宝箱 = "";
	}
	if (◆iiq == 135)
	{
		◆クエストパーティ編成禁止 = 0;
	}
	◇戦闘イベント名 = "";
	return;
}

void Ｔ順番生成(int fg)
{
	LOG_TADA("■Ｔ順番生成（" + string(fg) + "）\n");
	int loop = 0;
	int no = 0;
	int ax = 0;
	int iic = 0;
	int ▲敵の数 = ＰＴＢ総数("");
	int ▲味方最大素早さ = 0;
	if (fg == 1)
	{
		◆戦闘中の入れ替え発生 = 1;
	}
	for (loop = 1; loop < 51; ++loop)
	{
		◆戦闘順番[loop] = 0;
	}
	array@lint PTA_BOX[6];
	array@lint PTB_BOX[6];
	lint PTC_BOX = 0;
	array@lint PTA_活動禁止[6];
	array@lint PTB_活動禁止[6];
	array@lint PTA_CN[6];
	array@lint PTB_CN[6];
	for (loop = 1; loop < 6; ++loop)
	{
		PTA_BOX[loop] = 300;
		PTB_BOX[loop] = 300;
		if (PTA[loop] != 0)
		{
			if (ＣＳ使用可能なスキルの有無(PTA[loop]) == 0)
			{
				PTA_活動禁止[loop] = 1;
			}
			if (Ｃ状態変化(PTA[loop], -1) == 3)
			{
				PTA_活動禁止[loop] = 1;
			}
		}
		if (PTB[loop] != 0)
		{
			if (Ｃ状態変化(PTB[loop], -1) == 3)
			{
				PTB_活動禁止[loop] = 1;
			}
		}
	}
	PTC_BOX = 300;
	if (◇戦闘イベント名 == "ハニー砲台")
	{
		◆奇襲 = 11;
	}
	if (fg == 0 && ◆奇襲 == 2)
	{
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTA[loop] != 0 && Ｃ職業(PTA[loop], -1) == 3 && PTA_活動禁止[loop] == 0)
			{
				++no;
				PTA_CN[loop]++;
				◆戦闘順番[no] = PTA[loop];
				++no;
				PTA_CN[loop]++;
				◆戦闘順番[no] = PTA[loop];
				PTA_BOX[loop] = 400;
			}
		}
	}
	if (fg == 0 && ◆奇襲 == 1)
	{
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTA[loop] != 0 && PTA_活動禁止[loop] == 0)
			{
				++no;
				PTA_CN[loop]++;
				◆戦闘順番[no] = PTA[loop];
			}
		}
	}
	if (fg == 0 && ◆奇襲 == 11)
	{
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTB[loop] != 0)
			{
				++no;
				PTB_CN[loop]++;
				◆戦闘順番[no] = PTB[loop];
				if (◇戦闘イベント名 == "ハニー砲台")
				{
					++no;
					PTB_CN[loop]++;
					◆戦闘順番[no] = PTB[loop];
				}
			}
		}
	}
	for (; ; )
	{
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTA[loop] != 0 && PTA_活動禁止[loop] == 0)
			{
				ax = Ｃ素早さ(PTA[loop], -1);
				if (ax == 0)
				{
					ax = 1;
				}
				if (ax > ▲味方最大素早さ)
				{
					▲味方最大素早さ = ax;
				}
				if (ax > 50)
				{
					ax = 50 + RAND(ax - 50);
				}
				if (ax == 0)
				{
					LOG_TADA("　？ＥＲＲＯＲ　" + Ｃ短縮名前(PTA[loop], "") + "　素早さ＝０\n");
				}
				ax = ax + RAND(ax);
				PTA_BOX[loop] -= ax;
				if (fg == 0 && PTA_CN[loop] == 0 && ＣＳ有無(PTA[loop], 246, 0) != 0)
				{
					PTA_BOX[loop] -= ＣＳ有無／ランク別効果(PTA[loop], 246, 0);
				}
				if (fg == 0 && PTA_CN[loop] == 0 && Ｉ固有番号(Ｃ持ち物(PTA[loop], -1), -1) == 210)
				{
					PTA_BOX[loop] -= 20;
				}
				if (fg == 0 && PTA_CN[loop] == 0 && Ｉ固有番号(Ｃ武器(PTA[loop], -1), -1) == 170)
				{
					PTA_BOX[loop] -= 20;
				}
				if (◆戦闘背景番号 == 10 && Ｃ番号(PTA[loop], -1) == 25)
				{
					PTA_BOX[loop] -= 10;
				}
				if (PTA_CN[loop] == 0 && no >= 10)
				{
					PTA_BOX[loop] -= 30;
				}
				if (PTA_BOX[loop] == 0)
				{
					++no;
					PTA_CN[loop]++;
					PTA_BOX[loop] = 300;
					◆戦闘順番[no] = PTA[loop];
					if (no == 50)
					{
						goto label0;
					}
				}
			}
		}
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTB[loop] != 0 && PTB_活動禁止[loop] == 0)
			{
				ax = Ｃ素早さ(PTB[loop], -1);
				if (ax == 0)
				{
					ax = 1;
				}
				if (▲味方最大素早さ > ax + 20 && RAND(2) == 1)
				{
					ax = ▲味方最大素早さ - 20;
				}
				if (▲味方最大素早さ > ax && ◇戦闘イベント名 == "ハニーキング戦")
				{
					ax = ▲味方最大素早さ;
				}
				if (ax > 50)
				{
					ax = 50 + RAND(ax - 50);
				}
				if (ax == 0)
				{
					LOG_TADA("　？ＥＲＲＯＲ　" + Ｃ短縮名前(PTB[loop], "") + "　素早さ＝０\n");
				}
				ax = ax + RAND(ax);
				PTB_BOX[loop] -= ax;
				if (fg == 0 && ◆iiq != 25)
				{
					if (PTB_CN[loop] == 0 && RAND(2) == 1)
					{
						PTB_BOX[loop] - 50;
					}
					if (PTB_CN[loop] == 0 && ▲敵の数 < 3 && RAND(2) == 1)
					{
						PTB_BOX[loop] - 50;
					}
				}
				if (fg == 0 && PTB_CN[loop] == 0 && ＣＳ有無(PTB[loop], 246, 0) != 0)
				{
					PTB_BOX[loop] -= ＣＳ有無／ランク別効果(PTB[loop], 246, 0);
				}
				if (PTB_CN[loop] == 0 && no >= 10)
				{
					PTB_BOX[loop] -= 30;
				}
				if (PTB_BOX[loop] == 0)
				{
					++no;
					PTB_CN[loop]++;
					PTB_BOX[loop] = 300;
					◆戦闘順番[no] = PTB[loop];
					if (no < 48 && Ｃ番号(PTB[loop], -1) == 354)
					{
						++no;
						◆戦闘順番[no] = PTB[loop];
					}
					if (no < 48 && Ｃ番号(PTB[loop], -1) == 319)
					{
						++no;
						◆戦闘順番[no] = PTB[loop];
					}
					if (no < 48 && Ｃ番号(PTB[loop], -1) == 379)
					{
						++no;
						◆戦闘順番[no] = PTB[loop];
					}
					if (no < 48 && Ｃ番号(PTB[loop], -1) == 235 && RAND(3) == 1)
					{
						++no;
						◆戦闘順番[no] = PTB[loop];
					}
					if (no == 50)
					{
						goto label0;
					}
				}
			}
		}
		if (PTC[1] != 0)
		{
			ax = Ｃ素早さ(PTC[1], -1);
			if (ax == 0)
			{
				ax = 1;
			}
			if (ax > 50)
			{
				ax = 50 + RAND(ax - 50);
			}
			ax = ax + RAND(ax);
			PTC_BOX -= ax;
			if (PTC_BOX == 0)
			{
				++no;
				PTC_BOX = 300;
				◆戦闘順番[no] = PTC[1];
				if (no == 50)
				{
					break;
				}
			}
		}
	}
label0:
}

void Ｔ行動開始(int iic)
{
	lint loop = 0;
	lint aa = 0;
	lint bb = 0;
	lint iics = 0;
	lint ▲効果 = 0;
	if (iic != 10)
	{
		◆戦闘ターン++;
	}
	◆戦闘ログ１ = "";
	◆戦闘ログ２ = "";
	if (iic < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	◆溜め実行フラグ = 0;
	if (◆ボス戦 == 0)
	{
		if (◆逃げる確率 != 0 && iic > 5)
		{
			◆逃げる確率 += 5;
		}
		if (◆逃げる確率 >= 100)
		{
			◆逃げる確率 = 100;
		}
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔ行動開始　（ターン＝" + string(◆戦闘ターン) + "）　　" + Ｃ短縮名前(iic, "") + "\n");
	}
	if (◆敵側行動 == 1)
	{
		for (loop = 1; loop < 6; loop++)
		{
			aa = ＣＳ実装中(iic, loop, -1);
			bb = ＣＳ番号(iic, loop, -1);
			if (ＣＳ条件(iic, loop, -1) == 50 && ＣＳ確率(iic, loop, -1) != 0)
			{
				ＣＳ確率(iic, loop, ＣＳ確率(iic, loop, -1) + 5);
			}
			if (bb != 0 && ◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　スキル名＝" + Ｓ名前(bb, "") + "　　発生率＝" + string(ＣＳ確率(iic, loop, -1)) + "％\n");
			}
		}
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("\n");
		}
	}
	◆変化初期化();
	if (Ｃ状態変化(iic, -1) == 2)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　→ぴより　から回復\n");
		}
		◆ぴより治った = 1;
		◆行動パスです = 1;
		Ｃ状態変化(iic, 0);
		◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic, "") + " recovered from stun.";
		Ｔ台詞生成(iic, 0, "ぴより回復時");
		return;
	}
	連続ぴより(iic, 0);
	if (Ｃ番号(iic, -1) == 51 && ◆カロリア硬質化中 == 1)
	{
		◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic, "") + " is petrified and cannot act.";
		◆行動パスです = 1;
		return;
	}
	if (Ｃ状態変化(iic, -1) == 1)
	{
		lint ▲毒ダメージ = Ｃ体力最大(iic, -1) / 10;
		if (Ｃボス(iic, -1) == 1)
		{
			▲毒ダメージ = Ｃ体力最大(iic, -1) / 15;
		}
		if (▲毒ダメージ > 999)
		{
			▲毒ダメージ = 999;
		}
		if (▲毒ダメージ >= Ｃ体力(iic, -1))
		{
			▲毒ダメージ = Ｃ体力(iic, -1) - 1;
		}
		if (▲毒ダメージ != 0)
		{
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　毒によりダメージ" + string(▲毒ダメージ) + "\n");
			}
			Ｃ体力(iic, Ｃ体力(iic, -1) - ▲毒ダメージ);
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　　ＤＢ：毒計算　" + string(Ｃ体力(iic, -1)) + "　\n");
			}
			◆毒ダメージ有り = ▲毒ダメージ;
		}
	}
	iics = ＣＳ有無／機能(iic, 47, 0);
	if (iics != 0 && Ｃ体力(iic, -1) < Ｃ体力最大(iic, -1))
	{
		▲効果 = ＣＳランク効果(iic, iics);
		aa = 倍率計算関数(Ｃ体力最大(iic, -1), ▲効果);
		bb = Ｃ体力最大(iic, -1) - Ｃ体力(iic, -1);
		if (aa > bb)
		{
			aa = bb;
		}
		◆体力回復あり = aa;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　自動回復　" + string(aa) + "Ｐ回復\n");
		}
		Ｃ体力(iic, Ｃ体力(iic, -1) + aa);
	}
	if (Ｃ全体加護(iic, -1) == 1)
	{
		◆全体加護発動 = 1;
		for (loop = 1; loop < 6; loop++)
		{
			if (PTA[loop] != 0 && Ｃ状態変化(PTA[loop], -1) != 3)
			{
				▲効果 = 10;
				aa = 倍率計算関数(Ｃ体力最大(PTA[loop], -1), ▲効果);
				int ▲上限 = 200;
				if (◆ワールド == 3)
				{
					▲上限 = 3000;
				}
				if (aa > ▲上限)
				{
					aa = ▲上限;
				}
				bb = Ｃ体力最大(PTA[loop], -1) - Ｃ体力(PTA[loop], -1);
				if (aa > bb)
				{
					aa = bb;
				}
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　　自動回復　" + string(aa) + "Ｐ回復\n");
				}
				Ｃ体力(PTA[loop], Ｃ体力(PTA[loop], -1) + aa);
			}
		}
	}
	if (Ｃ隠密率(iic, -1) != 0)
	{
		Ｃ隠密率(iic, Ｃ隠密率(iic, -1) + 50);
		◆隠密率変化あり = 1;
	}
	if (Ｃ番号(iic, -1) == 330)
	{
		if (ＰＴＡ平均レベル() >= 40)
		{
			Ｃ攻撃力(iic, 1500);
		}
	}
	if (ＣＳ有無(iic, 475, 0) != 0)
	{
		aa = 0;
		if (Ｃ状態変化(iic, -1) == 1 && RAND(2) == 1 && aa == 0)
		{
			◆状態回復あり = 1;
			Ｃ状態変化(iic, 0);
			aa = 1;
		}
		if (Ｃ攻撃付与(iic, -1) == 2 && RAND(2) == 1 && aa == 0)
		{
			◆状態回復あり = 1;
			Ｃ攻撃付与(iic, 0);
			aa = 1;
		}
		if (Ｃ防御付与(iic, -1) == 2 && RAND(2) == 1 && aa == 0)
		{
			◆状態回復あり = 1;
			Ｃ防御付与(iic, 0);
			aa = 1;
		}
		for (loop = 1; loop < 6; loop++)
		{
			if (PTA[loop] != 0 && Ｃ状態変化(PTA[loop], -1) != 3 && RAND(3) == 1 && Ｃ隠密率(PTA[loop], -1) != 0)
			{
				Ｃ隠密率(PTA[loop], 0);
				LOG_TADA("　" + Ｃ名前(PTA[loop], "") + "の隠密解除　←　自動状態回復により\n");
			}
		}
	}
	if (ＣＳ有無(iic, 588, 0) != 0)
	{
		Ｃ守護率(iic, Ｃ守護率(iic, -1) + 100);
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		if (Ｃ守護率(iic, -1) != 0)
		{
			LOG_TADA("　　守護率（" + string(Ｃ守護率(iic, -1)) + "％）\n");
		}
		if (Ｃ隠密率(iic, -1) != 0)
		{
			LOG_TADA("　　隠密率（" + string(Ｃ隠密率(iic, -1)) + "％）\n");
		}
		if (Ｃバリア(iic, -1) != 0)
		{
			LOG_TADA("　　バリア（" + string(Ｃバリア(iic, -1)) + "回）\n");
		}
		if (Ｃ狂戦士(iic, -1) == 1)
		{
			LOG_TADA("　　狂戦士中\n");
		}
		if (Ｃ全体加護(iic, -1) == 1)
		{
			LOG_TADA("　　全体加護中\n");
		}
		if (Ｃ攻撃付与(iic, -1) == 1)
		{
			LOG_TADA("　　攻撃付与▲\n");
		}
		if (Ｃ攻撃付与(iic, -1) == 2)
		{
			LOG_TADA("　　攻撃付与▼\n");
		}
		if (Ｃ防御付与(iic, -1) == 1)
		{
			LOG_TADA("　　防御付与▲\n");
		}
		if (Ｃ防御付与(iic, -1) == 2)
		{
			LOG_TADA("　　防御付与▼\n");
		}
	}
	◆戦闘補正／元気バリア = 0;
	◆戦闘補正／リセット効果 = 0;
	if (◆敵側行動 == 1)
	{
		lint vv = 0;
		if (ＣＳ有無／スタメン(vv, 508, 0) != 0)
		{
			◆戦闘補正／元気バリア = 1;
		}
		if (ＣＳ有無／スタメン(vv, 509, 0) != 0)
		{
			◆戦闘補正／リセット効果 = 1;
		}
	}
	FA[77] = 0;
	FA[82] = 0;
	FA[88] = ＰＴＢ総数("");
	if (◆敵側行動 == 0)
	{
		Ｃ台詞登録(iic, Ｃ番号(iic, -1), 0, "");
	}
}

void Ｔ行動終了(lint iic, lint iis)
{
	FA[82] = 0;
	if (Ｃ番号(iic, -1) == 322 && ◆戦闘ターン > 60)
	{
		ＣＳ削除(iic, 299);
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("■Ｔ行動終了　　フルの回復能力カット\n");
		}
	}
	if (◆行動タイプ == 1)
	{
		if (iis == 448)
		{
			if (FA[102] == 1)
			{
				FA[321]++;
				LOG("   Yay!   Great Luck total: %s\n" % string3(FA[321]));
			}
			int ra = RAND(4);
			if (ra == 1)
			{
				FA[102] = 1;
			}
			if (ra == 2)
			{
				FA[102] = 2;
			}
			if (ra == 3)
			{
				FA[102] = 2;
			}
			if (ra == 4)
			{
				FA[102] = 3;
			}
		}
	}
	if (Ｓ機能(iis, -1) == 41)
	{
		lint iic_s = ＣＳ番号取得(iic, iis, 0);
		iis = Ｓ効果(iis, -1);
		ＣＳ番号(iic, iic_s, iis);
		if (iis == 161)
		{
			ＣＳモーション(iic, iic_s, 1);
		}
		if (iis == 162)
		{
			ＣＳモーション(iic, iic_s, 0);
		}
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　スキル変更：" + Ｓ名前(iis, "") + "\n");
		}
	}
	if (iis == 147)
	{
		FA[111]++;
	}
	if (iis == 148)
	{
		FA[334]++;
	}
}

void 敵の一度使用処理(int iic, int iis)
{
	int iic_s = ＣＳ番号取得(iic, iis, 0);
	if (iic_s == 0)
	{
		return;
	}
	if (ＣＳ一度使用(iic, iic_s, -1) == 1)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　※この技は一度使用なので次は発動しません\n");
		}
		ＣＳ確率(iic, iic_s, 0);
	}
}

void 味方の一度使用処理(int iic, int iis)
{
	int iic_s = ＣＳ番号取得(iic, iis, 0);
	ＣＳ戦闘使用済み(iic, iic_s, 1);
}

void Ｔ戦闘中キャラ外し(lint iic)
{
	if (iic == 0)
	{
		return;
	}
	if (Ｃ状態変化(iic, -1) == 3)
	{
		FA[36]++;
		FA[110]++;
		Ｃ登録状態(iic, 3);
		Ｃ状態変化(iic, 0);
		Ｃ体力(iic, 1);
		return;
	}
	Ｃ登録状態(iic, 2);
	Ｃ状態変化(iic, 0);
	return;
}

void Ｔ思考ルーチン(int iic1, ref int iis, ref int iic2)
{
	int skill数 = 0;
	int loop = 0;
	int iic_s = 0;
	int aa = 0;
	int ra = 0;
	int 回復スキル = 0;
	int 蘇生スキル = 0;
	int 守護スキル = 0;
	int 悪口スキル = 0;
	int 弱点スキル = 0;
	int 全体スキル = 0;
	int 待機スキル = 0;
	int iic3 = 0;
	array@lint skill[7];
	array@lint skill全体[7];
	array@lint skill遠距離[7];
	array@lint skill魔法[7];
	array@lint skillその他[7];
	skill数 = 0;
	for (iic_s = 1; iic_s < 21; ++iic_s)
	{
		aa = 0;
		iis = ＣＳ番号(iic1, iic_s, -1);
		if (iis != 0 && Ｓタイプ(iis, -1) != 10)
		{
			aa = 1;
		}
		if (iis != 0 && ＣＳ使用禁止(iic1, iic_s, -1) != 0)
		{
			aa = 1;
		}
		if (ＣＳ実装中(iic1, iic_s, -1) != 0 && ＣＳ使用回数(iic1, iic_s, -1) != 0 && aa == 0)
		{
			++skill数;
			skill[skill数] = iis;
			if (Ｓ対象(iis, -1) == 3)
			{
				skill全体[skill数] = 1;
				全体スキル = 1;
			}
			if (Ｓ対象(iis, -1) == 2)
			{
				skill遠距離[skill数] = 1;
			}
			if (Ｓ行動種類(iis, -1) == 2)
			{
				skill魔法[skill数] = 1;
			}
			if (Ｓ行動種類(iis, -1) == 3)
			{
				skillその他[skill数] = 1;
			}
			if (Ｓ行動種類(iis, -1) == 4)
			{
				skillその他[skill数] = 1;
			}
			if (Ｓ機能(iis, -1) == 48 || Ｓ機能(iis, -1) == 74)
			{
				回復スキル = iis;
			}
			if (iis == 227 || iis == 229)
			{
				蘇生スキル = iis;
			}
			if (iis == 212)
			{
				守護スキル = iis;
			}
			if (iis == 149)
			{
				悪口スキル = iis;
			}
			if (iis == 200)
			{
				弱点スキル = iis;
			}
			if (iis == 384)
			{
				待機スキル = iis;
			}
		}
	}
	if (skill数 == 0)
	{
		iis = 0;
		iic2 = 0;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　思考ルーチン（" + Ｃ短縮名前(iic1, "") + "）　スキル無し\n");
		}
		return;
	}
	for (loop = 1; loop < 7; ++loop)
	{
		LOG_TADA(">" + string(loop) + "：" + Ｓ名前(skill[loop], "") + "　" + 対象文字列(Ｓ対象(skill[loop], -1)) + "　その他＝" + string(skillその他[loop]) + "\n");
	}
	if (蘇生スキル != 0)
	{
		iic2 = 0;
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTA[loop] != 0 && Ｃ状態変化(PTA[loop], -1) == 3)
			{
				iic2 = PTA[loop];
			}
		}
		if (iic2 != 0)
		{
			iis = 蘇生スキル;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　思考ルーチン／味方に戦闘不能が居る　（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "\n");
			}
			return;
		}
	}
	if (回復スキル != 0)
	{
		iic2 = ＰＴＡ体力５０％減キャラ取得();
		if (iic2 != 0)
		{
			iis = 回復スキル;
			if (Ｓ対象(iis, -1) == 12 || Ｓ対象(iis, -1) == 14)
			{
				iic2 = 0;
			}
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　思考ルーチン／味方にＨＰ低下がいる　（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "\n");
			}
			return;
		}
	}
	if (守護スキル != 0 && Ｃ守護率(iic1, -1) < 80)
	{
		iic2 = iic1;
		iis = 守護スキル;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　思考ルーチン／ガード　（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "\n");
		}
		return;
	}
	if (ＰＴＢ総数("悪口対象") >= 2 && 悪口スキル != 0)
	{
		iis = 悪口スキル;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　思考ルーチン／悪口　（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "\n");
		}
		return;
	}
	if (弱点スキル != 0)
	{
		aa = 0;
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTB[loop] != 0 && Ｃ状態変化(PTB[loop], -1) != 3 && Ｃ弱点把握(PTB[loop], -1) == 0)
			{
				aa = 1;
			}
		}
		if (aa == 1)
		{
			iis = 200;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　思考ルーチン／弱点調べよう　（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
			}
			return;
		}
	}
	if (ＰＴＢ総数("") >= 3 && 全体スキル == 1)
	{
		for (loop = 1; loop < 10; ++loop)
		{
			int skill_no = RAND(skill数);
			iis = skill[skill_no];
			aa = 0;
			if (iis == 149)
			{
				aa = 1;
			}
			if (iis == 200)
			{
				aa = 1;
			}
			if (Ｓ行動種類(iis, -1) == 2 && ＰＴＢ有無／種族(8) != 0)
			{
				continue;
			}
			if (Ｓ対象(iis, -1) == 4 && ＰＴＢ総数("前列") < 2)
			{
				continue;
			}
			if (skillその他[skill_no] == 0 && skill全体[skill_no] == 1 && aa == 0)
			{
				iic2 = Ｔターゲット決定(iic1, iis);
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　思考ルーチン／複数（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
				}
				return;
			}
		}
	}
	if (ＰＴＡ番号取得(iic1) >= 4)
	{
		for (loop = 1; loop < 10; ++loop)
		{
			int skill_no = RAND(skill数);
			iis = skill[skill_no];
			if (skillその他[skill_no] == 0 && skill遠距離[skill_no] == 1)
			{
				iic2 = ＰＴＢ瀕死キャラ取得();
				if (iic2 == 0)
				{
					iic2 = Ｔターゲット決定(iic1, iis);
				}
				if (Ｃ体力最大(iic2, -1) == Ｃ体力(iic2, -1))
				{
					iic2 = Ｔターゲット決定(iic1, iis);
				}
				if (Ｓ行動種類(iis, -1) == 2 && Ｃ種族(iic2, -1) == 8)
				{
					continue;
				}
				if (iis == 149)
				{
					continue;
				}
				if (iis == 166)
				{
					continue;
				}
				if (iis == 200)
				{
					continue;
				}
				if (iic2 == 0)
				{
					continue;
				}
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　思考ルーチン／技系／遠距離（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
				}
				return;
			}
		}
	}
	for (loop = 1; loop < 10; ++loop)
	{
		int skill_no = RAND(skill数);
		iis = skill[skill_no];
		if (skillその他[skill_no] == 0)
		{
			iic2 = Ｔターゲット決定(iic1, iis);
			if (Ｓ行動種類(iis, -1) == 2 && Ｃ種族(iic2, -1) == 8)
			{
				continue;
			}
			if (Ｓ対象(iis, -1) == 4 || Ｓ対象(iis, -1) == 3)
			{
				continue;
			}
			if (iis == 146 && Ｃタイプ(iic2, -1) != 22)
			{
				continue;
			}
			if (iis == 149)
			{
				continue;
			}
			if (iis == 166)
			{
				continue;
			}
			if (iis == 200)
			{
				continue;
			}
			if (Ｓ対象(iis, -1) == 1 && iic2 == 0)
			{
				continue;
			}
			if (Ｓ機能(iis, -1) == 48 || Ｓ機能(iis, -1) == 74)
			{
				iic3 = ＰＴＡ体力減キャラ取得();
				if (iic3 != 0)
				{
					iic2 = iic3;
				}
			}
			if (iis == 227)
			{
				iic3 = ＰＴＡ異常状態キャラ取得();
				if (iic3 != 0)
				{
					iic2 = iic3;
				}
			}
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　思考ルーチン／技系（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
			}
			return;
		}
	}
	if (ＰＴＢ有無／種族(8) != 0 && Ｃ職業(iic1, -1) == 4 && 待機スキル != 0)
	{
		iis = 待機スキル;
		return;
	}
	if (全体スキル == 1)
	{
		for (loop = 1; loop < 10; ++loop)
		{
			int skill_no = RAND(skill数);
			iis = skill[skill_no];
			aa = 0;
			if (iis == 149)
			{
				aa = 1;
			}
			if (iis == 200)
			{
				aa = 1;
			}
			if (Ｓ行動種類(iis, -1) == 2 && ＰＴＢ有無／種族(8) != 0)
			{
				continue;
			}
			if (skillその他[skill_no] == 0 && skill全体[skill_no] == 1 && aa == 0)
			{
				iic2 = Ｔターゲット決定(iic1, iis);
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　思考ルーチン／複数２（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
				}
				return;
			}
		}
	}
	iis = skill[RAND(skill数)];
	iic2 = Ｔターゲット決定(iic1, iis);
	if (Ｓ機能(iis, -1) == 48 || Ｓ機能(iis, -1) == 74)
	{
		iic3 = ＰＴＡ体力減キャラ取得();
		if (iic3 != 0)
		{
			iic2 = iic3;
		}
	}
	if (iis == 227)
	{
		iic3 = ＰＴＡ異常状態キャラ取得();
		if (iic3 != 0)
		{
			iic2 = iic3;
		}
	}
	if (Ｓ対象(iis, -1) == 1 && iic2 == 0)
	{
		iis = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　思考ルーチン／ランダム（" + Ｃ短縮名前(iic1, "") + "）　スキル：" + Ｓ名前(iis, "") + "　対象：" + Ｃ短縮名前(iic2, "") + "（" + string(iic2) + "）\n");
	}
	return;
}

int Ｔターゲット決定(int iic, int iis)
{
	lint tr = Ｓ対象(iis, -1);
	lint ▲攻撃側 = 0;
	lint PTA_NO = 0;
	lint tg = 0;
	if (tr != 11 && tr != 13 && tr != 1 && tr != 2 && tr != 20)
	{
		return 0;
	}
	if (iic < 6)
	{
		▲攻撃側 = 1;
	}
	else
	{
		▲攻撃側 = 0;
	}
	if (▲攻撃側 == 0)
	{
		PTA_NO = ＰＴＡ番号取得(iic);
	}
	if (▲攻撃側 == 0)
	{
		int ▲味方前列健在 = 1;
		if (ＰＴＡ番号有無(1) == 0 && ＰＴＡ番号有無(2) == 0 && ＰＴＡ番号有無(3) == 0)
		{
			▲味方前列健在 = 0;
		}
		if (tr == 11 || tr == 13)
		{
			tg = ＰＴＡランダム(3, iic);
		}
		if (tr == 1 && PTA_NO < 4)
		{
			tg = ＰＴＢランダム(1, iic);
		}
		if (tr == 1 && ▲味方前列健在 == 0)
		{
			tg = ＰＴＢランダム(1, iic);
		}
		if (tr == 2)
		{
			tg = ＰＴＢランダム(3, iic);
		}
		if (tr == 20)
		{
			tg = ＰＴＢランダム(3, iic);
		}
	}
	if (▲攻撃側 == 1)
	{
		if (tr == 11 || tr == 13)
		{
			tg = ＰＴＢランダム(3, iic);
		}
		if (tr == 1)
		{
			tg = ＰＴＡランダム(1, iic);
		}
		if (tr == 2)
		{
			tg = ＰＴＡランダム(3, iic);
		}
		if (tr == 20)
		{
			tg = ＰＴＡランダム(3, iic);
		}
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　ターゲット決定（" + 対象文字列(tr) + "）　　→" + Ｃ短縮名前(tg, "") + "\n");
	}
	return tg;
}

int Ｔスルー行動(int iic1)
{
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔスルー行動（" + Ｃ短縮名前(iic1, "") + "\n");
	}
	lint loop = 0;
	lint bx = 0;
	if (iic1 < 6)
	{
		bx = 1;
	}
	else
	{
		bx = 0;
	}
	◆変化初期化();
	if (bx == 0)
	{
		ＣＳ使用禁止切り替え(iic1, 2);
	}
	if (◆ボス戦 == 1 && bx == 0)
	{
		int iic = 0;
		int aa = 0;
		iic = PTA[1];
		if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
		{
			aa += ＣＳ残行動回数取得(iic, "");
		}
		iic = PTA[2];
		if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
		{
			aa += ＣＳ残行動回数取得(iic, "");
		}
		iic = PTA[3];
		if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
		{
			aa += ＣＳ残行動回数取得(iic, "");
		}
		iic = PTA[4];
		if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
		{
			aa += ＣＳ残行動回数取得(iic, "後列");
		}
		iic = PTA[5];
		if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
		{
			aa += ＣＳ残行動回数取得(iic, "後列");
		}
		if (aa == 0)
		{
			for (loop = 1; loop < 6; loop++)
			{
				iic = PTA[loop];
				if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
				{
					ＣＳ全使用済み(iic);
				}
			}
		}
	}
	int iic = 0;
	int aa = 0;
	iic = PTA[1];
	if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
	{
		aa += ＣＳ残行動回数取得(iic, "");
	}
	iic = PTA[2];
	if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
	{
		aa += ＣＳ残行動回数取得(iic, "");
	}
	iic = PTA[3];
	if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
	{
		aa += ＣＳ残行動回数取得(iic, "");
	}
	iic = PTA[4];
	if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
	{
		aa += ＣＳ残行動回数取得(iic, "後列");
	}
	iic = PTA[5];
	if (iic != 0 && Ｃ状態変化(iic, -1) != 3)
	{
		aa += ＣＳ残行動回数取得(iic, "後列");
	}
	return 0;
}

void Ｔ台詞割り込み(lint iic)
{
	◆戦闘セリフタイプ = 0;
	◆戦闘台詞 = "";
	◆戦闘台詞発声者 = 0;
	lint ra = RAND(10);
	if (ra < 6 && PTA[ra] == 0)
	{
		return;
	}
	if (ra > 5 && PTB[ra - 5] == 0)
	{
		return;
	}
	if (ra < 6)
	{
		◆戦闘台詞発声者 = PTA[ra];
	}
	if (ra > 5)
	{
		◆戦闘台詞発声者 = PTB[ra - 5];
	}
	if (◆戦闘台詞発声者 == 0)
	{
		return;
	}
	if (Ｃ体力(◆戦闘台詞発声者, -1) == 0)
	{
		return;
	}
	if (Ｃ状態変化(◆戦闘台詞発声者, -1) == 2)
	{
		return;
	}
	if (◆戦闘台詞発声者 == iic)
	{
		Ｔ台詞生成(◆戦闘台詞発声者, 0, "自分待機時");
	}
	if (◆戦闘台詞発声者 != iic)
	{
		Ｔ台詞生成(◆戦闘台詞発声者, 0, "他人行動時");
	}
}

void Ｔ台詞割り込み／リザルト(lint fg)
{
	◆戦闘セリフタイプ = 0;
	◆戦闘台詞 = "";
	◆戦闘台詞発声者 = 0;
	◆戦闘台詞発声者 = ＰＴＡランダム(0, 0);
	if (fg == 1)
	{
		Ｔ台詞生成(◆戦闘台詞発声者, 0, "戦闘後／勝利");
	}
	if (fg != 1)
	{
		Ｔ台詞生成(◆戦闘台詞発声者, 0, "戦闘後／引き分け");
	}
	if (◆戦闘台詞 == "")
	{
		◆戦闘台詞発声者 = 0;
	}
}

string Ｔ戦闘予測(lint iic1, lint iic2, lint iis)
{
	string 文字列 = "";
	lint aa = 0;
	lint bb = 0;
	lint ▲絶対に外れる = 0;
	if (iic1 < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	if (Ｓタイプ(iis, -1) == 10 && Ｓ行動種類(iis, -1) == 1)
	{
		命中計算(iic1, iic2, iis, "模擬");
		文字列 += "Battle Forecast:  Accuracy %d%" % ◆ＡＡ;
		衝撃計算(iic1, iic2, iis, "模擬");
		文字列 += "  Stun %d%" % ◆ＡＡ;
		◆戦闘／ＤＭ = 0;
		◆戦闘／倍率 = 100;
		◆戦闘／最終追加倍率 = 100;
		物理ダメージ計算(iic1, iic2, iis, "模擬");
		物理属性計算(iic1, iic2, iis, "模擬");
		ダメージ補正計算(iic1, iic2, iis, "模擬");
		クリティカル計算(iic1, iic2, iis, "模擬");
		最終ダメージ計算(iic1, iic2, iis, "模擬");
		LOG_TADA("　ＤＭ＝" + string(◆戦闘／ＤＭ) + "\n");
		for (; ; )
		{
			if (◆戦闘／ＤＭ == 0)
			{
				文字列 += "  No effect";
				break;
			}
			if (◆戦闘／ＤＭ >= 倍率計算関数(Ｃ体力(iic2, -1), 130))
			{
				文字列 += "　◎Great damage";
				break;
			}
			if (◆戦闘／ＤＭ >= Ｃ体力(iic2, -1))
			{
				文字列 += "　○Good damage";
				break;
			}
			if (◆戦闘／ＤＭ <= Ｃ体力(iic2, -1) / 3)
			{
				文字列 += "　×Slight damage";
				break;
			}
			文字列 += "　△Medium damage";
			break;
		}
	}
	if (Ｓタイプ(iis, -1) == 10 && Ｓ行動種類(iis, -1) == 2)
	{
		文字列 += "Battle Forecast:  Accuracy 100%";
		◆戦闘／ＤＭ = 0;
		◆戦闘／倍率 = 100;
		◆戦闘／最終追加倍率 = 100;
		魔法ダメージ計算(iic1, iic2, iis, "模擬");
		魔法属性計算(iic1, iic2, iis, "模擬");
		ダメージ補正計算(iic1, iic2, iis, "模擬");
		最終ダメージ計算(iic1, iic2, iis, "模擬");
		LOG_TADA("　ＤＭ＝" + string(◆戦闘／ＤＭ) + "\n");
		for (; ; )
		{
			if (◆戦闘／ＤＭ == 0)
			{
				文字列 += "  No effect";
				break;
			}
			if (◆戦闘／ＤＭ >= 倍率計算関数(Ｃ体力(iic2, -1), 130))
			{
				文字列 += "　◎Great damage";
				break;
			}
			if (◆戦闘／ＤＭ >= Ｃ体力(iic2, -1))
			{
				文字列 += "　○Good damage";
				break;
			}
			if (◆戦闘／ＤＭ <= Ｃ体力(iic2, -1) / 3)
			{
				文字列 += "　×Slight damage";
				break;
			}
			文字列 += "　△Medium damage";
			break;
		}
	}
	if (Ｓタイプ(iis, -1) == 10 && Ｓ行動種類(iis, -1) == 3)
	{
		if (iis == 166 || iis == 451)
		{
			lint ▲捕獲成功率 = 0;
			lint ▲対象体力率 = 0;
			▲対象体力率 = ％計算関数(Ｃ体力(iic2, -1), Ｃ体力最大(iic2, -1));
			▲捕獲成功率 = 0;
			if (▲対象体力率 < 50)
			{
				▲捕獲成功率 = 80 - ▲対象体力率;
			}
			if (Ｃ状態変化(iic2, -1) == 2)
			{
				▲捕獲成功率 += 30;
			}
			▲捕獲成功率 += ＣＳ有無／ランク別効果(iic1, 322, 0);
			if (Ｉクエスト倉庫は満杯ですか？() == 1)
			{
				▲捕獲成功率 = 0;
			}
			if (Ｃ種族(iic2, -1) != 3)
			{
				▲捕獲成功率 = 0;
			}
			if (Ｃ番号(iic2, -1) == 143)
			{
				▲捕獲成功率 = 0;
			}
			if (Ｃ番号(iic2, -1) == 221)
			{
				▲捕獲成功率 = 0;
			}
			if (◆戦闘ランク == 2)
			{
				▲捕獲成功率 = 0;
			}
			文字列 += "Battle Forecast:  Capture rate %d%" % ▲捕獲成功率;
			return 文字列;
		}
	}
	return 文字列;
}

int Ｔ物理攻撃行動(int iic1, int iic2, int iis)
{
	◆行動タイプ = 1;
	◆ログ２追加 = "";
	lint aa = 0;
	lint bb = 0;
	lint iics = 0;
	lint csx = ＣＳ番号取得(iic1, iis, 0);
	lint ▲効果Ｘ = ＣＳ有無／ランク別効果(iic1, iis, 0);
	if (iic1 < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	◆戦闘／最終追加倍率 = 100;
	◆戦闘ＥＦ = "";
	◆攻撃属性 = 0;
	◆ＥＦ固定 = 0;
	◆行動前にぴより中 = 0;
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔ物理攻撃行動（" + Ｃ短縮名前(iic1, "") + "　→　" + Ｃ短縮名前(iic2, "") + "）\n");
		LOG_TADA("　　スキル名＝" + Ｓ名前(iis, "") + "　倍率(" + string(Ｓ倍率(iis, -1)) + ")上限(" + string(Ｓダメージ上限(iis, -1)) + ")命中(" + string(Ｃ命中率(iic1, -1)) + ")必殺(" + string(Ｃ必殺率(iic1, -1)) + ")衝撃(" + string(Ｃ衝撃率(iic1, -1)) + ")");
		if (Ｓ要溜め(iis, -1) == 1)
		{
			LOG_TADA("　要溜め");
		}
		if (Ｓ機能(iis, -1) != 0)
		{
			LOG_TADA("　機能：" + 機能文字列(Ｓ機能(iis, -1), ▲効果Ｘ));
		}
		LOG_TADA("\n");
	}
	◆変化初期化();
	if (◆敵側行動 == 1)
	{
		敵の一度使用処理(iic1, iis);
	}
	if (◆敵側行動 == 0)
	{
		味方の一度使用処理(iic1, iis);
	}
	if (◆敵側行動 == 0)
	{
		ＣＳ使用禁止切り替え(iic1, 2);
	}
	if (Ｃ状態変化(iic2, -1) == 2)
	{
		◆行動前にぴより中 = 1;
	}
	if (溜め計算(iic1, iic2, iis) == 1)
	{
		行動終了処理(iic1, iic2, iis);
		return 0;
	}
	if (Ｓ大技(iis, -1) == 1)
	{
		Ｔ台詞生成(iic1, iis, "攻撃大技");
	}
	if (Ｓ大技(iis, -1) == 0)
	{
		Ｔ台詞生成(iic1, iis, "攻撃通常");
	}
	◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " " + ＣＳ表示文(iic1, csx, "");
	if (iis == 116)
	{
		◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " countered.";
	}
	if (ＳＥＦ(iis, "") != "")
	{
		◆ＥＦ固定 = 1;
		◆戦闘ＥＦ = ＳＥＦ(iis, "");
	}
	if (ＳＥＦ(iis, "") == "")
	{
		◆ＥＦ固定 = 0;
		◆戦闘ＥＦ = "物理攻撃基本";
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 9)
		{
			◆戦闘ＥＦ = "格闘攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 2)
		{
			◆戦闘ＥＦ = "剣攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 3)
		{
			◆戦闘ＥＦ = "剣攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 5)
		{
			◆戦闘ＥＦ = "射撃攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 8)
		{
			◆戦闘ＥＦ = "杖攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 7)
		{
			◆戦闘ＥＦ = "槍攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 4)
		{
			◆戦闘ＥＦ = "斧攻撃";
		}
		if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 6)
		{
			◆戦闘ＥＦ = "鉄砲";
		}
		if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 171)
		{
			◆戦闘ＥＦ = "チューリップ";
		}
		if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 70)
		{
			◆戦闘ＥＦ = "鞭攻撃";
		}
	}
	if (iis == 448)
	{
		if (FA[102] == 2)
		{
			◆戦闘ＥＦ = "全体・お御籤・小吉";
		}
		if (FA[102] == 3)
		{
			◆戦闘ＥＦ = "全体・お御籤・凶";
		}
	}
	if (iis == 489)
	{
		ＣＦＡ(iic1, 30, ＣＦＡ(iic1, 30, -1) + 1);
		Ｃ戦闘後再計算(iic1, 1);
	}
	命中前計算(iic1, iic2, iis);
	if (命中計算(iic1, iic2, iis, "") == 0)
	{
		行動終了処理(iic1, iic2, iis);
		return 0;
	}
	◆戦闘／ＤＭ = 0;
	◆戦闘／倍率 = 100;
	◆戦闘／最終追加倍率 = 100;
	物理ダメージ計算(iic1, iic2, iis, "");
	物理属性計算(iic1, iic2, iis, "");
	ダメージ補正計算(iic1, iic2, iis, "");
	衝撃計算(iic1, iic2, iis, "");
	毒計算(iic1, iic2, iis);
	クリティカル計算(iic1, iic2, iis, "");
	最終ダメージ計算(iic1, iic2, iis, "");
	Ｃ体力(iic2, Ｃ体力(iic2, -1) - ◆戦闘／ＤＭ);
	if (◆戦闘／ＤＭ != 0)
	{
		ダメージ後計算(iic1, iic2, iis);
	}
	if (Ｃ体力(iic2, -1) == 0)
	{
		死亡計算(iic1, iic2, iis);
	}
	◆反射発動 = 0;
	if (Ｃ番号(iic2, -1) == 244 && Ｃ番号(iic1, -1) != 10 && ◆戦闘／ＤＭ != 0 && Ｃ体力(iic2, -1) != 0 && (Ｓ対象(iis, -1) == 1 || Ｓ対象(iis, -1) == 2))
	{
		◆反射発動 = ◆戦闘／ＤＭ;
		if (◆反射発動 >= Ｃ体力(iic1, -1))
		{
			◆反射発動 = Ｃ体力(iic1, -1) - 1;
		}
		◆戦闘ログ２ += " (damage reflection)";
	}
	◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " took " + string(◆戦闘／ＤＭ) + " damage.";
	if (◆死んだよ == 1)
	{
		◆戦闘ログ２ += " (incapacitated)";
	}
	if (◆死んだ直後に蘇生したよ == 1)
	{
		◆戦闘ログ２ += " (Hanny Zippo)";
	}
	if (◆ぴよりました == 1 && ◆死んだよ == 0)
	{
		◆戦闘ログ２ += " (Stun)";
	}
	◆戦闘ログ２ += ◆ログ２追加;
	if (◆暗殺発動 == 2)
	{
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " avoided assassination.";
	}
	行動終了処理(iic1, iic2, iis);
	return ◆戦闘／ＤＭ;
}

int Ｔ魔法攻撃行動(int iic1, int iic2, int iis)
{
	◆行動タイプ = 2;
	◆ログ２追加 = "";
	lint aa = 0;
	lint aa2 = 0;
	lint bb = 0;
	lint cc = 0;
	lint iics = 0;
	lint iic_s = ＣＳ番号取得(iic1, iis, 0);
	lint ▲効果Ｘ = ＣＳ有無／ランク別効果(iic1, iis, 0);
	if (iic1 < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	◆戦闘ＥＦ = "";
	◆攻撃属性 = 0;
	◆ＥＦ固定 = 0;
	◆行動前にぴより中 = 0;
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔ魔法攻撃行動（" + Ｃ短縮名前(iic1, "") + "　→　" + Ｃ短縮名前(iic2, "") + "）\n");
		LOG_TADA("　　スキル名＝" + Ｓ名前(iis, "") + "　倍率(" + string(Ｓ倍率(iis, -1)) + ")付与(" + string(Ｓ付与ダメージ(iis, -1)) + ")上限(" + string(Ｓダメージ上限(iis, -1)) + ")(" + 属性文字列(Ｓ属性(iis, -1)) + ")");
		if (Ｓ機能(iis, -1) != 0)
		{
			LOG_TADA("　機能：" + 機能文字列(Ｓ機能(iis, -1), ▲効果Ｘ));
		}
		LOG_TADA("\n");
	}
	◆変化初期化();
	if (◆敵側行動 == 1)
	{
		敵の一度使用処理(iic1, iis);
	}
	if (◆敵側行動 == 0)
	{
		味方の一度使用処理(iic1, iis);
	}
	if (◆敵側行動 == 0)
	{
		ＣＳ使用禁止切り替え(iic1, 2);
	}
	if (Ｃ状態変化(iic2, -1) == 2)
	{
		◆行動前にぴより中 = 1;
	}
	if (溜め計算(iic1, iic2, iis) == 1)
	{
		行動終了処理(iic1, iic2, iis);
		return 0;
	}
	if (◆敵側行動 == 0)
	{
		int ra = RAND(2);
		if (ra == 1)
		{
			Ｔ台詞生成(iic1, iis, "魔法名前");
		}
		if (ra == 2 && Ｓ大技(iis, -1) == 0)
		{
			Ｔ台詞生成(iic1, iis, "攻撃通常");
		}
		if (ra == 2 && Ｓ大技(iis, -1) == 1)
		{
			Ｔ台詞生成(iic1, iis, "攻撃大技");
		}
	}
	if (◆敵側行動 == 1 && Ｓ大技(iis, -1) == 1)
	{
		if (Ｃ台詞(iic1, 4, "") != "")
		{
			Ｔ台詞生成(iic1, iis, "攻撃大技");
		}
		if (Ｃ台詞(iic1, 4, "") == "")
		{
			Ｔ台詞生成(iic1, iis, "魔法名前");
		}
	}
	if (◆敵側行動 == 1 && Ｓ大技(iis, -1) == 0)
	{
		if (Ｃ台詞(iic1, 3, "") != "")
		{
			Ｔ台詞生成(iic1, iis, "攻撃通常");
		}
		if (Ｃ台詞(iic1, 3, "") == "")
		{
			Ｔ台詞生成(iic1, iis, "魔法名前");
		}
	}
	◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " " + ＣＳ表示文(iic1, iic_s, "");
	if (ＳＥＦ(iis, "") != "")
	{
		◆ＥＦ固定 = 1;
		◆戦闘ＥＦ = ＳＥＦ(iis, "");
	}
	if (ＳＥＦ(iis, "") == "")
	{
		◆ＥＦ固定 = 0;
		◆戦闘ＥＦ = "primarily physical damage";
		cc = Ｓ属性(iis, -1);
		if (cc == 5)
		{
			◆戦闘ＥＦ = "炎の矢02";
		}
		if (cc == 4)
		{
			◆戦闘ＥＦ = "氷の矢02";
		}
		if (cc == 3)
		{
			◆戦闘ＥＦ = "雷撃02";
		}
		if (cc == 1)
		{
			◆戦闘ＥＦ = "ライト02";
		}
		if (cc == 2)
		{
			◆戦闘ＥＦ = "アンコク02";
		}
	}
	if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 169 || Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 165)
	{
		aa = 40;
		if (ＰＴＡ総数() == 2 && ＰＴＡ有無／固有(1) != 0)
		{
			aa = 60;
		}
		if (iis == 193)
		{
			aa = 10;
		}
		if (iis == 198)
		{
			aa = 10;
		}
		if (iis == 186)
		{
			aa = 10;
		}
		if (確率演算(aa) == true)
		{
			◆行動回数回復 = 1;
		}
	}
	◆戦闘／ＤＭ = 0;
	◆戦闘／倍率 = 100;
	◆戦闘／最終追加倍率 = 100;
	魔法ダメージ計算(iic1, iic2, iis, "");
	魔法属性計算(iic1, iic2, iis, "");
	ダメージ補正計算(iic1, iic2, iis, "");
	if (iis == 183)
	{
		for (; ; )
		{
			if (Ｃ守護率(iic2, -1) != 0)
			{
				Ｃ守護率(iic2, 0);
				◆ログ２追加 += " (protection erased)";
				break;
			}
			if (Ｃ攻撃付与(iic2, -1) == 1 || Ｃ防御付与(iic2, -1) == 1)
			{
				Ｃ攻撃付与(iic2, 0);
				Ｃ防御付与(iic2, 0);
				◆付与変化あり = 1;
				◆ログ２追加 += " (Weakened)";
				break;
			}
			if (RAND(100) > Ｃ耐性率(iic2, -1) && 連続ぴより(iic2, 99) == 0)
			{
				◆ぴよりました = 1;
				連続ぴより(iic2, 1);
				Ｃ状態変化(iic2, 2);
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　　※ぴよりました\n");
				}
				if (Ｃ溜め(iic2, -1) != 0)
				{
					Ｃ溜め(iic2, 0);
					◆溜め解除されました = 1;
				}
				break;
			}
			break;
		}
	}
	最終ダメージ計算(iic1, iic2, iis, "");
	Ｃ体力(iic2, Ｃ体力(iic2, -1) - ◆戦闘／ＤＭ);
	if (◆戦闘／ＤＭ != 0)
	{
		ダメージ後計算(iic1, iic2, iis);
	}
	if (Ｃ体力(iic2, -1) == 0)
	{
		死亡計算(iic1, iic2, iis);
	}
	◆反射発動 = 0;
	if (Ｃ番号(iic2, -1) == 244 && Ｃ番号(iic1, -1) != 10 && ◆戦闘／ＤＭ != 0 && Ｃ体力(iic2, -1) != 0 && (Ｓ対象(iis, -1) == 1 || Ｓ対象(iis, -1) == 2))
	{
		◆反射発動 = ◆戦闘／ＤＭ;
		if (◆反射発動 >= Ｃ体力(iic1, -1))
		{
			◆反射発動 = Ｃ体力(iic1, -1) - 1;
		}
		◆戦闘ログ２ += " (damage reflection)";
	}
	◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " took " + string(◆戦闘／ＤＭ) + " damage.";
	if (◆死んだよ == 1)
	{
		◆戦闘ログ２ += " (incapacitated)";
	}
	if (◆死んだ直後に蘇生したよ == 1)
	{
		◆戦闘ログ２ += " (Hanny Zippo)";
	}
	if (◆ぴよりました == 1)
	{
		◆戦闘ログ２ += " (Stun)";
	}
	◆戦闘ログ２ += ◆ログ２追加;
	行動終了処理(iic1, iic2, iis);
	return ◆戦闘／ＤＭ;
}

int Ｔ特殊行動(int iic1, int iic2, int iis)
{
	int aa = 0;
	int ra = 0;
	lint csx = ＣＳ番号取得(iic1, iis, 0);
	◆行動タイプ = 3;
	◆変化初期化();
	敵の一度使用処理(iic1, iis);
	味方の一度使用処理(iic1, iis);
	ＣＳ使用禁止切り替え(iic1, 2);
	◆戦闘ＥＦ = "";
	◆攻撃属性 = 0;
	◆ＥＦ固定 = 0;
	if (iic1 < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	lint ▲効果Ｘ = ＣＳ有無／ランク別効果(iic1, iis, 0);
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔ特殊行動（" + Ｃ短縮名前(iic1, "") + "（" + Ｓ名前(iis, "") + "）　→　" + Ｃ短縮名前(iic2, "") + "）\n");
		if (Ｓ要溜め(iis, -1) == 1)
		{
			LOG_TADA("　　溜めが必要な攻撃です\n");
		}
		if (Ｓ機能(iis, -1) != 0)
		{
			LOG_TADA("　　" + 機能文字列(Ｓ機能(iis, -1), ▲効果Ｘ) + "\n");
		}
	}
	if (溜め計算(iic1, iic2, iis) == 1)
	{
		行動終了処理(iic1, iic2, iis);
		return 0;
	}
	Ｔ台詞生成(iic1, iis, "特殊");
	◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " " + ＣＳ表示文(iic1, csx, "");
	◆戦闘ログ２ = "";
	if (ＳＥＦ(iis, "") != "")
	{
		◆ＥＦ固定 = 1;
		◆戦闘ＥＦ = ＳＥＦ(iis, "");
	}
	if (iis == 149 && Ｃ悪口耐性(iic2, -1) != 0)
	{
		for (; ; )
		{
			if (Ｃ悪口耐性(iic2, -1) == 2 || RAND(3) == 1)
			{
				Ｃ体力(iic2, 0);
				Ｃ状態変化(iic2, 3);
				◆死んだよ = 1;
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " took abuse and committed suicide.";
				FA[335]++;
				break;
			}
			if (RAND(4) == 1 && 連続ぴより(iic2, 99) == 0)
			{
				Ｃ状態変化(iic2, 2);
				◆ぴよりました = 1;
				連続ぴより(iic2, 1);
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " was stunned by abuse.";
				break;
			}
			if (RAND(2) == 1)
			{
				Ｃ攻撃付与(iic2, 2);
				Ｃ防御付与(iic2, 2);
				◆付与変化あり = 1;
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " was shocked by abuse. (▼Attack)(▼Defense)";
				break;
			}
			break;
		}
	}
	if (iis == 200)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱点表示　開始\n");
		}
		◆弱点表示される = 1;
		Ｃ弱点把握(iic2, 1);
	}
	if (Ｓ機能(iis, -1) == 54)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱体付与（攻防）\n");
		}
		◆付与変化あり = 1;
		Ｃ攻撃付与(iic2, 2);
		Ｃ防御付与(iic2, 2);
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(▼Attack)(▼Defense)";
	}
	if (Ｓ機能(iis, -1) == 53)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱体付与（？）\n");
		}
		aa = RAND(2);
		if (aa == 2 && Ｃ防御付与(iic2, -1) == 2)
		{
			aa = 1;
		}
		if (aa == 1)
		{
			Ｃ攻撃付与(iic2, 2);
			◆付与変化あり = 1;
			aa = 9;
		}
		if (aa == 2)
		{
			Ｃ防御付与(iic2, 2);
			◆付与変化あり = 1;
			aa = 9;
		}
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " took on a weakness.";
	}
	if (Ｓ機能(iis, -1) == 55)
	{
		◆ターゲットにされた = 1;
		◆戦闘タゲ取り = iic2;
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " got the enemy's attention.";
	}
	if (iis == 449)
	{
		aa = 0;
		if (◆金 >= 200)
		{
			aa = ◆金 / (RAND(30) + 80);
		}
		◆戦闘ログ２ = " " + string(aa) + " Gold was stolen.";
		◆パチルに取られた金 += aa;
		お金減った(aa);
	}
	if (iis == 431)
	{
		int aa = Ｃ魔法力(iic1, -1);
		加減関数(Ｃ[iic2].ＥＸＰ, -aa);
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " will not receive experience for this battle.";
		if (◆敵側行動 == 1)
		{
			int ptano = ＰＴＡ番号取得(iic2);
			if (ptano != 0 && ptano < 6)
			{
				PTA_EXP無し[ptano] = 1;
			}
		}
	}
	if (Ｓ機能(iis, -1) == 59 && 連続ぴより(iic2, 99) == 0)
	{
		◆ぴよりました = 1;
		Ｃ状態変化(iic2, 2);
		連続ぴより(iic2, 1);
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Stun)";
	}
	if (iis == 422)
	{
		if (Ｃ番号(iic2, -1) == 1)
		{
			◆死んだよ = 1;
			Ｃ状態変化(iic2, 3);
			Ｃ体力(iic2, 0);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Instant death)";
		}
		if (Ｃ番号(iic2, -1) != 1 && Ｃ耐性率(iic2, -1) < 30 && 連続ぴより(iic2, 99) == 0 && (RAND(2) == 1 || Ｃ性別(iic2, -1) == 1))
		{
			◆付与変化あり = 1;
			Ｃ攻撃付与(iic2, 2);
			Ｃ防御付与(iic2, 2);
			◆ぴよりました = 1;
			Ｃ状態変化(iic2, 2);
			連続ぴより(iic2, 1);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Stun)";
		}
	}
	if (iis == 507)
	{
		if (確率演算(ＣＬＶ(iic1, -1)) == true)
		{
			◆ぴよりました = 1;
			Ｃ状態変化(iic2, 2);
			連続ぴより(iic2, 1);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Stun)";
		}
	}
	if (iis == 433)
	{
		aa = 0;
		if (Ｃ番号(iic2, -1) == 1)
		{
			aa = 1;
		}
		if (aa == 0)
		{
			◆毒りました = 1;
			Ｃ状態変化(iic2, 1);
			◆付与変化あり = 1;
			Ｃ攻撃付与(iic2, 2);
			Ｃ防御付与(iic2, 2);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Poison)(▼Attack)(▼Defense)";
		}
	}
	if (iis == 545)
	{
		◆毒りました = 1;
		Ｃ状態変化(iic2, 1);
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→(Poison)";
	}
	if (iis == 429 || iis == 430)
	{
		lint re = ＣＳランダムで使用済みにする(iic2);
		if (re != 0)
		{
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→" + Ｓ名前(ＣＳ番号(iic2, re, -1), "") + " cannot be used.";
		}
		if (re == 0)
		{
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + "→No effect";
		}
	}
	if (iis == 217)
	{
		int ▲成功 = 1;
		if (◆戦闘ランク == 2)
		{
			▲成功 = 0;
		}
		if (◆ボス戦 == 1)
		{
			▲成功 = 0;
		}
		if (FA[75] == 3)
		{
			▲成功 = 0;
		}
		if (▲成功 == 1)
		{
			◆戦闘ログ２ = " Relax, relax, it's over.→End";
			◆逃げた発動 = 1;
		}
		if (▲成功 == 0)
		{
			◆戦闘ログ２ = " Relax, relax, the fight will go on...";
		}
	}
	if (iis == 166 || iis == 451 || iis == 531)
	{
		lint ▲捕獲成功率 = 0;
		lint ▲対象体力率 = 0;
		▲対象体力率 = ％計算関数(Ｃ体力(iic2, -1), Ｃ体力最大(iic2, -1));
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　対象のＨＰは" + string(▲対象体力率) + "％\n");
		}
		▲捕獲成功率 = 0;
		if (▲対象体力率 < 50 && Ｃボス(iic2, -1) == 0 && ◆ボス戦 == 0)
		{
			▲捕獲成功率 = 80 - ▲対象体力率;
		}
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　基本成功率　" + string(▲捕獲成功率) + "％\n");
		}
		if (Ｃ状態変化(iic2, -1) == 2)
		{
			▲捕獲成功率 += 30;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　ぴよりなので　" + string(▲捕獲成功率) + "％\n");
			}
		}
		▲捕獲成功率 += ＣＳ有無／ランク別効果(iic1, 322, 0);
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　最終捕獲成功率　" + string(▲捕獲成功率) + "％　（知識＝" + string(ＣＳ有無／ランク別効果(iic1, 322, 0)) + "）\n");
		}
		if (Ｉクエスト倉庫は満杯ですか？() == 1)
		{
			▲捕獲成功率 = 0;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　条件不可　クエスト倉庫満タンです\n");
			}
		}
		if (Ｃ種族(iic2, -1) != 3)
		{
			▲捕獲成功率 = 0;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　条件不可　女の子モンスターではありません\n");
			}
		}
		if (Ｃ番号(iic2, -1) == 143)
		{
			▲捕獲成功率 = 0;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　条件不可　捕まえられない女の子モンスター\n");
			}
		}
		if (Ｃ番号(iic2, -1) == 221)
		{
			▲捕獲成功率 = 0;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　条件不可　捕まえられない女の子モンスター\n");
			}
		}
		if (◆戦闘ランク == 2)
		{
			▲捕獲成功率 = 0;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　条件不可　ボス戦なので捕まえられません\n");
			}
		}
		if (iis == 531 && ▲捕獲成功率 != 0)
		{
			▲捕獲成功率 = 75;
		}
		◆戦闘ログ１ += "(" + string2(▲捕獲成功率, 0) + "% chance)";
		int ▲成功 = 0;
		if (確率演算(▲捕獲成功率) == true && ◆戦闘後アイテム取得 == 0 && Ｉクエスト倉庫は満杯ですか？() == 0)
		{
			▲成功 = 1;
		}
		if (▲成功 == 1)
		{
			if (Ｃ番号(iic2, -1) == 142)
			{
				◆戦闘後アイテム取得 = 227;
				◆戦闘後アイテム取得／女の子 = 8550;
			}
			if (Ｃ番号(iic2, -1) == 153)
			{
				◆戦闘後アイテム取得 = 228;
				◆戦闘後アイテム取得／女の子 = 8551;
			}
			if (Ｃ番号(iic2, -1) == 164)
			{
				◆戦闘後アイテム取得 = 229;
				◆戦闘後アイテム取得／女の子 = 8552;
			}
			if (Ｃ番号(iic2, -1) == 197)
			{
				◆戦闘後アイテム取得 = 230;
				◆戦闘後アイテム取得／女の子 = 8553;
			}
			if (Ｃ番号(iic2, -1) == 165)
			{
				◆戦闘後アイテム取得 = 231;
				◆戦闘後アイテム取得／女の子 = 8554;
			}
			if (Ｃ番号(iic2, -1) == 168)
			{
				◆戦闘後アイテム取得 = 232;
				◆戦闘後アイテム取得／女の子 = 8555;
			}
			if (Ｃ番号(iic2, -1) == 175)
			{
				◆戦闘後アイテム取得 = 233;
				◆戦闘後アイテム取得／女の子 = 8556;
			}
			if (Ｃ番号(iic2, -1) == 187)
			{
				◆戦闘後アイテム取得 = 234;
				◆戦闘後アイテム取得／女の子 = 8557;
			}
			if (Ｃ番号(iic2, -1) == 188)
			{
				◆戦闘後アイテム取得 = 235;
				◆戦闘後アイテム取得／女の子 = 8558;
			}
			if (Ｃ番号(iic2, -1) == 198)
			{
				◆戦闘後アイテム取得 = 236;
				◆戦闘後アイテム取得／女の子 = 8559;
			}
			if (Ｃ番号(iic2, -1) == 496)
			{
				◆戦闘後アイテム取得 = 236;
				◆戦闘後アイテム取得／女の子 = 8559;
			}
			if (Ｃ番号(iic2, -1) == 206)
			{
				◆戦闘後アイテム取得 = 237;
				◆戦闘後アイテム取得／女の子 = 8560;
			}
			if (Ｃ番号(iic2, -1) == 231)
			{
				◆戦闘後アイテム取得 = 238;
				◆戦闘後アイテム取得／女の子 = 8561;
			}
			if (Ｃ番号(iic2, -1) == 230)
			{
				◆戦闘後アイテム取得 = 239;
				◆戦闘後アイテム取得／女の子 = 8562;
			}
			if (Ｃ番号(iic2, -1) == 239)
			{
				◆戦闘後アイテム取得 = 240;
				◆戦闘後アイテム取得／女の子 = 8563;
			}
			if (Ｃ番号(iic2, -1) == 240)
			{
				◆戦闘後アイテム取得 = 241;
				◆戦闘後アイテム取得／女の子 = 8564;
			}
			if (Ｃ番号(iic2, -1) == 220)
			{
				◆戦闘後アイテム取得 = 242;
				◆戦闘後アイテム取得／女の子 = 8565;
			}
			if (Ｃ番号(iic2, -1) == 199)
			{
				◆戦闘後アイテム取得 = 243;
				◆戦闘後アイテム取得／女の子 = 8566;
			}
			if (Ｃ番号(iic2, -1) == 456)
			{
				◆戦闘後アイテム取得 = 244;
				◆戦闘後アイテム取得／女の子 = 8567;
			}
			if (◆戦闘後アイテム取得 == 0)
			{
				▲成功 = 0;
			}
			if (▲成功 == 1)
			{
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　　捕獲成功　" + Ｃ短縮名前(iic2, "") + "を捕まえた\n");
				}
				◆捕獲発動 = 1;
				◆戦闘ＥＦ = "捕獲・成功";
				Ｃ体力(iic2, 0);
				Ｃ状態変化(iic2, 3);
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " was captured.";
			}
		}
		if (▲成功 == 0)
		{
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　捕獲失敗　\n");
			}
			◆捕獲発動 = 2;
			◆戦闘ＥＦ = "捕獲・失敗";
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " escaped.";
		}
	}
	行動終了処理(iic1, iic2, iis);
	return 0;
}

int Ｔ補助行動(int iic1, int iic2, int iis)
{
	◆行動タイプ = 4;
	int dm = 0;
	int aa = 0;
	int bb = 0;
	int ra = 0;
	lint iic1_s = ＣＳ番号取得(iic1, iis, 0);
	lint ▲効果Ｘ = ＣＳ有無／ランク別効果(iic1, iis, 0);
	lint csx = ＣＳ番号取得(iic1, iis, 0);
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n＞Ｔ補助行動（" + Ｃ短縮名前(iic1, "") + "（" + Ｓ名前(iis, "") + "）　→　" + Ｃ短縮名前(iic2, "") + "）\n");
		if (Ｓ機能(iis, -1) != 0)
		{
			LOG_TADA("　　" + 機能文字列(Ｓ機能(iis, -1), ▲効果Ｘ) + "\n");
		}
	}
	◆変化初期化();
	敵の一度使用処理(iic1, iis);
	味方の一度使用処理(iic1, iis);
	ＣＳ使用禁止切り替え(iic1, 2);
	◆戦闘ＥＦ = "";
	◆攻撃属性 = 0;
	◆ＥＦ固定 = 0;
	if (iic1 < 6)
	{
		◆敵側行動 = 1;
	}
	else
	{
		◆敵側行動 = 0;
	}
	if (溜め計算(iic1, iic2, iis) == 1)
	{
		行動終了処理(iic1, iic2, iis);
		return 0;
	}
	if (◆敵側行動 == 0)
	{
		Ｔ台詞生成(iic1, iis, "補助");
	}
	if (◆敵側行動 == 1)
	{
		if (Ｃ台詞(iic1, 5, "") != "")
		{
			Ｔ台詞生成(iic1, iis, "補助");
		}
		if (Ｃ台詞(iic1, 5, "") == "")
		{
			Ｔ台詞生成(iic1, iis, "魔法名前");
		}
	}
	◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " " + ＣＳ表示文(iic1, csx, "");
	◆戦闘ログ２ = "";
	if (ＳＥＦ(iis, "") != "")
	{
		◆ＥＦ固定 = 1;
		◆戦闘ＥＦ = ＳＥＦ(iis, "");
	}
	if (iis == 213)
	{
		◆付与変化あり = 1;
		Ｃ防御付与(iic1, 1);
		◆戦闘ログ１ += " (Defense)";
	}
	if (iis == 239)
	{
		aa = 倍率計算関数(Ｃ攻撃力(iic1, -1), 120);
		Ｃ攻撃力(iic1, Ｃ攻撃力(iic1, -1) + aa);
	}
	if (iis == 212)
	{
		◆味方ガード率変化あり = 1;
		Ｃ守護率(iic1, Ｃ守護率(iic1, -1) + ▲効果Ｘ);
		◆付与変化あり = 1;
		Ｃ防御付与(iic1, 1);
		◆戦闘ログ１ += " (Protection rate up) (▲Defense/Resistance)";
	}
	if (iis == 235)
	{
		◆付与変化あり = 1;
		Ｃ攻撃付与(iic2, 1);
		◆戦闘ログ１ += " (▲Attack/Magic)";
	}
	if (iis == 236)
	{
		◆付与変化あり = 1;
		Ｃ防御付与(iic2, 1);
		◆戦闘ログ１ += " (▲Defense/Resistance)";
	}
	if (iis == 234)
	{
		◆付与変化あり = 1;
		Ｃ攻撃付与(iic2, 1);
		Ｃ防御付与(iic2, 1);
		◆戦闘ログ１ += " (▲Attack/Magic) (▲Defense/Resistance)";
	}
	if (iis == 214 || iis == 215)
	{
		◆隠密率変化あり = 1;
		Ｃ隠密率(iic1, 150);
		◆戦闘ログ１ += " (Spy Mode)";
	}
	if (iis == 595)
	{
		Ｃバリア(iic1, 1);
		◆戦闘ログ１ += " (Barrier Mode)";
	}
	if (iis == 216)
	{
		◆全体加護変化あり = 1;
		Ｃ全体加護(iic1, 1);
		◆戦闘ログ１ += " (Full party protection deployed)";
	}
	if (iis == 238)
	{
		◆カロリア硬質化中 = 1;
		◆戦闘ログ１ += " (Petrified)";
		ＣＳ全使用禁止(iic1);
	}
	if (iis == 250)
	{
		◆バリア変化あり = 1;
		Ｃバリア(iic1, Ｃバリア(iic1, -1) + 3);
		◆戦闘ログ１ += " (Barrier deployed)";
	}
	if (iis == 233)
	{
		◆付与変化あり = 1;
		Ｃ攻撃付与(iic2, 1);
		Ｃ防御付与(iic2, 1);
		◆戦闘ログ１ += " (▲Attack/Magic) (▲Defense/Resistance)";
		if (Ｃ体力(iic2, -1) < Ｃ体力最大(iic2, -1))
		{
			◆体力回復あり = Ｃ体力最大(iic2, -1) - Ｃ体力(iic2, -1);
			Ｃ体力(iic2, Ｃ体力最大(iic2, -1));
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered full HP.";
		}
	}
	if (Ｓ機能(iis, -1) == 48)
	{
		int ▲成立 = 0;
		if (Ｃ状態変化(iic2, -1) == 1 && (iis == 218 || iis == 219))
		{
			◆戦闘ＥＦ = "状態回復";
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered from poison.";
			◆状態回復あり = 1;
			Ｃ状態変化(iic2, 0);
			▲成立 = 1;
		}
		if (▲成立 == 0 && Ｃ番号(iic2, -1) == 22)
		{
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " was not affected.";
			LOG("     Note: Medicine does not affect Suzume because of her Drug Resistance.\n");
			▲成立 = 1;
		}
		if (▲成立 == 0)
		{
			aa = 0;
			if (Ｓ効果(iis, -1) == 1)
			{
				aa = Ｃ体力最大(iic2, -1) / 2;
			}
			if (Ｓ効果(iis, -1) == 2)
			{
				aa = Ｃ体力最大(iic2, -1) / 4;
			}
			if (iis == 218)
			{
				aa = ＣＬＶ(iic1, -1) * 10;
			}
			if (iis == 219)
			{
				aa = ＣＬＶ(iic1, -1) * 20;
			}
			if (Ｃ状態変化(iic2, -1) == 3)
			{
				aa = 0;
			}
			if (ＣＳ番号取得(iic2, 366, 0) != 0)
			{
				aa = 0;
			}
			if (aa != 0)
			{
				if (ＰＴＡ有無／固有(70) != 0 && ◆敵側行動 == 0)
				{
					aa = aa * 2;
				}
				◆体力回復あり = aa;
				Ｃ体力(iic2, Ｃ体力(iic2, -1) + aa);
			}
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered " + string(aa) + " HP.";
		}
	}
	if (iis == 498)
	{
		for (; ; )
		{
			if (Ｃ体力最大(iic2, -1) > Ｃ体力(iic2, -1))
			{
				aa = Ｃ魔法力(iic1, -1);
				◆体力回復あり = aa;
				Ｃ体力(iic2, Ｃ体力(iic2, -1) + aa);
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered " + string(aa) + " HP.";
				break;
			}
			if (Ｃ攻撃付与(iic2, -1) == 2)
			{
				◆付与変化あり = 1;
				Ｃ攻撃付与(iic2, 0);
				◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered " + string(aa) + " HP.";
				break;
			}
			if (Ｃ防御付与(iic2, -1) == 2)
			{
				◆付与変化あり = 1;
				Ｃ防御付与(iic2, 0);
				break;
			}
			break;
		}
	}
	if (Ｓ機能(iis, -1) == 74)
	{
		int ▲成立 = 0;
		if (▲成立 == 0)
		{
			aa = 倍率計算関数(Ｃ魔法力(iic1, -1), Ｓ効果(iis, -1));
			if (Ｓ効果(iis, -1) == 1)
			{
				aa = Ｃ体力最大(iic2, -1) / 2;
			}
			if (Ｓ効果(iis, -1) == 2)
			{
				aa = Ｃ体力最大(iic2, -1) / 4;
			}
			if (Ｓ効果(iis, -1) == 10)
			{
				aa = Ｃ体力最大(iic2, -1) / 5;
				if (aa < 300)
				{
					aa = 300;
				}
			}
			if (Ｃ状態変化(iic2, -1) == 3)
			{
				aa = 0;
			}
			if (ＣＳ番号取得(iic2, 366, 0) != 0)
			{
				aa = 0;
			}
			◆体力回復あり = aa;
			Ｃ体力(iic2, Ｃ体力(iic2, -1) + aa);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered " + string(aa) + " HP.";
		}
	}
	if (iis == 209)
	{
		if (Ｃ状態変化(iic2, -1) == 3)
		{
			Ｃ体力(iic2, 1);
			Ｃ状態変化(iic2, 0);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " revived.";
			◆戦闘ＥＦ = "蘇生";
			◆蘇生したよ = 1;
			◆体力回復あり = 1;
		}
	}
	if (iis == 227)
	{
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered status.";
		if (Ｃ攻撃付与(iic2, -1) == 2)
		{
			◆付与変化あり = 1;
			Ｃ攻撃付与(iic2, 0);
		}
		if (Ｃ防御付与(iic2, -1) == 2)
		{
			◆付与変化あり = 1;
			Ｃ防御付与(iic2, 0);
		}
		if (Ｃ状態変化(iic2, -1) == 3)
		{
			◆体力回復あり = Ｃ体力最大(iic2, -1) / 4;
			if (◆体力回復あり == 0)
			{
				◆体力回復あり = 1;
			}
			Ｃ体力(iic2, ◆体力回復あり);
			◆戦闘ＥＦ = "蘇生";
			◆蘇生したよ = 1;
			Ｃ状態変化(iic2, 0);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " revived.";
		}
		if (Ｃ状態変化(iic2, -1) != 0)
		{
			◆状態回復あり = 1;
			Ｃ状態変化(iic2, 0);
		}
	}
	if (iis == 229)
	{
		if (Ｃ状態変化(iic2, -1) == 3)
		{
			◆体力回復あり = Ｃ体力最大(iic2, -1);
			Ｃ体力(iic2, Ｃ体力最大(iic2, -1));
			◆蘇生したよ = 1;
			Ｃ状態変化(iic2, 0);
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " revived.";
		}
	}
	if (iis == 237 || iis == 220)
	{
		if (Ｃ状態変化(iic2, -1) != 3)
		{
			if (Ｃ攻撃付与(iic2, -1) == 2)
			{
				◆付与変化あり = 1;
				Ｃ攻撃付与(iic2, 0);
			}
			if (Ｃ防御付与(iic2, -1) == 2)
			{
				◆付与変化あり = 1;
				Ｃ防御付与(iic2, 0);
			}
			if (Ｃ状態変化(iic2, -1) != 0)
			{
				◆状態回復あり = 1;
				Ｃ状態変化(iic2, 0);
			}
		}
	}
	if (iis == 232)
	{
		Ｃ補給／スキル(iic2, "舞姫");
		◆舞姫の対象者 = iic2;
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " may have become able to use a skill.";
	}
	if (iis == 230)
	{
		int ▲成功 = 0;
		if (Ｃ体力(iic2, -1) <= Ｃ体力最大(iic2, -1) / 2)
		{
			◆体力回復あり = Ｃ体力最大(iic2, -1);
			Ｃ体力(iic2, Ｃ体力最大(iic2, -1));
			◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " recovered " + string(Ｃ体力最大(iic2, -1)) + " HP.";
			▲成功 = 1;
		}
		if (▲成功 == 0)
		{
			iis = 384;
		}
	}
	if (iis == 506)
	{
		lint loop = 0;
		for (loop = 1; loop < 6; loop++)
		{
			if (PTB[loop] != 0 && Ｃ状態変化(PTB[loop], -1) != 3)
			{
				Ｃ防御力(PTB[loop], Ｃ防御力(PTB[loop], -1) + 200);
				Ｃ魔抵力(PTB[loop], Ｃ魔抵力(PTB[loop], -1) + 200);
				if (Ｃ防御付与(PTB[loop], -1) != 2)
				{
					◆付与変化あり = 1;
					Ｃ防御付与(iic2, 1);
				}
			}
		}
	}
	if (iis == 211)
	{
		ra = RAND(100);
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　逃げる確率＝" + string(◆逃げる確率) + " 乱数＝" + string(ra) + "\n");
		}
		◆逃げる発動 = 2;
		int loop = 0;
		for (loop = 1; loop < 6; ++loop)
		{
			if (PTB[loop] != 0 && Ｃ状態変化(PTB[loop], -1) != 3 && ＣＳ有無(PTB[loop], 437, 0) != 0)
			{
				◆逃げる確率 = 0;
			}
		}
		if (◆ボス戦 == 0 && ◆逃げる確率 >= ra)
		{
			◆逃げる発動 = 1;
			FA[37]++;
			FA[98]++;
			◆戦闘後アイテム取得 = 0;
		}
	}
	if (iis == 530)
	{
		◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " shuffled everyone's order.";
		◆戦闘ログ２ = "";
	}
	if (iis == 384)
	{
		◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " is standing by.";
		◆戦闘ログ２ = "";
	}
	行動終了処理(iic1, iic2, iis);
	return 0;
}

void ◆変化初期化()
{
	◆ダメージ数字サイズ = 0;
	◆攻撃外れた = 0;
	◆ぴよりました = 0;
	◆カウンター発動 = 0;
	◆毒りました = 0;
	◆押し出された = 0;
	◆毒ダメージ有り = 0;
	◆クリティカル出た = 0;
	◆死んだよ = 0;
	◆死んだ直後に蘇生したよ = 0;
	◆蘇生したよ = 0;
	◆行動回数回復 = 0;
	◆付与変化あり = 0;
	◆ターゲットにされた = 0;
	◆味方ガード率変化あり = 0;
	◆隠密率変化あり = 0;
	◆狂戦士変化あり = 0;
	◆全体加護変化あり = 0;
	◆バリア変化あり = 0;
	◆バリア割れる = 0;
	◆スキル消失 = 0;
	◆踏ん張り発動 = 0;
	◆状態回復あり = 0;
	◆体力回復あり = 0;
	◆ぴより治った = 0;
	◆行動パスです = 0;
	◆溜めになった = 0;
	◆溜め解除されました = 0;
	◆弱点表示される = 0;
	◆盾反らし発動 = 0;
	◆武器壊し発動 = 0;
	◆死の呪い発動 = 0;
	◆暗殺発動 = 0;
	◆全体加護発動 = 0;
	◆捕獲発動 = 0;
	◆逃げる発動 = 0;
	◆逃げた発動 = 0;
	◆舞姫の対象者 = 0;
	◆格下殺し発動 = 0;
	◆戦闘台詞 = "";
	◆戦闘台詞発声者 = 0;
	◆戦闘ログ１ = "";
	◆戦闘ログ２ = "";
}

void 行動終了処理(int iic1, int iic2, int iis)
{
	if (FA[342] == 1)
	{
		if (◆戦闘ログ１ != "")
		{
			LOG("　%s\n" % ◆戦闘ログ１);
		}
		if (◆戦闘ログ２ != "")
		{
			LOG("　%s\n" % ◆戦闘ログ２);
		}
	}
	lint iic_s = ＣＳ番号取得(iic1, iis, 0);
	if (ＣＳ条件(iic1, iic_s, -1) == 50)
	{
		ＣＳ確率(iic1, iic_s, 0);
	}
	if (iis == 416 && FA[273] == 0)
	{
		FA[273] = 1;
		LOG("     Hint: Uncle Bat's attacks won't affect those with 20+ Resilience or 100+ Evasion\n");
	}
}

void 命中前計算(lint iic1, lint iic2, int iis)
{
	lint aa = 0;
	lint iic_s = ＣＳ番号取得(iic1, iis, 0);
	if (Ｓ基本技(iis, -1) == 1)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 245, 0);
		if (確率演算(aa) == true)
		{
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　効率行動の発生確率＝" + string(aa) + "％\n");
			}
			◆行動回数回復 = 1;
		}
	}
	if (iis == 137)
	{
		ＣＳ全使用済み(iic1);
		◆スキル消失 = 1;
	}
}

int 命中計算(lint iic1, lint iic2, lint iis, string 条件)
{
	int aa = 0;
	int bb = 0;
	int ▲絶対に外れる = 0;
	◆ＡＡ = 0;
	aa = Ｃ命中率(iic1, -1);
	bb = Ｃ回避率(iic2, -1);
	if (Ｃ隠密率(iic2, -1) != 0)
	{
		bb += 30;
	}
	if (Ｃ隠密率(iic1, -1) != 0)
	{
		aa += 30;
	}
	if (Ｓ機能(iis, -1) == 57)
	{
		aa += Ｓ効果(iis, -1);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　瞬間命中ＵＰ発動　命中率＋" + string(Ｓ効果(iis, -1)) + "\n");
		}
	}
	if (Ｓ機能(iis, -1) == 58)
	{
		aa -= Ｓ効果(iis, -1);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　瞬間命中ＤＯＷＮ発動　命中率−" + string(Ｓ効果(iis, -1)) + "\n");
		}
	}
	if (iis == 114 || iis == 110 || iis == 104 || iis == 105)
	{
		aa -= 5;
	}
	if (iis == 115 || iis == 111 || iis == 106 || iis == 107)
	{
		aa -= 10;
	}
	if (iis == 581 || iis == 580 || iis == 578 || iis == 579)
	{
		aa -= 10;
	}
	if (Ｃタイプ(iic2, -1) == 16 && Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 5 && ＣＳ有無(iic1, 318, 0) != 0)
	{
		aa += 80;
		◆戦闘ログ１ += " (Increased accuracy against flying)";
	}
	aa = aa - bb;
	if (aa > 100)
	{
		aa = 100;
	}
	if (aa < 20 && ◆敵側行動 == 0)
	{
		aa = 20;
	}
	if (iis == 597 && aa > 50)
	{
		aa = 50;
	}
	if (iis == 597 && FA[349] == 1)
	{
		aa = 0;
	}
	if (◆敵側行動 == 1)
	{
		lint ▲最低命中率 = 40;
		if (Ｃ職業(iic2, -1) == 6)
		{
			▲最低命中率 = 20;
		}
		if (Ｃ職業(iic2, -1) == 2)
		{
			▲最低命中率 = 60;
		}
		if (PTA_連続回避[ＰＴＡ番号取得(iic2)] >= 0)
		{
			▲最低命中率 += PTA_連続回避[ＰＴＡ番号取得(iic2)] * 30;
		}
		if (aa < ▲最低命中率)
		{
			aa = ▲最低命中率;
		}
		lint ▲絶対回避率 = 100;
		if (Ｃ回避率(iic2, -1) >= 80)
		{
			▲絶対回避率 = 90;
		}
		if (Ｃ回避率(iic2, -1) >= 90)
		{
			▲絶対回避率 = 85;
		}
		if (Ｃ回避率(iic2, -1) >= 100)
		{
			▲絶対回避率 = 80;
		}
		if (aa > ▲絶対回避率)
		{
			aa = ▲絶対回避率;
			LOG_TADA("　　絶対回避率（" + string(aa) + "　　回避力＝" + string(Ｃ回避率(iic2, -1)) + "）\n");
		}
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 4 && aa > 85)
	{
		aa = 85;
	}
	if (Ｃ番号(iic2, -1) == 339 && aa >= 50)
	{
		aa = 50;
	}
	if ((Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 2 || Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 3) && Ｃ番号(iic2, -1) == 241)
	{
		aa = 0;
		▲絶対に外れる = 1;
		◆ログ２追加 += " (All sword and shortsword attacks can be completely avoided)";
	}
	if (Ｃ職業(iic1, -1) == 7 && (Ｃ番号(iic2, -1) == 376 || Ｃ番号(iic2, -1) == 377))
	{
		aa = 0;
		▲絶対に外れる = 1;
		◆ログ２追加 += " (All grappling attacks can be completely avoided)\n";
	}
	if (Ｃタイプ(iic2, -1) != 22 && iis == 146)
	{
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　※ターゲットが人型以外なので　０％\n");
		}
		aa = 0;
		▲絶対に外れる = 1;
	}
	if (ＰＴＡ有無／固有(91) != 0 && ◆敵側行動 == 0 && RAND(5) == 1)
	{
		◆ログ２追加 += " (Seven Misfortunes, Eight Pains!)\n";
		aa = 0;
		▲絶対に外れる = 1;
	}
	if (Ｓ機能(iis, -1) == 56)
	{
		aa = 100;
	}
	if (iis == 136)
	{
		aa = 100;
	}
	if (iis == 556)
	{
		aa = 50;
	}
	if (iis == 490 && Ｃ体力(iic2, -1) == Ｃ体力最大(iic2, -1))
	{
		aa = 100;
	}
	if (Ｓ機能(iis, -1) == 79)
	{
		aa = 100;
	}
	if (iis == 547)
	{
		aa = 100;
	}
	if (Ｃ状態変化(iic2, -1) == 2)
	{
		aa = 100;
	}
	if (FA[77] == 1)
	{
		aa = 100;
	}
	if (iis == 416)
	{
		if (Ｃ回避率(iic2, -1) >= 100)
		{
			aa = 0;
		}
		else
		{
			aa = 100;
		}
	}
	if (FA[40] == 1 && ◆敵側行動 == 0 && aa > 50)
	{
		aa = 100;
		if (条件 == "")
		{
			FA[40] = 0;
		}
	}
	if (▲絶対に外れる == 1)
	{
		aa = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　命中率（" + string(aa) + "）＝" + string(Ｃ命中率(iic1, -1)) + "−回避率（" + string(Ｃ回避率(iic2, -1)) + "）\n");
	}
	if (aa != 100 && iis != 416)
	{
		◆戦闘ログ１ += " (Accuracy = " + string(aa) + ")";
	}
	if (iis == 416 && aa == 0)
	{
		◆戦闘ログ１ += " (Safe with evasion over 100)";
	}
	if (iis == 416 && aa == 100)
	{
		◆戦闘ログ１ += " (Hit with evasion over 100)";
	}
	if (条件 == "模擬")
	{
		◆ＡＡ = aa;
		return 0;
	}
	if (確率演算(aa) == false)
	{
		◆攻撃外れた = 1;
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " evaded.";
		◆戦闘ログ２ += ◆ログ２追加;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　※外れました\n");
		}
		if (◆敵側行動 == 0)
		{
			FA[40] = 1;
			FA[119] = 0;
		}
		if (◆敵側行動 == 1)
		{
			PTA_連続回避[ＰＴＡ番号取得(iic2)]++;
		}
		return 0;
	}
	if (◆敵側行動 == 1)
	{
		PTA_連続回避[ＰＴＡ番号取得(iic2)] = 0;
	}
	if (iis == 597)
	{
		FA[349] = 1;
	}
	return 1;
}

void 物理ダメージ計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	lint bb = 0;
	lint cc = 0;
	aa = Ｃ攻撃力(iic1, -1);
	if (Ｓ倍率(iis, -1) != 100)
	{
		int ▲倍率 = 0;
		▲倍率 = Ｓ倍率(iis, -1);
		if (iis == 448 && FA[102] == 2)
		{
			▲倍率 = 100;
		}
		if (iis == 448 && FA[102] == 3)
		{
			▲倍率 = 0;
		}
		if (▲倍率 > 100)
		{
			◆戦闘／倍率 = ▲倍率;
			▲倍率 = 100;
		}
		aa = 倍率計算関数(aa, ▲倍率);
	}
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝技の倍率\n");
	}
	if (Ｓ付与ダメージ(iis, -1) != 0)
	{
		aa += Ｓ付与ダメージ(iis, -1);
	}
	if (Ｓ機能(iis, -1) == 77)
	{
		aa += Ｃ魔法力(iic1, -1);
	}
	bb = Ｃ防御力(iic2, -1);
	if (Ｓ機能(iis, -1) == 49)
	{
		bb = 0;
		◆戦闘ログ１ += " (Defense disabled)";
	}
	if (iis == 421)
	{
		bb = 0;
		◆戦闘ログ１ += " (Defense disabled)";
	}
	if (ＣＳ有無(iic1, 320, 0) != 0 && RAND(4) == 1)
	{
		bb = 0;
		◆戦闘ログ１ += " (Defense disabled)";
	}
	if (ＣＳ有無(iic2, 598, 0) != 0 && Ｃ攻撃力(iic1, -1) < 10000)
	{
		aa = 10;
		◆戦闘ログ２ += " (10,000 Wall)";
	}
	◆戦闘／ＤＭ = aa - bb;
	cc = 5;
	if (◆ワールド == 2)
	{
		cc = 4;
	}
	if (◆ワールド == 3)
	{
		cc = 4;
	}
	if (aa > 20 && ◆戦闘／ＤＭ < aa / cc)
	{
		◆戦闘／ＤＭ = aa / cc;
	}
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　ダメージ（" + string(◆戦闘／ＤＭ) + "）＝攻撃力（" + string(aa) + "）−防御力（" + string(bb) + "）\n");
	}
	if (条件 == "")
	{
		◆戦闘／ＤＭ = ゆらぎ関数(◆戦闘／ＤＭ, 5);
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　ダメージ(" + string(◆戦闘／ＤＭ) + "）＝ゆらぎ補正済み\n");
		}
	}
}

void 魔法ダメージ計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	lint bb = 0;
	lint cc = 0;
	aa = Ｃ魔法力(iic1, -1);
	if (Ｓ倍率(iis, -1) != 100)
	{
		int ▲倍率 = 0;
		▲倍率 = Ｓ倍率(iis, -1);
		if (▲倍率 > 100)
		{
			◆戦闘／倍率 = ▲倍率;
			▲倍率 = 100;
		}
		aa = 倍率計算関数(aa, ▲倍率);
	}
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝技の倍率\n");
	}
	if (Ｓ付与ダメージ(iis, -1) != 0)
	{
		aa += Ｓ付与ダメージ(iis, -1);
	}
	lint ▲マジカル = 0;
	lint ▲無駄撃ち = 0;
	if (ＣＳ有無(iic1, 571, 1) != 0)
	{
		▲マジカル = 倍率計算関数(aa, 30);
	}
	bb = Ｃ魔抵力(iic2, -1);
	if (Ｓ機能(iis, -1) == 49)
	{
		bb = 0;
	}
	if (bb == 9999)
	{
		aa = 0;
		◆戦闘ログ２ += " (Immune to magic)";
		if (Ｃ種族(iic2, -1) == 8 && 条件 == "")
		{
			ＣＦＡ(iic1, 27, ＣＦＡ(iic1, 27, -1) + 1);
		}
	}
	if (ＣＳ有無(iic2, 598, 0) != 0 && Ｃ魔法力(iic1, -1) < 10000)
	{
		aa = 10;
		◆戦闘ログ２ += " (10,000 Wall)";
	}
	◆戦闘／ＤＭ = aa - bb;
	if (Ｃ種族(iic2, -1) == 8 && ▲マジカル != 0)
	{
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　ハニー対象のマジカルダメージ＝" + string(▲マジカル) + "／　無駄撃ち回数＝" + string(ＣＦＡ(iic1, 27, -1)) + "\n");
		}
		◆戦闘／ＤＭ = ▲マジカル;
	}
	cc = 5;
	if (◆ワールド == 2)
	{
		cc = 4;
	}
	if (◆ワールド == 3)
	{
		cc = 4;
	}
	if (aa > 20 && ◆戦闘／ＤＭ < aa / cc)
	{
		◆戦闘／ＤＭ = aa / cc;
	}
	if (iis == 205 && (Ｃタイプ(iic2, -1) == 20 || Ｃタイプ(iic2, -1) == 21))
	{
		if (◆戦闘／ＤＭ * 2 <= Ｃ体力(iic2, -1))
		{
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		}
	}
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　ダメージ（" + string(◆戦闘／ＤＭ) + "）＝魔法力（" + string(aa) + "）−魔抵力（" + string(bb) + "）\n");
	}
	if (条件 == "")
	{
		◆戦闘／ＤＭ = ゆらぎ関数(◆戦闘／ＤＭ, 5);
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　ダメージ(" + string(◆戦闘／ＤＭ) + "）＝ゆらぎ補正済み\n");
		}
	}
}

void 物理属性計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	aa = 0;
	if (iis == 153)
	{
		aa = 1;
	}
	if (aa == 1)
	{
		return;
	}
	◆攻撃属性 = Ｉ機能取得(Ｃ武器(iic1, -1), 30);
	if (Ｓ属性(iis, -1) != 0)
	{
		◆攻撃属性 = Ｓ属性(iis, -1);
	}
	if (Ｃ弱点把握(iic2, -1) == 1 && Ｓ基本技(iis, -1) == 1 && FA[77] == 0)
	{
		if (ＣＳ有無(iic1, 254, 0) != 0 && Ｃ弱点属性(iic2, -1) == 5)
		{
			◆攻撃属性 = 5;
		}
		if (ＣＳ有無(iic1, 255, 0) != 0 && Ｃ弱点属性(iic2, -1) == 4)
		{
			◆攻撃属性 = 4;
		}
		if (ＣＳ有無(iic1, 256, 0) != 0 && Ｃ弱点属性(iic2, -1) == 3)
		{
			◆攻撃属性 = 3;
		}
	}
	if (Ｃ弱点把握(iic2, -1) == 1 && iis == 145 && FA[77] == 0)
	{
		if (ＣＳ有無(iic1, 331, 0) != 0 && Ｃ弱点属性(iic2, -1) == 5)
		{
			◆攻撃属性 = 5;
		}
		if (ＣＳ有無(iic1, 332, 0) != 0 && Ｃ弱点属性(iic2, -1) == 4)
		{
			◆攻撃属性 = 4;
		}
		if (ＣＳ有無(iic1, 333, 0) != 0 && Ｃ弱点属性(iic2, -1) == 3)
		{
			◆攻撃属性 = 3;
		}
		if (ＣＳ有無(iic1, 334, 0) != 0 && Ｃ弱点属性(iic2, -1) == 1)
		{
			◆攻撃属性 = 1;
		}
		if (ＣＳ有無(iic1, 335, 0) != 0 && Ｃ弱点属性(iic2, -1) == 2)
		{
			◆攻撃属性 = 2;
		}
	}
	if (◆攻撃属性 != 0 && ◆攻撃属性 == Ｃ弱点属性(iic2, -1))
	{
		◆戦闘ログ１ += " (Attribute weakness)";
		◆戦闘／最終追加倍率 += 50;
		◆ダメージ数字サイズ = 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］ 弱点（" + 属性文字列(◆攻撃属性) + "）を付き　ダメージ１．５倍＝\n");
		}
	}
	if (◆ＥＦ固定 == 0 && ◆攻撃属性 != 0)
	{
		if (◆攻撃属性 == 5)
		{
			◆戦闘ＥＦ += "・炎";
		}
		if (◆攻撃属性 == 4)
		{
			◆戦闘ＥＦ += "・氷";
		}
		if (◆攻撃属性 == 3)
		{
			◆戦闘ＥＦ += "・雷";
		}
		if (◆攻撃属性 == 1)
		{
			◆戦闘ＥＦ += "・光";
		}
		if (◆攻撃属性 == 2)
		{
			◆戦闘ＥＦ += "・闇";
		}
	}
	if (◆攻撃属性 == 5 && ＣＳ番号取得(iic1, 326, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 326, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝炎の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 4 && ＣＳ番号取得(iic1, 327, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 327, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝氷の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 3 && ＣＳ番号取得(iic1, 328, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 328, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝雷の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 1 && ＣＳ番号取得(iic1, 329, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 329, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝光の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 2 && ＣＳ番号取得(iic1, 330, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 330, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝闇の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 2)
	{
		FA[141] = 11;
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 3)
	{
		FA[141] = 12;
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 4)
	{
		FA[141] = 13;
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 7)
	{
		FA[141] = 14;
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 5)
	{
		FA[141] = 15;
	}
	return;
}

void 魔法属性計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	lint bb = 0;
	◆攻撃属性 = Ｓ属性(iis, -1);
	if (◆攻撃属性 != 0 && ◆攻撃属性 == Ｃ弱点属性(iic2, -1))
	{
		◆戦闘／最終追加倍率 += 50;
		◆ダメージ数字サイズ = 2;
		◆戦闘ログ２ += " (weakness = " + 属性文字列(◆攻撃属性) + ")";
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝弱点（" + 属性文字列(◆攻撃属性) + "）　ダメージ１．５倍\n");
		}
	}
	int ▲攻撃属性／武器 = Ｉ機能取得(Ｃ武器(iic1, -1), 30);
	if (◆攻撃属性 == ▲攻撃属性／武器)
	{
		◆戦闘／倍率 += 20;
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝武器の属性と魔法の属性が同じで　１．２倍\n");
		}
	}
	if (◆攻撃属性 == 5 && ＣＳ番号取得(iic1, 326, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 326, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝炎の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 4 && ＣＳ番号取得(iic1, 327, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 327, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝氷の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 3 && ＣＳ番号取得(iic1, 328, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 328, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝雷の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 1 && ＣＳ番号取得(iic1, 329, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 329, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝光の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (◆攻撃属性 == 2 && ＣＳ番号取得(iic1, 330, 0) != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 330, 0);
		◆戦闘／倍率 += aa;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝闇の知識の効果により＋" + string(aa) + "％\n");
		}
	}
	if (条件 == "")
	{
		FA[141] = ◆攻撃属性;
	}
	return;
}

void ダメージ補正計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	lint bb = 0;
	if (Ｃ攻撃付与(iic1, -1) == 1)
	{
		◆戦闘／倍率 += 30;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝攻撃付与　▲　効果発生(１．３倍）\n");
		}
	}
	if (Ｃ攻撃付与(iic1, -1) == 2)
	{
		◆戦闘／倍率 -= 30;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝攻撃付与　▽　効果発生(０．７倍）\n");
		}
	}
	if (Ｃ防御付与(iic2, -1) == 1)
	{
		◆戦闘／倍率 -= 30;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝防御付与　▲　効果発生(０．７倍）\n");
		}
	}
	if (Ｃ防御付与(iic2, -1) == 2)
	{
		◆戦闘／倍率 += 30;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝防御付与　▽　効果発生(１．３倍）\n");
		}
	}
	if (Ｃ状態変化(iic2, -1) == 2 && ◆行動タイプ == 1)
	{
		◆戦闘／倍率 += 50;
		◆ダメージ数字サイズ = 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝ぴより中に付きダメージ１．５倍\n");
		}
		◆ログ２追加 += " (higher damage while stunned)";
	}
	if (Ｃ状態変化(iic2, -1) == 1 && iis == 424)
	{
		◆戦闘／倍率 += 400;
		if (◆ワールド == 3)
		{
			◆戦闘／倍率 += 400;
		}
		◆ダメージ数字サイズ = 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝ナスの毒\n");
		}
		◆戦闘ログ１ += " (higher damage while poisoned)";
		MM[31] = 1;
	}
	if (FA[75] == 3 && iis == 125)
	{
		◆戦闘／倍率 += 150;
		◆ダメージ数字サイズ = 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝幻夢剣＝ボスに効果有り\n");
		}
		◆戦闘ログ１ += " (extra effective against bosses)";
	}
	if (Ｃ性別(iic2, -1) == 1 && iis == 427)
	{
		◆戦闘／倍率 += 200;
		◆ダメージ数字サイズ = 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝カニパンチ　男ちんこ直撃\n");
		}
		◆戦闘ログ１ += " (direct hit between the legs)";
	}
	if (iis == 205)
	{
		if (Ｃタイプ(iic2, -1) == 20 || Ｃタイプ(iic2, -1) == 21)
		{
			◆戦闘／倍率 = 200;
			◆ダメージ数字サイズ = 2;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝霊体、ゾンビに効果大\n");
			}
			◆戦闘ログ１ += " (extra effective against spirits, zombies)";
		}
		else
		{
			◆戦闘／倍率 = 30;
			◆ダメージ数字サイズ = 1;
		}
	}
	if (iis == 177 && Ｃタイプ(iic2, -1) == 19)
	{
		◆戦闘／倍率 += 200;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝軟体に効果大\n");
		}
		◆戦闘ログ１ += " (extra effective against molluscs)";
		◆ダメージ数字サイズ = 2;
	}
	if (Ｃ隠密率(iic1, -1) != 0)
	{
		◆戦闘ログ１ += " (Surprise attack effect = " + string(Ｃ隠密率(iic1, -1)) + ")";
		◆戦闘／倍率 += Ｃ隠密率(iic1, -1);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝隠密中に付き＋" + string(aa) + "\n");
		}
	}
	if (ＣＳ有無(iic2, 303, 0) != 0 && ◆行動タイプ == 1)
	{
		◆戦闘／倍率 += 50;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝※物理弱点　発動（防御側）\n");
		}
		◆ログ２追加 += " (Physical = weakness)";
	}
	if (ＣＳ有無(iic2, 304, 0) != 0 && ◆行動タイプ == 2)
	{
		◆戦闘／倍率 += 50;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝※魔法弱点　発動（防御側）\n");
		}
		◆ログ２追加 = " (Magic = weakness)";
	}
	bb = 0;
	aa = 0;
	if (ＣＩ武器の弱点効果の有無(iic1, Ｃタイプ(iic2, -1)) == 1)
	{
		bb = 1;
		aa = Ｃタイプ(iic2, -1);
	}
	if (ＣＩ武器の弱点効果の有無(iic1, Ｃ種族(iic2, -1)) == 1)
	{
		bb = 1;
		aa = Ｃ種族(iic2, -1);
	}
	if (Ｃタイプ(iic2, -1) == 19 && Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 7 && ＣＳ有無(iic1, 317, 0) != 0)
	{
		bb = 2;
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 4 && ＣＳ有無(iic1, 316, 0) != 0 && (Ｃタイプ(iic2, -1) == 17 || Ｃ種族(iic2, -1) == 5))
	{
		bb = 3;
	}
	if (Ｃ種族(iic2, -1) == 11 && Ｃ番号(iic1, -1) == 25)
	{
		bb = 101;
	}
	if (Ｃ種族(iic2, -1) == 8 && ＣＳ有無(iic1, 341, 0) != 0)
	{
		bb = 102;
	}
	if (Ｃ番号(iic2, -1) == 224 && ＣＳ有無(iic1, 342, 0) != 0)
	{
		bb = 103;
	}
	if (Ｃ番号(iic2, -1) == 211 && ＣＳ有無(iic1, 343, 0) != 0)
	{
		bb = 104;
	}
	if ((Ｃ番号(iic2, -1) == 215 || Ｃ番号(iic2, -1) == 173 || Ｃ番号(iic2, -1) == 439) && ＣＳ有無(iic1, 344, 0) != 0)
	{
		bb = 105;
	}
	if (Ｃ番号(iic2, -1) == 227 && ＣＳ有無(iic1, 345, 0) != 0)
	{
		bb = 106;
	}
	if (bb != 0)
	{
		◆ダメージ数字サイズ = 2;
		if (bb == 1)
		{
			◆戦闘／最終追加倍率 += 80;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］" + 機能文字列(31, aa) + "　１．８倍\n");
			}
			◆戦闘ログ１ += " (" + 機能文字列(31, aa) + ")";
		}
		if (bb == 2)
		{
			◆戦闘／最終追加倍率 += 80;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］槍系　軟体に効果有り\n");
			}
			◆戦闘ログ１ += " (extra effective against molluscs)";
		}
		if (bb == 3)
		{
			◆戦闘／最終追加倍率 += 80;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝槌系　割れ物に効果有り\n");
			}
			◆戦闘ログ１ += " (extra effective against breakable)";
		}
		if (bb == 101)
		{
			◆戦闘／最終追加倍率 += 400;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝カーマは古代種に強い\n");
			}
			◆戦闘ログ１ += " (specially increased effect against ancients)";
		}
		if (bb == 102)
		{
			◆戦闘／最終追加倍率 += 200;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝ハニーに対する攻撃知識\n");
			}
			◆戦闘ログ１ += " (known boss)";
		}
		if (bb == 103)
		{
			◆戦闘／最終追加倍率 += 200;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝ストーンＧに対する攻撃知識\n");
			}
			◆戦闘ログ１ += " (known boss)";
		}
		if (bb == 104)
		{
			◆戦闘／最終追加倍率 += 200;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝デカントに対する攻撃知識\n");
			}
			◆戦闘ログ１ += " (known boss)";
		}
		if (bb == 105)
		{
			◆戦闘／最終追加倍率 += 200;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝角くじらに対する攻撃知識\n");
			}
			◆戦闘ログ１ += " (known boss)";
		}
		if (bb == 106)
		{
			◆戦闘／最終追加倍率 += 200;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］＝ナイトホラーに対する攻撃知識\n");
			}
			◆戦闘ログ１ += " (known boss)";
		}
	}
	aa = 0;
	if (iis == 589)
	{
		aa = 1;
	}
	if (Ｓ機能(iis, -1) == 71)
	{
		aa = 1;
	}
	if (aa == 1 && Ｃ職業(iic2, -1) != 2)
	{
		◆戦闘／倍率 += 50;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝ガード以外ダメージ大\n");
		}
		◆戦闘ログ１ += " (strong against all but guards)";
		◆ダメージ数字サイズ = 2;
	}
	if (Ｃタイプ(iic2, -1) == 23 && ◆行動前にぴより中 == 0)
	{
		◆戦闘／倍率 = 5;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝鉄壁（ぴよりで無いと堅い）\n");
		}
		◆戦闘ログ２ += " (invincible)";
		◆ダメージ数字サイズ = 1;
	}
	if (Ｃ番号(iic2, -1) == 51 && ◆カロリア硬質化中 == 1)
	{
		◆戦闘ログ２ += " (petrified)";
		◆戦闘／倍率 = 20;
		◆ダメージ数字サイズ = 1;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝カロリア硬質化\n");
		}
	}
	if (ＣＳ有無(iic2, 305, 0) != 0)
	{
		◆戦闘／倍率 = ◆戦闘／倍率 / 2;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝※ダメージ半減　（特殊な敵の処理）\n");
		}
	}
	if (Ｃ番号(iic2, -1) == 455)
	{
		◆戦闘／倍率 = ◆戦闘／倍率 / 5;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝※ダメージ半減　（特殊な敵の処理）\n");
		}
	}
	if (ＣＳ有無(iic2, 275, 1) != 0 && ＰＴＡ総数() <= 3)
	{
		◆戦闘／倍率 = ◆戦闘／倍率 / 2;
		◆ダメージ数字サイズ = 1;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝※ダメージ半減　（ソロファイター）\n");
		}
	}
	if ((Ｃタイプ(iic2, -1) == 20 || ＣＳ有無(iic2, 366, 0) != 0) && Ｃ職業(iic1, -1) != 5 && ◆行動タイプ == 1)
	{
		aa = 1;
		if (ＣＩ武器機能の有無と効果(iic1, 31) == 20)
		{
			aa = 0;
		}
		if (ＣＳ有無(iic1, 345, 0) != 0 && Ｃ番号(iic2, -1) == 227)
		{
			aa = 0;
		}
		if (aa == 1)
		{
			◆戦闘／倍率 = ◆戦闘／倍率 / 3;
			◆ログ２追加 += " (less effective against spirits)";
			◆ダメージ数字サイズ = 1;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝霊体に物理は効きにくい\n");
			}
		}
	}
	if (ＣＳ有無(iic1, 481, 0) != 0 && Ｃ体力(iic1, -1) == 1)
	{
		◆戦闘／倍率 += 100;
		◆ダメージ数字サイズ = 2;
		◆戦闘ログ１ += " (damaged doubled at 1 HP)";
	}
	return;
}

void 衝撃計算(lint iic1, lint iic2, lint iis, string 条件)
{
	lint aa = 0;
	lint bb = 0;
	◆ＡＡ = 0;
	if (iis == 120 || iis == 448 || iis == 152)
	{
		return;
	}
	if (連続ぴより(iic2, 99) == 1)
	{
		return;
	}
	aa = Ｃ衝撃率(iic1, -1);
	if (Ｓ機能(iis, -1) == 59)
	{
		aa += Ｓ効果(iis, -1);
	}
	if (Ｃ隠密率(iic1, -1) != 0)
	{
		aa += 30;
	}
	if (Ｃ溜め(iic2, -1) != 0)
	{
		aa += 30;
	}
	bb = Ｃ耐性率(iic2, -1);
	aa = aa - bb;
	if (aa >= 75)
	{
		aa = 75;
	}
	if (bb == 100)
	{
		aa = 0;
	}
	if (Ｃ番号(iic2, -1) == 53)
	{
		aa = 100;
	}
	if (iis == 416)
	{
		if (Ｃ耐性率(iic2, -1) >= 20)
		{
			aa = 0;
		}
	}
	if (ＣＳ有無(iic1, 355, 1) != 0 && (Ｃ種族(iic2, -1) == 4 || Ｃ種族(iic2, -1) == 5))
	{
		aa = 80;
	}
	if (Ｃバリア(iic2, -1) != 0)
	{
		aa = 0;
	}
	if (◆戦闘補正／元気バリア == 1)
	{
		aa = 0;
	}
	if (aa != 0 && iis != 416)
	{
		◆戦闘ログ１ += " (Stun rate = " + string(aa) + ")";
	}
	if (iis == 416 && aa == 0 && Ｃバリア(iic2, -1) == 0)
	{
		◆戦闘ログ１ += " (Only stuns foes with more than 20 Resilience)";
	}
	if (iis == 416 && aa == 100)
	{
		◆戦闘ログ１ += " (Stuns foes with less than 20 Resilience)";
	}
	if (条件 == "模擬")
	{
		◆ＡＡ = aa;
		return;
	}
	if (確率演算(aa) == true)
	{
		◆ぴよりました = 1;
		連続ぴより(iic2, 1);
		Ｃ状態変化(iic2, 2);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　※ぴよりました　（" + string(aa) + "）\n");
		}
		if (Ｃ溜め(iic2, -1) != 0)
		{
			Ｃ溜め(iic2, 0);
			◆溜め解除されました = 1;
		}
	}
}

void 毒計算(lint iic1, lint iic2, lint iis)
{
	if (Ｃ状態変化(iic2, -1) == 2)
	{
		return;
	}
	if (Ｃ状態変化(iic2, -1) == 0)
	{
		lint aa = 0;
		lint bb = 0;
		if (iis == 424)
		{
			bb = 60;
		}
		if (iis == 404)
		{
			bb = 50;
		}
		if (iis == 390)
		{
			bb = 50;
		}
		if (iis == 539)
		{
			bb = 80;
		}
		if (iis == 443)
		{
			bb = 80;
		}
		if (iis == 560)
		{
			bb = 80;
		}
		if (iis == 561)
		{
			bb = 80;
		}
		if (iis == 562)
		{
			bb = 80;
		}
		if (iis == 590)
		{
			bb = 100;
		}
		if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 118)
		{
			bb = 100;
			FA[337]++;
		}
		if (bb == 0)
		{
			bb = ＣＳ有無／ランク別効果(iic1, 264, 0);
		}
		if (iis == 120)
		{
			bb = 0;
		}
		if (Ｃ番号(iic2, -1) == 22)
		{
			bb = 0;
		}
		if (ＣＳ有無(iic2, 502, 0) != 0)
		{
			bb = 0;
		}
		if (Ｉ固有番号(Ｃ持ち物(iic2, -1), -1) == 195)
		{
			bb = 0;
		}
		if (Ｃバリア(iic2, -1) != 0)
		{
			bb = 0;
		}
		if (bb != 0)
		{
			◆戦闘ログ１ += " (Poison = " + string(bb) + ")";
			if (確率演算(bb) == true)
			{
				◆戦闘ログ２ += " (Poison)";
				if (◆ＤＢ／戦闘ログ == 1)
				{
					LOG_TADA("　　※毒効果発動　発生率＝(" + string(bb) + ")％　\n");
				}
				Ｃ状態変化(iic2, 1);
				◆毒りました = 1;
			}
		}
	}
}

int クリティカル計算(lint iic1, lint iic2, lint iis, string 条件)
{
	int aa = Ｃ必殺率(iic1, -1);
	if (Ｃ隠密率(iic1, -1) != 0)
	{
		aa += 30;
	}
	if (Ｓ倍率(iis, -1) > 150)
	{
		aa = 0;
	}
	if (iis == 120)
	{
		aa = 0;
	}
	if (ＣＳ有無(iic1, 549, 0) != 0 && RAND(2) == 1 && (Ｃ種族(iic2, -1) == 4 || Ｃ性別(iic2, -1) == 1))
	{
		aa += 50;
	}
	if (ＰＴＡ有無／固有(91) != 0 && ◆敵側行動 == 1)
	{
		aa += 30;
	}
	if (aa != 0 && (Ｓ対象(iis, -1) == 3 || Ｓ対象(iis, -1) == 4 || FA[82] != 0))
	{
		aa = aa / 2;
	}
	if (確率演算(aa) == true)
	{
		◆クリティカル出た = 1;
		◆戦闘ログ１ += " (critical hit)";
		◆戦闘／倍率 += 30;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝クリティカル発生（１．３倍）\n");
		}
		return 1;
	}
	return 0;
}

int 溜め計算(lint iic1, lint iic2, lint iis)
{
	if (Ｓ要溜め(iis, -1) == 1)
	{
		if ((Ｃ溜め(iic1, -1) == 0 || ◆溜め実行フラグ == 1) && ◆溜め実行フラグ != 9)
		{
			◆溜めになった = 1;
			◆行動パスです = 1;
			◆溜め実行フラグ = 1;
			Ｃ溜め(iic1, iis);
			◆戦闘ログ１ = string(◆戦闘ターン) + ": " + Ｃ短縮名前(iic1, "") + " started preparing a special move.";
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　溜め開始・・" + Ｓ名前(iis, "") + "　\n");
			}
			return 1;
		}
		Ｃ溜め(iic1, 0);
		◆溜め実行フラグ = 9;
	}
	return 0;
}

void 最終ダメージ計算(lint iic1, lint iic2, lint iis, string 条件)
{
	int aa = 0;
	int bb = 0;
	int iicno = 0;
	if (Ｃバリア(iic2, -1) != 0)
	{
		◆戦闘／ＤＭ = 0;
		Ｃバリア(iic2, Ｃバリア(iic2, -1) - 1);
		◆バリア割れる = 1;
		◆ログ２追加 += " (Barrier expended)";
	}
	if (Ｃ番号(iic2, -1) == 257 && FA[88] != 1)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (immortal while bone exists)";
	}
	if (Ｃ番号(iic2, -1) == 321 && FA[88] != 1)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (immortal while spirit exists)";
	}
	if (Ｃ種族(iic1, -1) == 8 && Ｉ固有番号(Ｃ持ち物(iic2, -1), -1) == 214)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (invincible with Hanny Goods)";
	}
	if (◆行動タイプ == 2 && Ｃ番号(iic2, -1) == 12)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (invincible against magic)";
	}
	if (Ｃ職業(iic1, -1) != 7 && Ｃ番号(iic2, -1) == 425)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (reflected with elasticity)";
	}
	if (iis == 120)
	{
		◆戦闘／ＤＭ = 1;
	}
	if (Ｓ機能(iis, -1) == 79)
	{
		◆戦闘／ＤＭ = 1;
	}
	if (◆戦闘／ＤＭ == 0)
	{
		return;
	}
	if (◆行動タイプ == 1)
	{
		aa = ＣＳ有無／ランク別効果(iic2, 495, 0);
		if (aa != 0)
		{
			◆戦闘／最終追加倍率 -= aa;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］　物理耐性（−" + string(aa) + "）");
			}
		}
		if (ＣＩ武器機能の有無と効果(iic2, 86) != 0 || ＣＩ防具機能の有無と効果(iic2, 86) != 0 || ＣＩ防具機能の有無と効果(iic2, 90) != 0)
		{
			◆戦闘／最終追加倍率 -= 20;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］　防具の物理耐性（−２０）");
			}
		}
	}
	if (◆行動タイプ == 2)
	{
		aa = ＣＳ有無／ランク別効果(iic2, 496, 0);
		if (aa != 0)
		{
			◆戦闘／最終追加倍率 -= aa;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］　魔法耐性（−" + string(aa) + "）");
			}
		}
		if (ＣＩ武器機能の有無と効果(iic2, 87) != 0 || ＣＩ防具機能の有無と効果(iic2, 87) != 0 || ＣＩ防具機能の有無と効果(iic2, 90) != 0)
		{
			◆戦闘／最終追加倍率 -= 20;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］　防具の魔法耐性（−２０）");
			}
		}
	}
	aa = Ｃ炎耐性(iic2, -1);
	if (◆攻撃属性 == 5 && aa != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 100 - aa);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝炎耐性　" + string(aa) + "％\n");
		}
		if (aa >= 40)
		{
			◆ダメージ数字サイズ = 1;
		}
		◆ログ２追加 += " (strong against attribute)";
	}
	aa = Ｃ氷耐性(iic2, -1);
	if (◆攻撃属性 == 4 && aa != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 100 - aa);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝氷耐性　" + string(aa) + "％\n");
		}
		if (aa >= 40)
		{
			◆ダメージ数字サイズ = 1;
		}
		◆ログ２追加 += " (strong against attribute)";
	}
	aa = Ｃ雷耐性(iic2, -1);
	if (◆攻撃属性 == 3 && aa != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 100 - aa);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝雷耐性　" + string(aa) + "％\n");
		}
		if (aa >= 40)
		{
			◆ダメージ数字サイズ = 1;
		}
		◆ログ２追加 += " (strong against attribute)";
	}
	aa = Ｃ光耐性(iic2, -1);
	if (◆攻撃属性 == 1 && aa != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 100 - aa);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝光耐性　" + string(aa) + "％\n");
		}
		if (aa >= 40)
		{
			◆ダメージ数字サイズ = 1;
		}
		◆ログ２追加 += " (strong against attribute)";
	}
	aa = Ｃ闇耐性(iic2, -1);
	if (◆攻撃属性 == 2 && aa != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 100 - aa);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝闇耐性　" + string(aa) + "％\n");
		}
		if (aa >= 40)
		{
			◆ダメージ数字サイズ = 1;
		}
		◆ログ２追加 += " (strong against attribute)";
	}
	if (◆攻撃属性 == 1 && Ｃ番号(iic2, -1) == 42)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 20);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝デコにより光耐性　−８０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (reflected with forehead)";
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 2 && ＣＳ有無(iic2, 476, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 10);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝剣耐性　９０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against sword attacks)";
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 3 && ＣＳ有無(iic2, 477, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 10);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝短剣耐性　９０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against shortsword attacks)";
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 4 && ＣＳ有無(iic2, 478, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 10);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝槌耐性　９０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against hammer attacks)";
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 7 && ＣＳ有無(iic2, 479, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 10);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝槍耐性　９０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against spear attacks)";
	}
	if (Ｉ種類詳細(Ｃ武器(iic1, -1), -1) == 5 && ＣＳ有無(iic2, 480, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 10);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　［" + string(◆戦闘／倍率) + "］＝弓耐性　９０％\n");
		}
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against bow attacks)";
	}
	if ((Ｓ対象(iis, -1) == 3 || Ｓ対象(iis, -1) == 4) && ＣＳ有無(iic2, 582, 0) != 0)
	{
		◆戦闘／倍率 = 倍率計算関数(◆戦闘／倍率, 30);
		◆ダメージ数字サイズ = 1;
		◆ログ２追加 += " (strong against all attacks)";
	}
	if (ＣＳ有無(iic1, 570, 0) != 0 && Ｃ体力最大(iic2, -1) / 5 > Ｃ体力(iic2, -1))
	{
		◆戦闘／倍率 += 20;
	}
	if (◆戦闘／倍率 >= 800)
	{
		◆戦闘／倍率 = 800;
	}
	◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, ◆戦闘／倍率);
	if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
	{
		LOG_TADA("　　ダメージ(" + string(◆戦闘／ＤＭ) + ")＝ダメージ倍率(" + string(◆戦闘／倍率) + ")％\n");
	}
	lint ▲ダメージ上限 = Ｓダメージ上限(iis, -1);
	if (iis == 460 && ◆ワールド == 3 && RAND(2) == 1)
	{
		▲ダメージ上限 = 0;
	}
	if (▲ダメージ上限 != 0)
	{
		aa = ＣＳ有無／ランク別効果(iic1, 289, 0);
		if (aa != 0)
		{
			▲ダメージ上限 = 倍率計算関数(▲ダメージ上限, 100 + aa);
		}
		if (◆戦闘／ＤＭ > ▲ダメージ上限)
		{
			lint ◆戦闘／ＤＭ0 = 0;
			lint ◆戦闘／ＤＭ1 = 0;
			lint ◆戦闘／ＤＭ2 = 0;
			◆戦闘／ＤＭ0 = 0;
			◆戦闘／ＤＭ1 = 0;
			◆戦闘／ＤＭ2 = 0;
			◆戦闘／ＤＭ0 = ▲ダメージ上限;
			◆戦闘／ＤＭ1 = ◆戦闘／ＤＭ - ▲ダメージ上限;
			if (◆戦闘／ＤＭ1 > ▲ダメージ上限)
			{
				◆戦闘／ＤＭ1 = ▲ダメージ上限;
			}
			◆戦闘／ＤＭ2 = ◆戦闘／ＤＭ - ▲ダメージ上限 * 2;
			if (◆戦闘／ＤＭ1 != 0)
			{
				◆戦闘／ＤＭ1 = ◆戦闘／ＤＭ1 / 2;
			}
			if (◆戦闘／ＤＭ2 != 0)
			{
				◆戦闘／ＤＭ2 = ◆戦闘／ＤＭ2 / 4;
			}
			◆戦闘／ＤＭ = ◆戦闘／ＤＭ0 + ◆戦闘／ＤＭ1 + ◆戦闘／ＤＭ2;
			if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
			{
				LOG_TADA("　　ダメージ＝" + string(◆戦闘／ＤＭ) + "　（ダメージ上限：" + string(▲ダメージ上限) + "）による補正\n");
			}
		}
	}
	lint a1 = 0;
	lint a2 = 0;
	lint a3 = 0;
	if (ＣＦＡ(iic1, 4, -1) == 2)
	{
		a1 = 50;
		a2 = 100;
		a3 = 200;
	}
	if (ＣＦＡ(iic1, 4, -1) == 3)
	{
		a1 = 100;
		a2 = 200;
		a3 = 300;
	}
	if (ＣＦＡ(iic1, 4, -1) == 4)
	{
		a1 = 100;
		a2 = 250;
		a3 = 400;
	}
	if (ＣＦＡ(iic1, 4, -1) == 5)
	{
		a1 = 100;
		a2 = 300;
		a3 = 500;
	}
	if (a1 != 0)
	{
		for (; ; )
		{
			if (◆戦闘／ＤＭ >= 1000)
			{
				◆戦闘／ＤＭ += a3;
				break;
			}
			if (◆戦闘／ＤＭ >= 500)
			{
				◆戦闘／ＤＭ += a2;
				break;
			}
			if (◆戦闘／ＤＭ >= 100)
			{
				◆戦闘／ＤＭ += a1;
				break;
			}
			break;
		}
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　ダメージ" + string(◆戦闘／ＤＭ) + "　ダメージボーナス付加\n");
		}
	}
	if (◆戦闘／ＤＭ != 0 && ◆戦闘補正／リセット効果 == 1)
	{
		◆戦闘／最終追加倍率 -= 20;
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　　→後付け倍率［" + string(◆戦闘／最終追加倍率) + "］　リセット効果\n");
		}
	}
	if (◆戦闘／最終追加倍率 != 100)
	{
		◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, ◆戦闘／最終追加倍率);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　ダメージ＝" + string(◆戦闘／ＤＭ) + "　（後付け倍率：" + string(◆戦闘／最終追加倍率) + "）\n");
		}
	}
	if (FA[82] != 0 && ◆敵側行動 == 0)
	{
		if (FA[82] == 2)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 80);
		}
		if (FA[82] == 3)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 70);
		}
		if (FA[82] == 4)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 60);
		}
		if (FA[82] >= 5)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 50);
		}
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　ダメージ" + string(◆戦闘／ＤＭ) + "　連撃補正（" + string(FA[82]) + "回目）\n");
		}
		FA[82]++;
	}
	if (◆ワールド == 3 && ◆行動タイプ == 2 && Ｓ対象(iis, -1) == 3 && ◆戦闘／ＤＭ > Ｃ体力最大(iic2, -1) / 2)
	{
		int ra = RAND(6);
		if (ra == 1)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 80);
		}
		if (ra == 2)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 85);
		}
		if (ra == 3)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 90);
		}
		if (ra == 4)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 110);
		}
	}
	if (FA[265] != 0 && ◆戦闘／ＤＭ >= 100 && ◆敵側行動 == 0)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　後方支援（" + string(FA[265]) + "）発動　" + string(◆戦闘／ＤＭ) + "→");
		}
		◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 100 + FA[265]);
		LOG_TADA(string(◆戦闘／ＤＭ) + "\n");
	}
	iicno = Ｃ番号(iic1, -1);
	if ((iicno == 9 || iicno == 86 || iicno == 85) && ◆戦闘／ＤＭ != 0)
	{
		aa = 1;
		if (ＰＴＡ有無／固有(9) == 0)
		{
			aa = 0;
		}
		if (ＰＴＡ有無／固有(86) == 0)
		{
			aa = 0;
		}
		if (ＰＴＡ有無／固有(85) == 0)
		{
			aa = 0;
		}
		if (aa == 1 && RAND(4) == 1)
		{
			◆戦闘／ＤＭ = 倍率計算関数(◆戦闘／ＤＭ, 200);
			◆戦闘ログ１ += " (△Attack)";
			◆ダメージ数字サイズ = 2;
		}
	}
	if (◆戦闘／ＤＭ > 10 && ＰＴＢ総数("") == 1)
	{
		if (ＣＳ有無(iic1, 586, 0) != 0)
		{
			◆戦闘／ＤＭ = ◆戦闘／ＤＭ * 3;
		}
		if (ＣＳ有無(iic2, 586, 0) != 0)
		{
			◆戦闘／ＤＭ = ◆戦闘／ＤＭ / 3;
		}
	}
	if (◆敵側行動 == 0)
	{
		if (Ｓ行動種類(iis, -1) == 1 && FA[306] < ◆戦闘／ＤＭ)
		{
			FA[306] = ◆戦闘／ＤＭ;
		}
		if (Ｓ行動種類(iis, -1) == 2 && FA[307] < ◆戦闘／ＤＭ)
		{
			FA[307] = ◆戦闘／ＤＭ;
		}
	}
	if (Ｓ機能(iis, -1) == 46 && ◆戦闘／ＤＭ >= Ｃ体力(iic2, -1))
	{
		◆戦闘ログ１ += " (Light attack)";
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1) - 1;
	}
	if (iis == 519)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1) / 2;
		if (◆戦闘／ＤＭ == 1)
		{
			◆戦闘／ＤＭ = 0;
		}
		if (Ｃボス(iic2, -1) == 1)
		{
			◆戦闘／ＤＭ = 0;
		}
	}
	if (◆戦闘／ＤＭ < 1000 && Ｃ番号(iic2, -1) == 354)
	{
		◆戦闘／ＤＭ = 0;
	}
	if (◆戦闘／ＤＭ > 1000 && Ｃ番号(iic2, -1) == 354)
	{
		◆戦闘／ＤＭ = 1000;
	}
	if (◆戦闘／ＤＭ > 5000 && Ｃ番号(iic2, -1) == 330)
	{
		◆戦闘／ＤＭ = 4000 + ◆戦闘／ＤＭ / 5;
	}
	if (◆戦闘／ＤＭ > 5000 && Ｃ番号(iic2, -1) == 376)
	{
		◆戦闘／ＤＭ = 4000 + ◆戦闘／ＤＭ / 5;
	}
	if (◆戦闘／ＤＭ > 5000 && Ｃ番号(iic2, -1) == 377)
	{
		◆戦闘／ＤＭ = 4000 + ◆戦闘／ＤＭ / 5;
	}
	if (◆戦闘／ＤＭ != 0 && ＣＳ有無(iic2, 502, 0) != 0)
	{
		for (; ; )
		{
			if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 100)
			{
				◆戦闘ログ１ += " (Invincibility effect removed)";
				if (条件 == "")
				{
					LOG("     Fiend's Invincibility Field broken (Chaos effect)\n");
				}
				if (条件 == "")
				{
					ＣＳ削除(iic2, 502);
				}
				break;
			}
			◆ログ２追加 += " (Invincibility effect activated)";
			◆戦闘／ＤＭ = 0;
			break;
		}
	}
	if (Ｃ種族(iic1, -1) == 8 && ＣＳ有無(iic2, 592, 0) != 0 && RAND(2) == 1)
	{
		◆戦闘／ＤＭ = 0;
		◆ログ２追加 += " (Invincible with haniwa barrier)";
	}
	if (iis != 500 && Ｓ機能(iis, -1) == 79)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
	}
	if (iis == 500 && Ｃ種族(iic2, -1) != 6 && Ｃ種族(iic2, -1) != 12 && Ｃ種族(iic2, -1) != 7 && Ｃタイプ(iic2, -1) != 21)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
	}
	if (iis == 500 && Ｃ番号(iic2, -1) == 22)
	{
		◆戦闘／ＤＭ = Ｃ体力最大(iic2, -1) / 5;
	}
	if (ＣＳ有無(iic2, 306, 0) != 0 && ◆行動前にぴより中 == 1)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　※ぴより即死　発動（防御側）\n");
		}
		◆戦闘ログ１ += " (instant death while stunned)";
	}
	if (Ｓ機能(iis, -1) == 68 && ◆戦闘／ＤＭ != 0)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		if (Ｃ番号(iic2, -1) == 1)
		{
			◆戦闘／ＤＭ = 0;
		}
	}
	if (Ｓ機能(iis, -1) == 96 && ５で割り切りるか確認(ＣＬＶ(iic2, -1)) == 1 && ◆戦闘／ＤＭ != 0)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		◆戦闘ログ１ += "(５で割り切れるＬＶＬＶ＝即死)";
		MM[29] = 1;
	}
	aa = 26;
	if (◆ワールド == 2)
	{
		aa = 46;
	}
	if (◆ワールド == 3)
	{
		aa = 66;
	}
	if (Ｓ機能(iis, -1) == 69 && ＣＬＶ(iic2, -1) < aa && ◆戦闘／ＤＭ != 0)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		◆戦闘ログ１ += " (LV " + string(aa - 1) + " and under = instant death)";
		MM[29] = 1;
	}
	aa = 36;
	if (◆ワールド == 2)
	{
		aa = 66;
	}
	if (◆ワールド == 3)
	{
		aa = 86;
	}
	if (Ｓ機能(iis, -1) == 70 && ＣＬＶ(iic2, -1) < aa && ◆戦闘／ＤＭ != 0)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		◆戦闘ログ１ += " (LV " + string(aa - 1) + " and under = instant death)";
		MM[32] = 1;
	}
	aa = 101;
	if (Ｓ機能(iis, -1) == 93 && ＣＬＶ(iic2, -1) < aa && ◆戦闘／ＤＭ != 0)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		◆戦闘ログ１ += " (LV " + string(aa - 1) + " and under = instant death)";
		MM[32] = 1;
	}
	if (iis == 120)
	{
		◆暗殺発動 = 2;
		◆戦闘／ＤＭ = 0;
		aa = 40;
		if (Ｃタイプ(iic2, -1) == 22)
		{
			aa = 50;
		}
		if (Ｃ種族(iic2, -1) == 3)
		{
			aa = 50;
		}
		if (Ｃ種族(iic2, -1) == 13)
		{
			aa = 50;
		}
		if (Ｃ種族(iic2, -1) == 6)
		{
			aa = 20;
		}
		if (Ｃ種族(iic2, -1) == 7)
		{
			aa = 20;
		}
		if (Ｃ種族(iic2, -1) == 12)
		{
			aa = 20;
		}
		aa = aa + ＣＳ有無／ランク別効果(iic1, 325, 0);
		if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 84)
		{
			aa += 20;
		}
		if (◆ワールド >= 2 && aa >= 60)
		{
			aa = 60;
		}
		if (Ｃ隠密率(iic1, -1) != 0)
		{
			aa += 50;
		}
		if (Ｃボス(iic2, -1) != 0)
		{
			aa = 0;
		}
		if (◆バリア割れる == 1)
		{
			aa = 0;
		}
		if (◆ＤＢ／戦闘ログ == 1 && 条件 == "")
		{
			LOG_TADA("　　※暗殺成功確率　" + string(aa) + "\n");
		}
		◆戦闘ログ１ += " (Success rate = " + string(aa) + "%)";
		if (確率演算(aa) == true)
		{
			◆暗殺発動 = 1;
			◆戦闘ＥＦ = "暗殺成功";
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		}
	}
	if (iis == 594)
	{
		aa = 30;
		if (Ｃボス(iic2, -1) != 0)
		{
			aa = 0;
		}
		if (◆バリア割れる == 1)
		{
			aa = 0;
		}
		◆戦闘ログ１ += " (Success rate = " + string(aa) + "%)";
		if (確率演算(aa) == true)
		{
			◆暗殺発動 = 1;
			◆戦闘ＥＦ = "暗殺成功";
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1);
		}
	}
	if (iis == 547 && ◆戦闘／ＤＭ < 25000)
	{
		◆戦闘／ＤＭ = 25000;
	}
	if (iis == 590)
	{
		◆戦闘／ＤＭ = 1000;
		if (Ｃ体力(iic2, -1) < ◆戦闘／ＤＭ)
		{
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1) - 1;
		}
	}
	if (iis == 591 && Ｃ状態変化(iic2, -1) == 1 && Ｃ体力(iic2, -1) >= 2)
	{
		◆戦闘／ＤＭ = Ｃ体力(iic2, -1) - 1;
	}
	if (◆ワールド == 3 && ◆暗殺発動 == 0)
	{
		int no = Ｃ番号(iic2, -1);
		int ee = Ｃ体力最大(iic2, -1) / 3;
		if (◆戦闘／ＤＭ > ee && (no == 313 || no == 313 || no == 314))
		{
			◆戦闘／ＤＭ = ee;
			LOG_TADA("　特殊モンスターに付き　ダメージ１／３制限\n");
		}
		if (◆戦闘／ＤＭ > ee && (no == 234 || no == 234))
		{
			◆戦闘／ＤＭ = ee;
			LOG_TADA("　特殊モンスターに付き　ダメージ１／３制限\n");
		}
	}
	aa = 0;
	if (Ｓ対象(iis, -1) == 3)
	{
		aa = 1;
	}
	if (Ｓ対象(iis, -1) == 4)
	{
		aa = 1;
	}
	if (iis == 434)
	{
		aa = 1;
	}
	if (iis == 547)
	{
		aa = 1;
	}
	if (◆行動タイプ == 1 && ＣＳ有無／ランク別効果(iic2, 248, 0) >= RAND(100) && Ｃ状態変化(iic2, -1) == 0 && aa == 0)
	{
		◆戦闘／ＤＭ = 0;
		◆盾反らし発動 = 1;
		◆ログ２追加 += " (Shield Deflection activated)";
	}
	if (◆ｅａｓｙ／ダメージ == 1 && ◆戦闘／ＤＭ >= 2 && iic1 < 6)
	{
		◆戦闘／ＤＭ = ◆戦闘／ＤＭ / 2;
	}
	if (Ｃ体力(iic2, -1) <= ◆戦闘／ＤＭ && Ｃ体力(iic2, -1) != 1)
	{
		if (ＣＳ有無(iic2, 247, 1) != 0 && ◆踏ん張り使用済み == 0 && RAND(2) == 1)
		{
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1) - 1;
			◆ログ２追加 += " (Hold Out activated)";
			◆踏ん張り使用済み = 1;
			◆踏ん張り発動 = 1;
		}
		if (ＣＳ有無(iic2, 481, 0) != 0)
		{
			◆戦闘／ＤＭ = Ｃ体力(iic2, -1) - 1;
			◆ログ２追加 += " (Hold Out activated)";
		}
	}
	return;
}

void 死亡計算(lint iic1, lint iic2, lint iis)
{
	lint aa = 0;
	lint bb = 0;
	if (ＣＳ有無(iic2, 438, 0) != 0)
	{
		◆戦闘金持ち = 1;
	}
	◆死んだよ = 1;
	Ｃ状態変化(iic2, 3);
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　　※　！！　倒した　！！\n");
	}
	if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 156 && RAND(4) != 1)
	{
		◆行動回数回復 = 1;
	}
	if (ＣＳ有無(iic2, 291, 0) != 0)
	{
		aa = 0;
		if (ＣＳ有無(iic1, 365, 0) != 0)
		{
			aa = 1;
		}
		if (Ｃ番号(iic1, -1) == 84)
		{
			aa = 1;
		}
		if (Ｃ番号(iic1, -1) == 72)
		{
			aa = 1;
		}
		if (Ｃ番号(iic1, -1) == 26)
		{
			aa = 1;
		}
		if (aa == 0)
		{
			Ｃ攻撃付与(iic1, 2);
			Ｃ防御付与(iic1, 2);
			◆ログ２追加 += " (Kalar Curse activated)";
			MM[33] = 1;
			◆死の呪い発動 = 1;
		}
	}
	if (Ｃハニージッポ回数(iic2, -1) == 0 && ＣＳ有無(iic2, 302, 1) != 0)
	{
		Ｃハニージッポ回数(iic2, 1);
		◆死んだ直後に蘇生したよ = 1;
	}
}

void ダメージ後計算(lint iic1, lint iic2, lint iis)
{
	lint aa = 0;
	lint bb = 0;
	if (Ｃ隠密率(iic2, -1) != 0)
	{
		Ｃ隠密率(iic2, 0);
		◆ログ２追加 += " (Spy mode canceled)";
	}
	if (Ｃ全体加護(iic2, -1) == 1)
	{
		Ｃ全体加護(iic2, 0);
		◆ログ２追加 += " (Full party protection canceled)";
	}
	if (Ｃ隠密率(iic1, -1) != 0)
	{
		Ｃ隠密率(iic1, Ｃ隠密率(iic1, -1) - 50);
		if (RAND(2) == 1)
		{
			Ｃ隠密率(iic1, 0);
		}
	}
	aa = 0;
	if (Ｃ職業(iic2, -1) == 1 && Ｃ狂戦士(iic2, -1) == 0 && ＣＳ有無／ランク別効果(iic2, 273, 0) >= RAND(100) && FA[149] == 0)
	{
		FA[149] = 1;
		Ｃ狂戦士(iic2, 1);
		◆狂戦士変化あり = 1;
		◆ログ２追加 += " (Berserker activated)";
		Ｃ攻撃力(iic2, 倍率計算関数(Ｃ攻撃力(iic2, -1), 150));
		Ｃ防御力(iic2, 0);
		Ｃ魔抵力(iic2, 0);
		Ｃ回避率(iic2, 0);
		Ｃ戦闘後再計算(iic2, 1);
	}
	aa = 0;
	if (Ｓ機能(iis, -1) == 54)
	{
		aa = 1;
	}
	if (Ｓ機能(iis, -1) == 53)
	{
		aa = 2;
	}
	if (iis == 421 && ◆ワールド >= 3)
	{
		aa = 1;
	}
	if (iis == 554)
	{
		aa = 2;
	}
	if (aa == 1)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱体付与（攻防）\n");
		}
		◆付与変化あり = 1;
		Ｃ攻撃付与(iic2, 2);
		Ｃ防御付与(iic2, 2);
		◆ログ２追加 += " (▼Attack)(▼Defense)";
	}
	if (aa == 2)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱体付与（？）\n");
		}
		bb = RAND(2);
		if (bb == 2 && Ｃ防御付与(iic2, -1) == 2)
		{
			bb = 1;
		}
		if (bb == 1)
		{
			Ｃ攻撃付与(iic2, 2);
			◆付与変化あり = 1;
			bb = 9;
		}
		if (bb == 2)
		{
			Ｃ防御付与(iic2, 2);
			◆付与変化あり = 1;
			bb = 9;
		}
		◆戦闘ログ２ = " " + Ｃ短縮名前(iic2, "") + " received some sort of weakness.";
	}
	if (Ｓ機能(iis, -1) == 89)
	{
		◆付与変化あり = 1;
		if (Ｃ攻撃付与(iic2, -1) == 1)
		{
			Ｃ攻撃付与(iic2, 0);
		}
		if (Ｃ防御付与(iic2, -1) == 1)
		{
			Ｃ防御付与(iic2, 0);
		}
	}
	if (iis == 192)
	{
		Ｃ攻撃付与(iic2, 2);
		◆付与変化あり = 1;
		◆ログ２追加 += " (▼Attack)";
	}
	aa = 0;
	if (Ｃ職業(iic1, -1) == 3 && ＣＳ有無(iic1, 257, 0) != 0 && Ｓ基本技(iis, -1) == 1)
	{
		aa = 1;
	}
	if (iis == 515 && RAND(2) == 1)
	{
		aa = 1;
	}
	if (iis == 519)
	{
		aa = 1;
	}
	if (iis == 491)
	{
		aa = 1;
	}
	if (aa == 1)
	{
		if (Ｃ攻撃付与(iic2, -1) == 1)
		{
			Ｃ攻撃付与(iic2, 0);
			◆付与変化あり = 1;
			◆戦闘ログ２ += " (Attack buff canceled)";
		}
		if (Ｃ防御付与(iic2, -1) == 1)
		{
			Ｃ防御付与(iic2, 0);
			◆付与変化あり = 1;
			◆戦闘ログ２ += " (Defense buff canceled)";
		}
	}
	if (Ｃ番号(iic1, -1) == 17 && Ｃ回避率(iic2, -1) != 0)
	{
		Ｃ回避率(iic2, 0);
		◆ログ２追加 += " (Evasion = 0)";
	}
	if (iis == 143 && Ｃ防御力(iic2, -1) != 0)
	{
		aa = Ｃ防御力(iic2, -1) / 3;
		Ｃ防御力(iic2, aa * 2);
		if (Ｃ番号(iic2, -1) == 455 && Ｃ防御力(iic2, -1) < 3000)
		{
			Ｃ防御力(iic2, 3000);
			aa = 10;
		}
		◆ログ２追加 += " (Defense reduced by " + string2(aa, 0) + ")";
	}
	aa = 0;
	if (Ｃ職業(iic2, -1) == 2 && Ｓ対象(iis, -1) == 1 && ＣＳ有無／ランク別効果(iic2, 142, 0) >= RAND(100))
	{
		◆武器壊し発動 = 1;
		◆ログ２追加 += " (Weapon Breaker activated)";
		Ｃ攻撃力(iic1, 倍率計算関数(Ｃ攻撃力(iic1, -1), 80));
	}
	if (ＣＳ有無(iic1, 354, 1) != 0 && Ｃ弱点把握(iic2, -1) == 0)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　弱点表示　開始\n");
		}
		◆弱点表示される = 1;
		Ｃ弱点把握(iic2, 1);
	}
	if (Ｓ機能(iis, -1) == 44)
	{
		Ｃ体力(iic1, 1);
		ＣＳ番号(iic1, 1, 384);
	}
	if (Ｉ固有番号(Ｃ武器(iic1, -1), -1) == 149 && RAND(6) == 1)
	{
		◆寄付++;
	}
	if (Ｓ機能(iis, -1) == 52)
	{
		◆戦闘ログ１ += " (slipped through protection)";
	}
	if (Ｓ機能(iis, -1) == 50)
	{
		◆戦闘ログ１ += " (protection rate up)";
		◆味方ガード率変化あり = 1;
		Ｃ守護率(iic1, Ｃ守護率(iic1, -1) + Ｓ効果(iis, -1));
	}
	if (Ｃ守護率(iic2, -1) != 0 && Ｃ体力(iic2, -1) < Ｃ体力最大(iic2, -1) / 3)
	{
		Ｃ守護率(iic2, 0);
		◆ログ２追加 += " (protection canceled)";
	}
	if (Ｃ守護率(iic2, -1) != 0 && ＣＳ有無／ランク(iic1, 320, 0) >= 3)
	{
		Ｃ守護率(iic2, 0);
		◆ログ２追加 += " (protection canceled)";
	}
	if (Ｓ機能(iis, -1) == 51)
	{
		◆体力回復あり = 倍率計算関数(◆戦闘／ＤＭ, Ｓ効果(iis, -1));
		Ｃ体力(iic1, Ｃ体力(iic1, -1) + ◆戦闘／ＤＭ);
		◆戦闘ログ２ += " (health absorbed)";
	}
	if (iis == 510 && ＰＴＡ総数() != 1 && Ｃ耐性率(iic2, -1) < 100 && Ｃ体力(iic2, -1) != 0)
	{
		◆戦闘ログ２ += " (pushed out)";
		◆押し出された = 1;
	}
	aa = ＣＳ有無／ランク別効果(iic2, 259, 0);
	if (aa != 0)
	{
		if (iic1 == 10)
		{
			aa = 0;
		}
		if (Ｓ対象(iis, -1) != 1)
		{
			aa = 0;
		}
		if (Ｃ状態変化(iic2, -1) == 2)
		{
			aa = 0;
		}
		if (Ｃ体力(iic2, -1) == 0)
		{
			aa = 0;
		}
		if (FA[77] == 1)
		{
			aa = 0;
		}
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　※カウンター発生確率　" + string(aa) + "\n");
		}
		if (確率演算(aa) == true)
		{
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　※→　カウンター発動\n");
			}
			◆カウンター発動 = 1;
			◆ログ２追加 += " (counter)";
		}
	}
	if (◆iiq == 182 && Ｓ属性(iis, -1) == 5)
	{
		QD[10]++;
	}
}

lint 連続ぴより(lint iic, int fg)
{
	int no = 0;
	if (fg == 99)
	{
		if (iic < 6)
		{
			no = iic;
			if (PTB_STAN[no] == 1)
			{
				return 1;
			}
			return 0;
		}
		no = ＰＴＡ番号取得(iic);
		if (PTA_STAN[no] == 1)
		{
			return 1;
		}
		return 0;
	}
	if (fg == 0 || fg == 1)
	{
		if (iic < 6)
		{
			no = iic;
			PTB_STAN[no] = fg;
			return 0;
		}
		no = ＰＴＡ番号取得(iic);
		PTA_STAN[no] = fg;
	}
	return 0;
}

int Ｔ連続行動回数(int iic, int iis)
{
	int ▲攻撃回数 = 1;
	int bb = 0;
	int vx = 0;
	if (iis == 386)
	{
		▲攻撃回数 = 2;
	}
	if (iis == 514)
	{
		▲攻撃回数 = 2;
	}
	if (iis == 499)
	{
		▲攻撃回数 = 3;
	}
	if (iis == 547)
	{
		▲攻撃回数 = RAND(3);
	}
	if (iis == 501 && ＰＴＡ平均レベル() >= 40)
	{
		▲攻撃回数 = 2;
	}
	if (iis == 587)
	{
		▲攻撃回数 = 3;
	}
	if (iis == 589)
	{
		▲攻撃回数 = 3;
	}
	if (Ｃ番号(iic, -1) == 167)
	{
		▲攻撃回数 = 3;
	}
	if (Ｃ番号(iic, -1) == 239)
	{
		▲攻撃回数 = 3;
	}
	if (Ｃ番号(iic, -1) == 126)
	{
		▲攻撃回数 = RAND(3);
	}
	if (Ｃ番号(iic, -1) == 330)
	{
		▲攻撃回数 = 2 + RAND(3);
	}
	if (Ｃ番号(iic, -1) == 345)
	{
		▲攻撃回数 = 3;
	}
	if (Ｃ番号(iic, -1) == 302)
	{
		▲攻撃回数 = RAND(3) + 1;
	}
	if (Ｃ番号(iic, -1) == 216)
	{
		▲攻撃回数 = 2;
	}
	if (Ｃ番号(iic, -1) == 217 && RAND(3) == 1)
	{
		▲攻撃回数 = 3;
	}
	if (iis == 135)
	{
		▲攻撃回数 = 1 + RAND(2);
		bb = ＣＳ有無／ランク別効果(iic, 251, 0);
		if (bb != 0)
		{
			bb = RAND(bb);
		}
		if (bb >= 2)
		{
			▲攻撃回数 = bb;
		}
	}
	if (iis == 134)
	{
		▲攻撃回数 = RAND(3) + 1;
	}
	if (iis == 453)
	{
		▲攻撃回数 = RAND(4) + 1;
	}
	if (iis == 460)
	{
		▲攻撃回数 = 4;
		if (ＣＬＶ(iic, -1) >= 30)
		{
			▲攻撃回数 = 5;
		}
		if (ＣＬＶ(iic, -1) >= 40)
		{
			▲攻撃回数 = 6;
		}
		if (ＣＬＶ(iic, -1) >= 50)
		{
			▲攻撃回数 = 7;
		}
	}
	if (iis == 100 || iis == 102 || iis == 104 || iis == 106 || iis == 578)
	{
		▲攻撃回数 = 1;
		vx = ＣＳ有無／ランク(iic, 315, 0);
		if (vx != 0 && Ｉ種類詳細(Ｃ武器(iic, -1), -1) == 3)
		{
			if (RAND(4) == 1)
			{
				▲攻撃回数 = 2;
			}
			if (vx == 3 && RAND(2) == 1)
			{
				▲攻撃回数 = 2;
			}
			if (vx == 4 && RAND(6) == 1)
			{
				▲攻撃回数 = 3;
			}
		}
		vx = ＣＳ有無／ランク(iic, 314, 0);
		if (vx == 4 && Ｉ種類詳細(Ｃ武器(iic, -1), -1) == 2)
		{
			if (RAND(10) == 1 && FA[75] != 3)
			{
				▲攻撃回数 = 2;
				FA[72]++;
			}
			FA[71]++;
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("ＤＢ：剣の連撃確率　" + string(FA[72]) + "／" + string(FA[71]) + "\n");
			}
		}
		if (Ｃ番号(iic, -1) == 93 && Ｉ固有番号(Ｃ武器(iic, -1), -1) == 131 && RAND(2) == 1)
		{
			++▲攻撃回数;
		}
	}
	if (ＣＳ有無(iic, 274, 1) != 0 && RAND(3) == 1)
	{
		++▲攻撃回数;
	}
	if (ＣＳ有無(iic, 275, 1) != 0 && RAND(2) == 1 && ＰＴＡ総数() <= 3)
	{
		++▲攻撃回数;
	}
	if (Ｉ固有番号(Ｃ武器(iic, -1), -1) == 83 && ▲攻撃回数 == 1)
	{
		▲攻撃回数 = 2;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　　Ｔ連続攻撃回数　(" + string(▲攻撃回数) + ")\n");
	}
	if (▲攻撃回数 > 1)
	{
		FA[82] = 1;
	}
	return ▲攻撃回数;
}

int Ｔ守護率減少(int iic)
{
	int aa = 5 + RAND(10);
	if (Ｃ守護率(iic, -1) > 50)
	{
		aa = 15 + RAND(10);
	}
	if (Ｃ守護率(iic, -1) > 100)
	{
		aa = 25 + RAND(10);
	}
	if (Ｃ守護率(iic, -1) > 200)
	{
		aa = 50 + RAND(10);
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n　　守護発動　守護率減少（" + string(aa) + "）\n");
	}
	FA[77] = 1;
	return aa;
}

int Ｔ戦闘後の取得経験値算出(int fg)
{
	lint loop = 0;
	lint iic = 0;
	lint aa = 0;
	lint ▲倒した数 = 1;
	lint bexp = 0;
	lint bun = 0;
	lint ▲逃げられた = 0;
	lint ▲倍率 = 0;
	lint ▲限界レベル = 99;
	lint ▲効果倍率 = 0;
	lint ▲倒した女の子モンスターの数 = 0;
	lint ▲レベルアップの数 = 0;
	lint ▲控え用経験値 = 0;
	lint ▲ログ基本経験値 = 0;
	lint ▲ログボーナス経験値 = 0;
	lint ▲ターンボーナス = 0;
	lint ▲３０レベル差発生 = 0;
	for (loop = 1; loop < 6; loop++)
	{
		PTA_EXP[loop] = 0;
		PTA_EXP_B1[loop] = 0;
		PTA_EXP_B2[loop] = 0;
		PTA_EXP_A1[loop] = 0;
		PTA_EXP_A2[loop] = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n");
		LOG_TADA("＞戦闘後経験値の算出");
		if (◆戦闘ランク == 1)
		{
			LOG_TADA("　◆戦闘ランク＝１（固定敵）");
		}
		if (◆戦闘ランク == 2)
		{
			LOG_TADA("　◆戦闘ランク＝２（ボス敵）");
		}
		LOG_TADA("\n");
	}
	if (◆ＤＢ／戦闘無し == 1 && system.IsDebugMode() == 1)
	{
		◆取得金袋数 = RAND(3);
	}
	if (◆取得金袋数 == 1)
	{
		◆取得金額 = ◆クエストＧＯＬＤ / 4;
	}
	if (◆取得金袋数 == 2)
	{
		◆取得金額 = ◆クエストＧＯＬＤ / 2;
	}
	if (◆取得金袋数 == 3)
	{
		◆取得金額 = ◆クエストＧＯＬＤ;
	}
	if (◆取得金袋数 == 4)
	{
		◆取得金額 = ◆クエストＧＯＬＤ * 2;
	}
	if (◆取得金袋数 == 5)
	{
		◆取得金額 = ◆クエストＧＯＬＤ * 4;
	}
	if (◆取得金額 == 0)
	{
		◆取得金額 = 1;
	}
	if (◇戦闘イベント名 == "コインコイン")
	{
		◇戦闘イベント名 = "";
		if (◆取得金袋数 == 0)
		{
			◆取得金額 = 100;
		}
		if (◆取得金袋数 == 1)
		{
			◆取得金額 = 2000;
		}
		if (◆取得金袋数 == 2)
		{
			◆取得金額 = 4000;
		}
		if (◆取得金袋数 == 3)
		{
			◆取得金額 = 6000;
		}
		if (◆取得金袋数 == 4)
		{
			◆取得金額 = 8000;
		}
		if (◆取得金袋数 == 5)
		{
			◆取得金額 = 10000;
		}
		LOG("　ＤＢ　%s %s\n" % string3(◆取得金袋数) % string3(◆取得金額));
	}
	if (ＣＳ番号取得／スタメン(iic, 294, 0) != 0)
	{
		◆取得金額 = ◆取得金額 * 2;
		LOG("   Skill: Luck with Money activated. 2x Gold!\n");
	}
	if (◆戦闘金持ち == 1)
	{
		◆取得金額 = ◆取得金額 * 2;
	}
	if (◆２倍モード == 1)
	{
		◆取得金額 = ◆取得金額 * 2;
	}
	if (◆パチルに取られた金 != 0 && ＰＴＢ有無／固有(351, "") == 0)
	{
		◆取得金額 += ◆パチルに取られた金;
		◆パチルに取られた金 = 0;
	}
	if (◆クエストチート == 1)
	{
		◆取得金額 = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　拾った金袋は、" + string(◆取得金袋数) + "個なので　" + string(◆取得金額) + "ＧＯＬＤを取得\n");
	}
	お金増えた(◆取得金額, "フラグのみ");
	bexp = ◆戦闘ＥＸＰ;
	if (FA[266] != 0)
	{
		bexp = 倍率計算関数(bexp, 100 + FA[266]);
	}
	if (◆ワールド == 2)
	{
		bexp = 倍率計算関数(bexp, 300);
	}
	if (◆ワールド == 3)
	{
		bexp = 倍率計算関数(bexp, 700);
	}
	if (◆戦闘ランク == 1)
	{
		bexp = 倍率計算関数(bexp, 200);
	}
	if (ＣＳ番号取得／スタメン(iic, 295, 0) != 0)
	{
		bexp = 倍率計算関数(bexp, 120);
		LOG("   Skill: Handicap activated. 1.2x EXP\n");
	}
	if (Ｑクリア回数(◆iiq, -1) != 0 && Ｑ種類(◆iiq, -1) == 2)
	{
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA("　　戦闘のみクエスト経験値軽減　" + string(bexp) + "→");
		}
		if (Ｑクリア回数(◆iiq, -1) > 2)
		{
			bexp = bexp / 5;
		}
		if (Ｑクリア回数(◆iiq, -1) == 2)
		{
			bexp = bexp / 3;
		}
		if (Ｑクリア回数(◆iiq, -1) == 1)
		{
			bexp = bexp / 2;
		}
		if (◆ＤＢ／戦闘ログ == 1)
		{
			LOG_TADA(string(bexp) + "\n");
		}
	}
	if (◆２倍モード == 1)
	{
		bexp = bexp * 2;
	}
	▲ログ基本経験値 = bexp;
	▲ログボーナス経験値 = 0;
	if (FA[219] == 1 && bexp < 600)
	{
		LOG_TADA("　　※経験値補正が入ります１　" + string(bexp) + "　→");
		aa = bexp;
		bexp += RAND(200);
		if (bexp > 600)
		{
			bexp = 600;
		}
		LOG_TADA(string(bexp) + "\n");
		▲ログボーナス経験値 += bexp - aa;
	}
	if (FA[219] == 2 && bexp < 1500)
	{
		LOG_TADA("　　※経験値補正が入ります２　" + string(bexp) + "　→");
		aa = bexp;
		bexp += RAND(500);
		if (bexp > 1500)
		{
			bexp = 1500;
		}
		LOG_TADA(string(bexp) + "\n");
		▲ログボーナス経験値 += bexp - aa;
	}
	if (FA[219] == 3 && bexp < 3000)
	{
		LOG_TADA("　　※経験値補正が入ります３　" + string(bexp) + "　→");
		aa = bexp;
		bexp += RAND(1000);
		if (bexp > 3000)
		{
			bexp = 3000;
		}
		LOG_TADA(string(bexp) + "\n");
		▲ログボーナス経験値 += bexp - aa;
	}
	if (◆ワールド == 2 && bexp < 10000 && RAND(4) != 1)
	{
		LOG_TADA("　　※経験値補正が入りますＷ　" + string(bexp) + "　→");
		aa = bexp;
		bexp += RAND(10000);
		if (bexp > 10000)
		{
			bexp = 10000;
		}
		LOG_TADA(string(bexp) + "\n");
		▲ログボーナス経験値 += bexp - aa;
	}
	if (◆ワールド == 3 && RAND(4) != 1)
	{
		LOG_TADA("　　※経験値補正が入りますＷ　" + string(bexp) + "　→");
		aa = bexp;
		bexp += RAND(30000);
		LOG_TADA(string(bexp) + "\n");
		▲ログボーナス経験値 += bexp - aa;
	}
	if (◆ワールド == 3 && ◇戦闘イベント名 != "幸福きゃん")
	{
		for (; ; )
		{
			if (◆戦闘ターン >= 30)
			{
				▲ターンボーナス = 200;
				bexp = 倍率計算関数(bexp, 300);
				break;
			}
			if (◆戦闘ターン >= 15)
			{
				▲ターンボーナス = 100;
				bexp = 倍率計算関数(bexp, 200);
				break;
			}
			if (◆戦闘ターン >= 8)
			{
				▲ターンボーナス = 50;
				bexp = 倍率計算関数(bexp, 150);
				break;
			}
			break;
		}
	}
	if (◆iiq == 135)
	{
		bexp = 0;
	}
	◆戦闘後／経験値１ = bexp;
	▲限界レベル = 99;
	if (Ｑ難易度(◆iiq, -1) != 0)
	{
		▲限界レベル = Ｑ難易度(◆iiq, -1) + 5;
	}
	▲倒した数 = 0;
	for (loop = 1; loop < 6; loop++)
	{
		if (Ｃ状態変化(PTB[loop], -1) == 3)
		{
			▲倒した数++;
			int mno = Ｃ番号(PTB[loop], -1);
			■Ｍ／撃破数(mno, 1, "加算");
			if (Ｃ種族(PTB[loop], -1) == 3)
			{
				▲倒した女の子モンスターの数++;
			}
			if (Ｃ種族(PTB[loop], -1) == 2)
			{
				FA[314]++;
			}
			if (Ｃ種族(PTB[loop], -1) == 24)
			{
				FA[315]++;
			}
			if (mno == 144)
			{
				FA[103]++;
			}
			if (mno == 145)
			{
				FA[103]++;
			}
			if (mno == 140)
			{
				FA[114]++;
			}
			if (mno == 158)
			{
				FA[114]++;
			}
			if (mno == 178)
			{
				FA[114]++;
			}
			if (mno == 201)
			{
				FA[114]++;
			}
			if (mno == 223)
			{
				FA[114]++;
			}
			if (mno == 237)
			{
				FA[114]++;
			}
			if (◆iiq == 221 || ◆iiq == 222 || ◆iiq == 223 || ◆iiq == 224)
			{
				if (Ｃ種族(PTB[loop], -1) == 2)
				{
					FA[347]++;
				}
			}
			if (■Ｍ／弱点把握(mno, 0, "") == 1)
			{
				LOG("   Defeated %s (LV %s)   Total kills: %s\n" % Ｃ名前(PTB[loop], "") % string3(ＣＬＶ(PTB[loop], -1)) % string3(■Ｍ／撃破数(mno, 0, "")));
			}
		}
	}
	if (◆ＤＢ／戦闘無し == 1)
	{
		▲倒した数 = 0;
		for (loop = 1; loop < 6; loop++)
		{
			if (PTB[loop] != 0)
			{
				▲倒した数++;
				int mno = Ｃ番号(PTB[loop], -1);
				■Ｍ／撃破数(mno, 1, "加算");
			}
		}
	}
	if (▲倒した数 == 0)
	{
		bexp = 0;
	}
	if (▲倒した数 == 1)
	{
		bexp = bexp;
	}
	if (▲倒した数 == 2)
	{
		bexp = 倍率計算関数(bexp, 120);
	}
	if (▲倒した数 == 3)
	{
		bexp = 倍率計算関数(bexp, 150);
	}
	if (▲倒した数 == 4)
	{
		bexp = 倍率計算関数(bexp, 200);
	}
	if (▲倒した数 == 5)
	{
		bexp = 倍率計算関数(bexp, 300);
	}
	◆戦闘後／経験値２ = bexp;
	◆戦闘後／経験値３ = 0;
	if (◆クエストＥＸＰボーナス != 0)
	{
		bexp = 倍率計算関数(bexp, 100 + ◆クエストＥＸＰボーナス);
		◆戦闘後／経験値３ = bexp;
	}
	aa = 0;
	◆戦闘後／経験値４ = 0;
	if (◆戦闘中の入れ替え発生 == 0)
	{
		if (ＰＴＡ総数() == 1)
		{
			bexp = 倍率計算関数(bexp, 200);
		}
		if (ＰＴＡ総数() == 2)
		{
			bexp = 倍率計算関数(bexp, 150);
		}
		if (ＰＴＡ総数() == 3)
		{
			bexp = 倍率計算関数(bexp, 120);
		}
		◆戦闘後／経験値４ = bexp;
	}
	◆戦闘後／経験値５ = bexp;
	◆クエストＥＸＰ合計 += bexp;
	if (◆クエストチート == 1)
	{
		◆戦闘後／経験値１ = 0;
		◆戦闘後／経験値２ = 0;
		◆戦闘後／経験値３ = 0;
		◆戦闘後／経験値４ = 0;
		◆戦闘後／経験値５ = 0;
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("　→　基本経験値　　　" + string(◆戦闘後／経験値１) + "　　限界ＬＶ(" + string(▲限界レベル) + "）\n");
		if (▲倒した数 == 0)
		{
			LOG_TADA("　→　０体倒しました（０％）\n");
		}
		if (▲倒した数 == 1)
		{
			LOG_TADA("　→　１体倒しました（１００％）　　ＥＸＰ：" + string(◆戦闘後／経験値２) + "\n");
		}
		if (▲倒した数 == 2)
		{
			LOG_TADA("　→　２体倒しました（１２０％）　　ＥＸＰ：" + string(◆戦闘後／経験値２) + "\n");
		}
		if (▲倒した数 == 3)
		{
			LOG_TADA("　→　３体倒しました（１５０％）　　ＥＸＰ：" + string(◆戦闘後／経験値２) + "\n");
		}
		if (▲倒した数 == 4)
		{
			LOG_TADA("　→　４体倒しました（２００％）　　ＥＸＰ：" + string(◆戦闘後／経験値２) + "\n");
		}
		if (▲倒した数 == 5)
		{
			LOG_TADA("　→　５体倒しました（３００％）　　ＥＸＰ：" + string(◆戦闘後／経験値２) + "\n");
		}
		if (◆クエストＥＸＰボーナス != 0)
		{
			LOG_TADA("　→　ＥＸＰボーナス（" + string(◆クエストＥＸＰボーナス) + "）　　ＥＸＰ：" + string(◆戦闘後／経験値３) + "\n");
		}
		if (ＰＴＡ総数() == 1)
		{
			LOG_TADA("　→　少人数ボーナス（２００％）　ＥＸＰ：" + string(◆戦闘後／経験値４) + "\n");
		}
		if (ＰＴＡ総数() == 2)
		{
			LOG_TADA("　→　少人数ボーナス（１５０％）　ＥＸＰ：" + string(◆戦闘後／経験値４) + "\n");
		}
		if (ＰＴＡ総数() == 3)
		{
			LOG_TADA("　→　少人数ボーナス（１２０％）　ＥＸＰ：" + string(◆戦闘後／経験値４) + "\n");
		}
		if (◆ＤＢ／２倍モード == 1)
		{
			LOG_TADA("　→　２倍モード（２００％）\n");
		}
		if (◆ＤＢ／２倍モード == 2)
		{
			LOG_TADA("　→　３倍モード（３００％）\n");
		}
		LOG_TADA("　→　最終ＥＸＰ" + string(◆戦闘後／経験値５) + "　　（今回総ＥＸＰ：" + string(◆クエストＥＸＰ合計) + "）\n");
	}
	aa = bexp;
	for (loop = 1; loop < 6; loop++)
	{
		iic = PTA[loop];
		if (PTA[loop] != 0 && Ｃ登録状態(iic, -1) == 1 && Ｃ状態変化(iic, -1) != 3)
		{
			Ｃ戦闘参加回数(iic, Ｃ戦闘参加回数(iic, -1) + 1);
			if (ＣＬＶ(iic, -1) <= ▲限界レベル || ◆ワールド >= 2)
			{
				Ｉ成長装備の処理(iic);
			}
			if (Ｉ固有番号(Ｃ防具(iic, -1), -1) == 57)
			{
				lint aa7 = 0;
				aa7 = Ｉ効果(Ｃ防具(iic, -1), 1, -1);
				aa7 = aa7 - RAND(30);
				if (aa7 == 0)
				{
					aa7 = 1;
				}
				Ｉ効果(Ｃ防具(iic, -1), 1, aa7);
				aa7 = Ｉ効果(Ｃ防具(iic, -1), 2, -1);
				aa7 = aa7 - RAND(30);
				if (aa7 == 0)
				{
					aa7 = 1;
				}
				Ｉ効果(Ｃ防具(iic, -1), 2, aa7);
				Ｉ情報(Ｃ防具(iic, -1), "自動生成");
				Ｃ再計算(iic);
			}
			aa = bexp;
			▲効果倍率 = 100;
			if (ＰＴＡ最大レベル() > ＣＬＶ(iic, -1) + 30 && ◆ワールド == 3 && Ｃ番号(iic, -1) != 27)
			{
				▲効果倍率 = 300;
				▲３０レベル差発生 = iic;
				LOG("     ※%s gets 3x EXP due to low level\n" % Ｃ名前(iic, ""));
			}
			if (Ｉ固有番号(Ｃ持ち物(iic, -1), -1) == 206)
			{
				▲効果倍率 += 10;
				PTA_EXP_A2[loop] = 1;
			}
			if (Ｉ固有番号(Ｃ持ち物(iic, -1), -1) == 343)
			{
				▲効果倍率 += 20;
				PTA_EXP_A2[loop] = 1;
			}
			if (ＣＳ番号取得(iic, 271, 0) != 0 && ＣＬＶ(iic, -1) < 50)
			{
				▲効果倍率 += ＣＳ有無／ランク別効果(iic, 271, 0);
				PTA_EXP_A1[loop] = 1;
			}
			int ▲ＰＸ = ＣＩ防具機能の有無と効果(iic, 29);
			if (▲ＰＸ != 0)
			{
				▲効果倍率 += ▲ＰＸ;
				PTA_EXP_A2[loop] = 1;
			}
			if (Ｉ固有番号(Ｃ武器(iic, -1), -1) == 100 && ◆ワールド != 3)
			{
				▲効果倍率 -= 60;
				PTA_EXP_A2[loop] = 0;
			}
			if (ＣＳ番号取得(iic, 310, 0) != 0 && ＰＴＡ有無／固有(38) != 0)
			{
				if (◆ワールド != 3 && ＣＬＶ(iic, -1) < 50)
				{
					▲効果倍率 += 100;
					PTA_EXP_A1[loop] = 1;
				}
				if (◆ワールド == 3)
				{
					▲効果倍率 += 50;
					PTA_EXP_A1[loop] = 1;
				}
			}
			if (ＣＳ番号取得(iic, 309, 0) != 0 && ＰＴＡ有無／固有(5) != 0)
			{
				if (◆ワールド != 3 && ＣＬＶ(iic, -1) < 50)
				{
					▲効果倍率 += 100;
					PTA_EXP_A1[loop] = 1;
				}
				if (◆ワールド == 3)
				{
					▲効果倍率 += 50;
					PTA_EXP_A1[loop] = 1;
				}
			}
			if (ＣＳ有無(iic, 526, 1) != 0)
			{
				▲効果倍率 += 20;
				PTA_EXP_A1[loop] = 1;
			}
			if (▲効果倍率 != 100)
			{
				aa = 倍率計算関数(aa, ▲効果倍率);
			}
			if (ＣＬＶ(iic, -1) > ▲限界レベル && ◇戦闘イベント名 != "幸福きゃん" && ◆ワールド < 2)
			{
				PTA_EXP_B2[loop] = 1;
				aa = aa / 2;
			}
			if (ＣＬＶ(iic, -1) > ▲限界レベル + 15 && ◇戦闘イベント名 != "幸福きゃん" && ◆ワールド < 2)
			{
				PTA_EXP_B2[loop] = 1;
				aa = aa / 3;
			}
			if (aa >= ＣＥＸＰ最大(iic, -1) && ◇戦闘イベント名 == "幸福きゃん")
			{
				aa = ＣＥＸＰ最大(iic, -1);
			}
			if (aa == 0)
			{
				aa = 1;
			}
			if (ＣＬＶ(iic, -1) >= ＣＬＶ最大(iic, -1))
			{
				aa = 0;
				PTA_EXP_B1[loop] = 1;
				PTA_EXP_B2[loop] = 0;
				PTA_EXP_A1[loop] = 0;
				PTA_EXP_A2[loop] = 0;
				ＣＥＸＰ(iic, 0);
			}
			if (Ｃ狂戦士(iic, -1) == 1)
			{
				aa = 0;
			}
			if (Ｃ番号(iic, -1) == 27)
			{
				aa = 0;
			}
			if (PTA_EXP無し[loop] == 1)
			{
				aa = 0;
			}
			if (◆iiq == 97 && ＣＬＶ(iic, -1) >= 35 && ◆ワールド != 3)
			{
				aa = 0;
			}
			if (Ｃゲスト(iic, -1) != 0)
			{
				aa = 0;
			}
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　" + Ｃ短縮名前(iic, "") + "　＋" + string(aa) + "ＥＸＰ　\n");
			}
			if (◆クエストチート == 1)
			{
				aa = 0;
			}
			PTA_EXP[loop] = aa;
			if (ＣＥＸＰ最大(iic, -1) <= ＣＥＸＰ(iic, -1) + PTA_EXP[loop])
			{
				クエストボーナス／ＬＶＵＰ／加算();
				LOG("     Level up!   %s (LV: %s)\n" % Ｃ名前(iic, "") % string3(ＣＬＶ(iic, -1) + 1));
			}
			if (Ｉ種類詳細(Ｃ持ち物(iic, -1), -1) == 18)
			{
				int iii = Ｃ持ち物(iic, -1);
				if (◆ＤＢ／戦闘無し == 1)
				{
					▲倒した女の子モンスターの数 = 10;
				}
				if (Ｉ効果(iii, 2, -1) != 0 && ▲倒した女の子モンスターの数 != 0)
				{
					Ｉ効果(iii, 2, Ｉ効果(iii, 2, -1) - ▲倒した女の子モンスターの数);
					Ｉ情報(iii, "自動生成");
				}
			}
		}
		if (PTA[loop] != 0 && Ｃ登録状態(iic, -1) == 1 && Ｃ状態変化(iic, -1) == 3)
		{
			if (◆ＤＢ／戦闘ログ == 1)
			{
				LOG_TADA("　　" + Ｃ短縮名前(iic, "") + "　戦闘不能です　\n");
			}
			Ｃ戦闘死亡回数(iic, Ｃ戦闘死亡回数(iic, -1) + 1);
			if (Ｃ番号(iic, -1) == 19)
			{
				FA[105]++;
			}
			if (ＣＳ番号取得(iic, 301, 0) != 0)
			{
				FA[316]++;
				Ｃ再計算(iic);
			}
		}
	}
	if (◆ＤＢ／戦闘ログ == 1)
	{
		LOG_TADA("\n");
	}
	▲控え用経験値 = 0;
	for (loop = 1; loop < 6; loop++)
	{
		if (PTA_EXP[loop] != 0 && ▲控え用経験値 == 0)
		{
			▲控え用経験値 = PTA_EXP[loop];
		}
	}
	for (loop = 1; loop < 6; loop++)
	{
		if (PTA_EXP[loop] != 0 && PTA_EXP[loop] < ▲控え用経験値)
		{
			▲控え用経験値 = PTA_EXP[loop];
		}
	}
	if (▲控え用経験値 != 0)
	{
		▲控え用経験値 = ▲控え用経験値 / 20;
	}
	if (◇戦闘イベント名 == "幸福きゃん")
	{
		▲控え用経験値 = 0;
	}
	if (bexp != 0)
	{
		LOG("     EXP (%s)   Reserve characters' EXP (%s)\n" % string3(bexp) % string(▲控え用経験値));
		if (◆２倍モード == 0)
		{
			LOG("       ↑Base EXP (%s)   Normal mode\n" % string3(▲ログ基本経験値));
		}
		if (◆２倍モード == 1)
		{
			LOG("       ↑Base EXP (%s)   TADA mode\n" % string3(▲ログ基本経験値));
		}
		if (◆戦闘ランク == 1)
		{
			LOG("          ↑Red enemy bonus (100)% up\n");
		}
		if (▲ログボーナス経験値 != 0)
		{
			LOG("       ↑Bonus EXP (%s)\n" % string3(▲ログボーナス経験値));
		}
		if (▲ターンボーナス != 0)
		{
			LOG("       ↑Long battle (%s)\n" % string3(▲ターンボーナス));
		}
		if (▲倒した数 == 2)
		{
			bexp = 倍率計算関数(bexp, 120);
		}
		if (▲倒した数 == 3)
		{
			LOG("       ↑3 enemies (150%)\n");
		}
		if (▲倒した数 == 4)
		{
			LOG("       ↑4 enemies (200%)\n");
		}
		if (▲倒した数 == 5)
		{
			LOG("       ↑5 enemies (300%)\n");
		}
	}
	for (iic = 20; iic < 201; iic++)
	{
		if (Ｃ登録状態(iic, -1) == 2 && Ｃ番号(iic, -1) != 27)
		{
			Ｃ経験値追加(iic, ▲控え用経験値);
		}
		if (ＣＥＸＰ(iic, -1) == ＣＥＸＰ最大(iic, -1) && ＣＬＶ(iic, -1) < ＣＬＶ最大(iic, -1))
		{
			レベルアップ処理(iic);
			LOG("     Reserve character level up   %s (LV: %s)\n" % Ｃ名前(iic, "") % string3(ＣＬＶ(iic, -1)));
		}
	}
	LOG_TADA("　控えキャラの経験値（%s）\n" % string3(▲控え用経験値));
	if (ＰＴＡ有無／固有(27) != 0)
	{
		int no = ＰＴＡ有無／固有(27);
		int iic1 = 0;
		int iic2 = 0;
		if (no == 4 && PTA[1] != 0 && Ｃ状態変化(PTA[1], -1) != 3)
		{
			iic2 = PTA[1];
		}
		if (no == 5 && PTA[2] != 0 && Ｃ状態変化(PTA[2], -1) != 3)
		{
			iic2 = PTA[2];
		}
		if (iic2 != 0)
		{
			iic1 = Ｃ番号取得(27);
			if (ＣＳ有無(iic1, 336, 1) != 0 && Ｃ攻撃力(iic2, -1) > Ｃ攻撃力(iic1, -1))
			{
				FA[176] += 3;
				LOG("     Athena 2.0 studied attack.\n");
			}
			if (ＣＳ有無(iic1, 337, 1) != 0 && Ｃ命中率(iic2, -1) > Ｃ命中率(iic1, -1))
			{
				FA[177] += 2;
				LOG("     Athena 2.0 studied accuracy.\n");
			}
			if (ＣＳ有無(iic1, 338, 1) != 0 && Ｃ素早さ(iic2, -1) > Ｃ素早さ(iic1, -1))
			{
				FA[178] += 1;
				LOG("     Athena 2.0 studied speed.\n");
			}
			if (ＣＳ有無(iic1, 339, 1) != 0 && Ｃ体力最大(iic2, -1) > Ｃ体力最大(iic1, -1))
			{
				FA[179] += 5;
				LOG("     Athena 2.0 studied HP.\n");
			}
			if (ＣＳ有無(iic1, 340, 1) != 0 && Ｃ必殺率(iic2, -1) > Ｃ必殺率(iic1, -1))
			{
				FA[180] += 1;
				LOG("     Athena 2.0 studied critical.\n");
			}
			Ｃ再計算(iic1);
		}
	}
	if (◆iiq == 202)
	{
		LOG("\n");
		LOG("   Most healthy party member's HP: %s%" % string3(100 - 関数／サイコロ／最大残り体力割合()));
	}
	FA[95] += ▲倒した数;
	if (▲倒した数 != 0)
	{
		◆マグナム++;
	}
	return ▲倒した数;
}

int ＣＳ使用禁止切り替え(int iic, int fg)
{
	int iic_s = 0;
	int no = 0;
	int aa = 0;
	for (iic_s = 1; iic_s < 21; ++iic_s)
	{
		no = ＣＳ番号(iic, iic_s, -1);
		if (fg == 1)
		{
			ＣＳ使用禁止(iic, iic_s, 0);
			if (Ｓ初ターン使用禁止技(no, -1) == 1)
			{
				ＣＳ使用禁止(iic, iic_s, 1);
				aa = 1;
				if (ＣＳ有無(iic, 454, 1) != 0 && aa == 1)
				{
					ＣＳ使用禁止(iic, iic_s, 0);
				}
			}
			if (Ｓ発動条件／武器(no, -1) != 0 && Ｓ発動条件／武器(no, -1) != Ｉ種類詳細(Ｃ武器(iic, -1), -1))
			{
				ＣＳ使用禁止(iic, iic_s, 3);
			}
			if (FA[143] == 1)
			{
				if (Ｓ行動種類(no, -1) == 2)
				{
					ＣＳ使用禁止(iic, iic_s, 3);
				}
				if (ＳＥＦＡ(no, -1) == 1)
				{
					ＣＳ使用禁止(iic, iic_s, 3);
				}
			}
			if (FA[230] == 1)
			{
				if (Ｓ行動種類(no, -1) == 1)
				{
					ＣＳ使用禁止(iic, iic_s, 3);
				}
			}
		}
		if (fg == 2 && ＣＳ使用禁止(iic, iic_s, -1) != 3)
		{
			if (Ｓ初ターン使用禁止技(no, -1) == 1)
			{
				ＣＳ使用禁止(iic, iic_s, 0);
			}
			if (Ｓ同一戦闘一度のみ技(no, -1) == 1 && ＣＳ戦闘使用済み(iic, iic_s, -1) == 1)
			{
				ＣＳ使用禁止(iic, iic_s, 2);
			}
			if (Ｉ固有番号(Ｃ武器(iic, -1), -1) == 170 || Ｉ固有番号(Ｃ武器(iic, -1), -1) == 319)
			{
				if (Ｓ基本技(no, -1) == 1 && ＣＳ戦闘使用済み(iic, iic_s, -1) == 1)
				{
					ＣＳ使用禁止(iic, iic_s, 2);
				}
			}
		}
	}
	return 0;
}

