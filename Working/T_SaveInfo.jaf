T_SaveDate::T_SaveDate()
{
	this.clear();
}

void T_SaveDate::clear()
{
	this.m_nYear = 0;
	this.m_nMonth = 0;
	this.m_nDay = 0;
	this.m_nDayOfWeek = 0;
	this.m_nHour = 0;
	this.m_nMinute = 0;
	this.m_nSecond = 0;
	this.m_nMilliSeconds = 0;
}

bool T_SaveDate::set()
{
	ChipmunkSpriteEngine.System_GetDate(this.m_nYear, this.m_nMonth, this.m_nDay, this.m_nDayOfWeek);
	ChipmunkSpriteEngine.System_GetTime(this.m_nHour, this.m_nMinute, this.m_nSecond, this.m_nMilliSeconds);
	return true;
}

bool T_SaveDate::save()
{
	if (!VSFile.WriteInt(this.m_nYear))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nMonth))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nDay))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nDayOfWeek))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nHour))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nMinute))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nSecond))
	{
		return false;
	}
	if (!VSFile.WriteInt(this.m_nMilliSeconds))
	{
		return false;
	}
	return true;
}

bool T_SaveDate::load()
{
	if (!VSFile.ReadInt(this.m_nYear))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nMonth))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nDay))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nDayOfWeek))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nHour))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nMinute))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nSecond))
	{
		return false;
	}
	if (!VSFile.ReadInt(this.m_nMilliSeconds))
	{
		return false;
	}
	return true;
}

int T_SaveDate::comp(ref T_SaveDate rfDate)
{
	if (rfDate === NULL)
	{
		return 9;
	}
	if (this.m_nYear < rfDate.m_nYear)
	{
		return -1;
	}
	if (this.m_nYear > rfDate.m_nYear)
	{
		return 1;
	}
	if (this.m_nMonth < rfDate.m_nMonth)
	{
		return -1;
	}
	if (this.m_nMonth > rfDate.m_nMonth)
	{
		return 1;
	}
	if (this.m_nDay < rfDate.m_nDay)
	{
		return -1;
	}
	if (this.m_nDay > rfDate.m_nDay)
	{
		return 1;
	}
	if (this.m_nHour < rfDate.m_nHour)
	{
		return -1;
	}
	if (this.m_nHour > rfDate.m_nHour)
	{
		return 1;
	}
	if (this.m_nMinute < rfDate.m_nMinute)
	{
		return -1;
	}
	if (this.m_nMinute > rfDate.m_nMinute)
	{
		return 1;
	}
	if (this.m_nSecond < rfDate.m_nSecond)
	{
		return -1;
	}
	if (this.m_nSecond > rfDate.m_nSecond)
	{
		return 1;
	}
	if (this.m_nMilliSeconds < rfDate.m_nMilliSeconds)
	{
		return -1;
	}
	if (this.m_nMilliSeconds > rfDate.m_nMilliSeconds)
	{
		return 1;
	}
	return 0;
}

int T_SaveInfo::getSaveNo()
{
	return this.m_anData[1];
}

int T_SaveInfo::getMode()
{
	return this.m_anData[2];
}

int T_SaveInfo::getSaveCount()
{
	return this.m_anData[3];
}

string T_SaveInfo::getComment()
{
	return this.m_szComment;
}

bool T_SaveInfo::existComment()
{
	return this.m_szComment.Length() > 0;
}

bool T_SaveInfo::isLoaded()
{
	return セーブ番号_確認(this.getSaveNo());
}

T_SaveInfo::T_SaveInfo()
{
	this.clear();
}

void T_SaveInfo::clear()
{
	this.m_anData.Fill(0, this.m_anData.Numof(), 0);
	this.m_szComment = "";
	this.m_sDate.clear();
}

bool T_SaveInfo::create(int nSaveNo, int nMode, string szComment)
{
	this.clear();
	if (!this.m_sDate.set())
	{
		return false;
	}
	if (nMode == 1)
	{
		this.m_anData[3] = セーブ回数＋();
	}
	this.m_anData[1] = nSaveNo;
	this.m_anData[2] = nMode;
	this.m_szComment = szComment;
	return true;
}

bool T_SaveInfo::copy(int nSaveNo, ref T_SaveInfo rfInfo)
{
	if (rfInfo === NULL)
	{
		return false;
	}
	if (!rfInfo.getDate(this.m_sDate))
	{
		return false;
	}
	this.m_anData[1] = nSaveNo;
	this.m_anData[2] = rfInfo.getMode();
	this.m_anData[3] = rfInfo.getSaveCount();
	this.m_szComment = rfInfo.getComment();
	return true;
}

bool T_SaveInfo::save()
{
	if (!this.isLoaded())
	{
		return false;
	}
	bool bRet = false;
	string szName = セーブ_フォルダ名() + "\\" + セーブ_情報ファイル名(this.getSaveNo());
	if (!VSFile.OpenForWrite(szName))
	{
		return false;
	}
	int i = 0;
	int cnt = this.m_anData.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (!VSFile.WriteInt(this.m_anData[i]))
		{
			goto label0;
		}
	}
	if (!VSFile.WriteString(this.m_szComment))
	{
		goto label0;
	}
	bRet = this.m_sDate.save();
label0:
	VSFile.Close();
	return bRet;
}

bool T_SaveInfo::load(int nSaveNo)
{
	bool bRet = false;
	string szName = セーブ_フォルダ名() + "\\" + セーブ_情報ファイル名(nSaveNo);
	if (!VSFile.OpenForRead(szName))
	{
		return false;
	}
	int i = 0;
	int cnt = this.m_anData.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (!VSFile.ReadInt(this.m_anData[i]))
		{
			goto label0;
		}
	}
	if (!VSFile.ReadString(this.m_szComment))
	{
		goto label0;
	}
	bRet = this.m_sDate.load();
label0:
	VSFile.Close();
	return bRet;
}

int T_SaveInfo::comp(ref T_SaveInfo rfInfo)
{
	if (rfInfo === NULL)
	{
		return -2;
	}
	if (!rfInfo.isLoaded())
	{
		return -2;
	}
	if (!this.isLoaded())
	{
		return -2;
	}
	int nSaveCount1 = this.getSaveCount();
	int nSaveCount2 = rfInfo.getSaveCount();
	if (nSaveCount1 < nSaveCount2)
	{
		return -1;
	}
	if (nSaveCount1 > nSaveCount2)
	{
		return 1;
	}
	return 0;
}

int T_SaveInfo::compDate(ref T_SaveInfo rfInfo)
{
	if (rfInfo === NULL)
	{
		return 1;
	}
	if (!rfInfo.isLoaded())
	{
		return 1;
	}
	if (!this.isLoaded())
	{
		return -1;
	}
	T_SaveDate sDate;
	if (!rfInfo.getDate(sDate))
	{
		return 1;
	}
	return this.m_sDate.comp(sDate);
}

void T_SaveInfo::setComment(string szComment)
{
	this.m_szComment = szComment;
}

bool T_SaveInfo::getDate(ref T_SaveDate rfDate)
{
	if (rfDate === NULL)
	{
		return false;
	}
	if (!this.isLoaded())
	{
		rfDate.clear();
		return false;
	}
	rfDate = this.m_sDate;
	return true;
}

string T_SaveInfo::getDateText()
{
	if (!this.isLoaded())
	{
		return "----/--/--";
	}
	return "%04d/%02d/%02d" % this.m_sDate.m_nYear % this.m_sDate.m_nMonth % this.m_sDate.m_nDay;
}

string T_SaveInfo::getTimeText()
{
	if (!this.isLoaded())
	{
		return "--:--";
	}
	return "%02d:%02d" % this.m_sDate.m_nHour % this.m_sDate.m_nMinute;
}

