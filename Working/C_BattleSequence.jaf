bool 戦闘行動順_作成(int nZ)
{
	g_bBattleSequenceUpdate = false;
	Ｔ順番生成(0);
	行動順アイコン_作成();
	戦闘情報_作成(nZ);
	戦闘タイムオーバ_作成(9801);
	return g_sBattleSequence.create(nZ);
}

void 戦闘行動順_削除()
{
	g_sBattleSequence.delete();
	戦闘タイムオーバ_削除();
	戦闘情報_削除();
	行動順アイコン_削除();
	g_bBattleSequenceUpdate = false;
}

bool 戦闘行動順_再作成()
{
	g_bBattleSequenceUpdate = false;
	Ｔ順番生成(1);
	行動順アイコン_再作成();
	return g_sBattleSequence.remake();
}

bool 戦闘行動順_入れ替え(int nCharaNo, bool bAddFlag)
{
	return g_sBattleSequence.change(nCharaNo, bAddFlag);
}

bool 戦闘行動順_総入れ替え(int nNo)
{
	g_bBattleSequenceUpdate = false;
	Ｔ順番生成(1);
	if (!g_sBattleSequence.remake())
	{
		return false;
	}
	return g_sBattleSequence.changeAll(戦闘番号_ＩＩＣ(nNo));
}

void 戦闘行動順_表示設定(bool bShow)
{
	g_sBattleSequence.setShow(bShow);
	戦闘情報_表示設定(bShow);
}

void 戦闘行動順_更新()
{
	戦闘情報_更新();
}

void 戦闘行動順_消し()
{
	g_sBattleSequence.delete();
	戦闘情報_アイコン消し();
	行動順アイコン_削除();
	g_bBattleSequenceUpdate = false;
}

int 戦闘行動順_行動中設定()
{
	return g_sBattleSequence.start();
}

void 戦闘行動順_行動中解除(int nCharaNo)
{
	g_sBattleSequence.end(nCharaNo);
	戦闘情報_アイコン移動();
	戦闘行動順_マーク再設定();
}

void 戦闘行動順_選択設定(int nNo, bool bSelect)
{
	g_sBattleSequence.setSelect(nNo, bSelect);
}

void 戦闘行動順_準備中設定(int nNo, bool bPrepare)
{
	g_sBattleSequence.setPrepare(nNo, bPrepare);
}

void 戦闘行動順_ぴより設定(int nNo, bool bPiyori)
{
	g_sBattleSequence.setPiyori(nNo, bPiyori);
}

void 戦闘行動順_瀕死設定(int nNo)
{
	array@int anNo[1];
	anNo[0] = nNo;
	g_sBattleSequence.setDead(anNo);
}

void 戦闘行動順_瀕死設定_複数(ref array@int anNo)
{
	g_sBattleSequence.setDead(anNo);
}

void 戦闘行動順_マーク再設定()
{
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		int nNo = i + 1;
		戦闘行動順_ぴより設定(nNo, 戦闘データ_ぴより状態(nNo));
	}
	for (i = 0; i < 5; ++i)
	{
		int nNo = i + 11;
		戦闘行動順_ぴより設定(nNo, 戦闘データ_ぴより状態(nNo));
		戦闘行動順_準備中設定(nNo, 戦闘データ_溜め中(nNo));
	}
	for (i = 0; i < 1; ++i)
	{
		int nNo = i + 21;
		戦闘行動順_ぴより設定(nNo, 戦闘データ_ぴより状態(nNo));
	}
}

bool 行動順アイコン_作成()
{
	return g_sBattleIcon.create();
}

void 行動順アイコン_削除()
{
	g_sBattleIcon.delete();
}

bool 行動順アイコン_再作成()
{
	return g_sBattleIcon.remake();
}

int 行動順アイコン_番号(int nNo)
{
	return g_sBattleIcon.getSpNo(nNo);
}

bool 戦闘情報_作成(int nZ)
{
	return g_sBattleInfo.create(nZ);
}

void 戦闘情報_削除()
{
	g_sBattleInfo.delete();
}

void 戦闘情報_表示設定(bool bShow)
{
	g_sBattleInfo.setShow(bShow);
}

void 戦闘情報_更新()
{
	g_sBattleInfo.update();
}

void 戦闘情報_アイコン移動()
{
	g_sBattleInfo.moveIcon();
}

void 戦闘情報_アイコン消し()
{
	g_sBattleInfo.deleteIcon();
}

int 戦闘情報_回数()
{
	int cnt = g_sBattleInfo.getBattleCount();
	return cnt > 0 ? cnt : 0;
}

int 戦闘情報_回数設定(int nValue, bool bAnime)
{
	return g_sBattleInfo.setBattleCount(数値_補正(nValue, 0, 999), bAnime);
}

int 戦闘情報_回数−(bool bAnime)
{
	int cnt = 戦闘情報_回数();
	if (cnt == 999)
	{
		return 999;
	}
	return 戦闘情報_回数設定(cnt - 1, bAnime);
}

bool 戦闘タイムオーバ_作成(int nZ)
{
	g_bBattleTimeOverUpdate = false;
	return g_sBattleTimeOver.create(nZ);
}

void 戦闘タイムオーバ_削除()
{
	g_sBattleTimeOver.delete();
	g_bBattleTimeOverUpdate = false;
}

void 戦闘タイムオーバ_表示()
{
	g_bBattleTimeOverUpdate = g_sBattleTimeOver.start();
}

void 戦闘タイムオーバ_待ち()
{
	g_sBattleTimeOver.wait();
	g_bBattleTimeOverUpdate = false;
}

