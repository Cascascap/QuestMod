bool T_BattleSelect::updateCount(int nNo, int nSkillNo)
{
	return this.m_sSkill.updateCount(nNo, nSkillNo);
}

void T_BattleSelect::changePos()
{
	this.m_sSkill.changePos();
}

int T_BattleSelect::getTargetNo()
{
	return this.m_nTargetNo;
}

int T_BattleSelect::getActiveCount(int nNo)
{
	return this.m_sSkill.getActiveCount(nNo);
}

ref T_BattleSkill T_BattleSelect::getSkill(int nNo)
{
	return this.m_sSkill.get(nNo);
}

ref T_Button T_BattleSelect::getButton(int nID)
{
	return this.m_sButton.getButton(nID);
}

ref T_ButtonGroup T_BattleSelect::getButtonGroup()
{
	return this.m_sButton;
}

T_BattleSelect::T_BattleSelect()
{
	this.m_rcLog.set2(82, 736, 1023, 767);
	this.clear();
}

T_BattleSelect::~T_BattleSelect()
{
	this.delete();
}

bool T_BattleSelect::create(int nZ)
{
	this.delete();
	nZ += 20;
	if (!this.m_sSkill.create(nZ))
	{
		return false;
	}
	this.m_sButton.create();
	ボタン登録_ＣＧ_マーク付(this.m_sButton, 100011, 4, 626, 10136, 93, 28, 10138);
	ボタン登録_ＣＧ_マーク付(this.m_sButton, 100010, 4, 626, 10136, 31, 28, 10137);
	ラジオボタン登録_ＣＧ(this.m_sButton, 100021, 4, 676, 10139, true);
	ボタン登録_ＣＧ(this.m_sButton, 100001, 888, 740, 10292, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100002, 13, 585, 10127, -1, -1, -2147483648, -2147483648);
	ボタン登録_ＣＧ(this.m_sButton, 100003, 854, 676, 10143, -1, -1, -2147483648, -2147483648);
	this.m_sButton.setButtonActive(100003, 戦闘入れ替え可能());
	this.m_sButton.setButtonKey(100011, 81);
	this.m_sButton.setButtonKey(100010, 81);
	this.m_sButton.setButtonKey(100021, 65);
	this.m_sButton.setButtonKey(100001, 33);
	this.m_sButton.setButtonKey(100002, 46);
	this.m_sButton.setButtonKey(100003, 80);
	this.m_sButton.setZ(nZ);
	this.m_sChange.create(28, 15, 2, 3, 1, true);
	this.m_sChange.setFontType(258);
	this.m_sChange.setFontSize(22);
	this.m_sChange.setFontColor(255, 255, 255);
	this.m_sChange.setFontBold(太字確認(258, 40));
	this.m_sChange.setPos(966, 701);
	this.m_sChange.setZ(nZ + 5);
	this.updateChangeCount();
	this.m_nZ = nZ;
	this.m_nSkillMode = 戦闘行動全表示();
	this.m_bAutoFlag = false;
	this.m_sShortcutInfo.create(9901);
	this.m_sShortcutInfo.addAll(this.m_sButton);
	this.m_sShortcutInfo.addAll(システムバー_ボタン群());
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&戦闘選択_上矢印);
	this.m_sInputKey.setArrowDownCallback(&戦闘選択_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&戦闘選択_左矢印);
	this.m_sInputKey.setArrowRightCallback(&戦闘選択_右矢印);
	this.m_sInputKey.setSelectCallback(&戦闘選択_選択設定);
	return true;
}

void T_BattleSelect::delete()
{
	this.hideComment(-1);
	this.m_sSkill.delete();
	this.m_sButton.delete();
	this.m_sChange.delete();
	this.m_sShortcutInfo.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_BattleSelect::clear()
{
	this.m_nZ = -1;
	this.m_nTargetNo = -1;
	this.m_nCommentID = 0;
	this.m_nSkillMode = -1;
	this.m_bAutoFlag = false;
	this.m_rfsSkill <- NULL;
}

bool T_BattleSelect::remake()
{
	if (this.m_nZ < 0)
	{
		return false;
	}
	if (!this.m_sSkill.create(this.m_nZ))
	{
		return false;
	}
	this.resetSelect(0);
	this.updateChangeCount();
	return true;
}

int T_BattleSelect::select(int nNo)
{
	int nRet = 0;
	this.m_nTargetNo = -1;
	this.m_rfsSkill <- NULL;
	ref T_BattleSkill rfsSkill = this.m_sSkill.get(nNo);
	if (rfsSkill === NULL)
	{
		return -1;
	}
	if (rfsSkill.getActiveSkill() < 0)
	{
		return 0;
	}
	this.m_rfsSkill <- rfsSkill;
	if (this.m_bAutoFlag)
	{
		nRet = this.auto();
		goto label0;
	}
	this.m_rfsSkill.setTargetShowMode(this.m_nSkillMode);
	int nID = -1;
	while (true)
	{
		nID = this.checkSelect(-1);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.hideComment(-1);
	this.m_rfsSkill.setTargetShowMode(-1);
label0:
	説明_消し(-1);
	this.m_rfsSkill <- NULL;
	return nRet;
}

void T_BattleSelect::reset(int nNo)
{
	this.resetSelect(nNo);
	this.setButtonActive();
	this.m_sSkill.setSkillShow(nNo, true);
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		戦闘味方_選択設定(戦闘番号_味方(i), false);
	}
	for (i = 0; i < 5; ++i)
	{
		戦闘敵_選択設定(戦闘番号_敵(i), false);
	}
	this.m_nTargetNo = -1;
}

bool T_BattleSelect::erase(int nNo)
{
	return this.m_sSkill.erase(nNo);
}

bool T_BattleSelect::checkStopAuto()
{
	if (!this.m_bAutoFlag)
	{
		return false;
	}
	if (キー_キャンセル() <= 0)
	{
		return false;
	}
	効果音_キャンセル();
	this.setAutoFlag(false);
	return true;
}

void T_BattleSelect::waitKey(int nWaitTime, int nResult)
{
	int nKey = 0;
	bool bWait = nWaitTime >= 0;
	CASTimer sTimer;
	this.setButtonShow(false, 1);
	if (nResult > 0)
	{
		戦闘台詞_タイマリセット(3000);
	}
	sTimer.Reset();
	while (true)
	{
		if (bWait && sTimer.Get() > nWaitTime)
		{
			break;
		}
		nKey = this._waitKey(0);
		if (nKey > 0)
		{
			break;
		}
		if (nKey == 0)
		{
			sTimer.Reset();
		}
		UPDATE(true);
		if (nResult > 0)
		{
			if (g_bBattleMessageCheck)
			{
				戦闘台詞_割り込み確認_リザルト(nResult);
			}
		}
	}
	キー_離し待ち(nKey, true);
	if (nResult > 0)
	{
		戦闘台詞_消去();
	}
}

void T_BattleSelect::waitClose(int nResult)
{
	int nKey = 0;
	this.setButtonShow(false, 1);
	if (nResult > 0)
	{
		戦闘台詞_タイマリセット(3000);
	}
	while (true)
	{
		nKey = this._waitKey(1);
		if (nKey > 0)
		{
			break;
		}
		UPDATE(true);
		if (nResult > 0)
		{
			if (g_bBattleMessageCheck)
			{
				戦闘台詞_割り込み確認_リザルト(nResult);
			}
		}
	}
	キー_離し待ち(nKey, true);
	if (nResult > 0)
	{
		戦闘台詞_消去();
	}
}

int T_BattleSelect::moveUp(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	int nID2 = 0;
	switch (nID)
	{
		case 100001:
			return 100003;
		case 100002:
			nID2 = this.m_rfsSkill.getTargetUp(1);
			goto label0;
		case 100010:
		case 100011:
			return 100002;
		case 100021:
			return this.m_nSkillMode == 1 ? 100010 : 100011;
		case 100003:
			nID2 = this.m_rfsSkill.getTargetUp(5);
			goto label0;
		default:
			break;
	}
	if (nID > 900000)
	{
		switch (nID)
		{
			case 900001:
				return 100021;
			default:
				break;
		}
		goto label0;
	}
	if (nID > 200000)
	{
		nID2 = this.m_rfsSkill.moveUp(nID);
		goto label0;
	}
label0:
	return nID2 > 0 ? nID2 : nID;
}

int T_BattleSelect::moveDown(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	int nID2 = 0;
	switch (nID)
	{
		case 100001:
			nID2 = this.m_rfsSkill.getTargetDown(15);
			goto label0;
		case 100002:
			return this.m_nSkillMode == 1 ? 100010 : 100011;
		case 100010:
		case 100011:
			return 100021;
		case 100021:
			return 900001;
		case 100003:
			return 100001;
		default:
			break;
	}
	if (nID > 900000)
	{
		switch (nID)
		{
			case 900001:
				nID2 = this.m_rfsSkill.getTargetDown(14);
				goto label0;
			default:
				break;
		}
	}
	if (nID > 200000)
	{
		nID2 = this.m_rfsSkill.moveDown(nID);
		goto label0;
	}
label0:
	return nID2 > 0 ? nID2 : nID;
}

int T_BattleSelect::moveLeft(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	int nID2 = 0;
	switch (nID)
	{
		case 100001:
			return 900001;
		case 100002:
		case 100010:
		case 100011:
		case 100021:
			return 100003;
		case 100003:
			nID2 = this.m_rfsSkill.getTargetLeft(5);
			goto label0;
		default:
			break;
	}
	if (nID > 900000)
	{
		switch (nID)
		{
			case 900001:
				return 100001;
			default:
				break;
		}
		goto label0;
	}
	if (nID > 200000)
	{
		nID2 = this.m_rfsSkill.moveLeft(nID);
		goto label0;
	}
label0:
	return nID2 > 0 ? nID2 : nID;
}

int T_BattleSelect::moveRight(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	int nID2 = 0;
	switch (nID)
	{
		case 100001:
			return 900001;
		case 100002:
		case 100010:
		case 100011:
		case 100021:
			nID2 = this.m_rfsSkill.getTargetRight(4);
			goto label0;
		case 100003:
			return 100021;
		default:
			break;
	}
	if (nID > 900000)
	{
		switch (nID)
		{
			case 900001:
				return 100001;
			default:
				break;
		}
		goto label0;
	}
	if (nID > 200000)
	{
		nID2 = this.m_rfsSkill.moveRight(nID);
		goto label0;
	}
label0:
	return nID2 > 0 ? nID2 : nID;
}

void T_BattleSelect::updateChangeCount()
{
	this.m_sChange.setValue(パーティ入れ替え残り回数(0), false);
}

void T_BattleSelect::setShow(bool bShow, int nLogOpenShow)
{
	this.m_sSkill.setShow(bShow);
	this.m_sChange.setShow(bShow);
	this.setButtonShow(bShow, nLogOpenShow);
}

void T_BattleSelect::setButtonShow(bool bShow, int nLogOpenShow)
{
	this.m_sButton.setShow(bShow);
	this.m_sButton.setButtonShow(100001, nLogOpenShow < 0 ? bShow : nLogOpenShow > 0);
	this.m_sButton.setButtonShow(100011, this.m_nSkillMode == 0 ? bShow : 0);
	this.m_sButton.setButtonShow(100010, this.m_nSkillMode > 0 ? bShow : 0);
	this.m_sButton.setButtonActive(100011, this.m_nSkillMode == 0);
	this.m_sButton.setButtonActive(100010, this.m_nSkillMode > 0);
}

void T_BattleSelect::setButtonActive()
{
	this.m_sSkill.setButtonActive();
}

void T_BattleSelect::setSkillMode(int nMode)
{
	this._setSkillMode(戦闘行動全表示_設定(nMode));
}

void T_BattleSelect::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		return;
	}
	if (nID > 200000)
	{
		if (this.m_rfsSkill !== NULL)
		{
			this.m_rfsSkill.getButton().setButtonSelect(nID, bSelect, true);
		}
		goto label0;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
		goto label0;
	}
label0:
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
}

bool T_BattleSelect::exec(int nID, ref int nRet)
{
	nRet = 0;
	this.m_sShortcutInfo.setShow(false);
	if (nID < 0)
	{
		return false;
	}
	switch (nID)
	{
		case 100001:
			戦闘ログ_窓表示();
			break;
		case 100002:
			return this.execLoss(nRet);
		case 100003:
			nRet = nID;
			return true;
		case 100010:
			this.setSkillMode(0);
			break;
		case 100011:
			this.setSkillMode(1);
			break;
		case 100021:
			return this.startAuto(nRet);
		default:
			break;
	}
	if (nID > 900000)
	{
		return this.execSystemBar(nID, nRet);
	}
	if (nID > 200000)
	{
		return this.execSkill(nID, nRet);
	}
	return false;
}

bool T_BattleSelect::execSystemBar(int nID, ref int nRet)
{
	システムバー_実行(nID);
	this._setSkillMode(戦闘行動全表示());
	return false;
}

bool T_BattleSelect::execSkill(int nID, ref int nRet)
{
	if (this.m_rfsSkill === NULL)
	{
		return false;
	}
	int nSkillNo = this.m_rfsSkill.getSkillNo(nID);
	if (nSkillNo <= 0)
	{
		return false;
	}
	this.m_rfsSkill.countDown(nSkillNo);
	this.m_rfsSkill.setTargetShow(-1, -1);
	nRet = nSkillNo;
	this.m_nTargetNo = this.m_rfsSkill.getTargetNo(nID);
	return true;
}

bool T_BattleSelect::execLoss(ref int nRet)
{
	if (!選択_確認("Surrender?", 2, "Yes", "No", -1, -1, false))
	{
		return false;
	}
	nRet = 100002;
	return true;
}

int T_BattleSelect::checkSelect(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return 0;
	}
	int nRet = 0;
	int nSelectID = 0;
	キー_クリア(true);
	マウス_フラグクリア();
	this.resetSelect(0);
	nID = this.setCursor(nID);
	this.setSelect(nID, true);
	UPDATE(true);
	int nOldID = nID;
	戦闘台詞_タイマリセット(0);
	while (true)
	{
		int nRet2 = this.checkInput(nSelectID);
		if (nRet2 == 2)
		{
			if (g_bBattleMessageUpdate)
			{
				戦闘台詞_消去();
			}
			nRet = nSelectID;
			break;
		}
		if (nRet2 != 1)
		{
			int nID2 = this.checkKey(nSelectID);
			if (nID2 > 0)
			{
				nRet = nID2;
				break;
			}
			if (this.checkCancel(nSelectID))
			{
				nRet = -1;
				break;
			}
			this.checkMouse(nSelectID);
		}
		else if (g_bBattleMessageUpdate)
		{
			戦闘台詞_消去();
		}
		UPDATE(true);
		if (nOldID == nSelectID)
		{
			if (g_bBattleMessageCheck)
			{
				戦闘台詞_割り込み確認(this.m_rfsSkill.getNo());
			}
		}
		else
		{
			if (g_bBattleMessageUpdate)
			{
				戦闘台詞_消去();
			}
			nOldID = nSelectID;
		}
	}
	return nRet;
}

int T_BattleSelect::checkInput(ref int nSelectID)
{
	nSelectID = 0;
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	ref T_ButtonGroup rfsButton = this.m_rfsSkill.getButton();
	switch (システムバー_入力確認(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
			rfsButton.setInputFlag(false);
			this.m_sButton.setInputFlag(false);
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	switch (rfsButton.checkInput(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label1;
			}
			break;
		case 1:
			this.m_sButton.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nSelectID))
	{
		case 0:
			break;
		case 1:
			rfsButton.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
label1:
	if (nSelectID > 0)
	{
		this.showComment(nSelectID);
	}
	else
	{
		this.hideComment(-1);
	}
label0:
	rfsButton.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	システムバー_入力ＯＮ();
	return 0;
}

int T_BattleSelect::checkKey(ref int nID)
{
	int nID2 = システムバー_キー確認(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_nSkillMode > 0)
	{
		if (キー_上矢印(false) > 0 || キー_下矢印(false) > 0 || キー_左矢印(false) > 0 || キー_右矢印(false) > 0)
		{
			戦闘台詞_タイマリセット(0);
			if (this.m_sInputKey.check(nID))
			{
				nID2 = this.m_sInputKey.getSelectID();
				if (nID2 > 0)
				{
					nID = nID2;
					戦闘台詞_タイマリセット(0);
				}
				return 0;
			}
		}
	}
	this.m_sShortcutInfo.check();
	return 0;
}

bool T_BattleSelect::checkCancel(ref int nID)
{
	if (this.m_rfsSkill !== NULL)
	{
		if (キャンセル_確認())
		{
			int nID2 = this.m_rfsSkill.moveCursor(nID);
			if (nID2 > 0)
			{
				this.setCursor(nID2);
				戦闘台詞_タイマリセット(0);
				nID = nID2;
			}
		}
	}
	return false;
}

void T_BattleSelect::checkMouse(int nID)
{
	if (this.m_rfsSkill === NULL)
	{
		return;
	}
	if (nID > 900000)
	{
		this.m_rfsSkill.setTargetShow(-1, -1);
		return;
	}
	if (nID > 200000)
	{
		this.m_rfsSkill.checkSkill(nID);
		return;
	}
	if (nID > 100000)
	{
		this.m_rfsSkill.setTargetShow(-1, -1);
		return;
	}
	this.m_rfsSkill.setTargetShow(戦闘選択領域_確認(戦闘敵_前進中()), -1);
}

int T_BattleSelect::_waitKey(int nMode)
{
	int nID = 0;
	int nKey = 0;
	int nRet = this.m_sButton.checkInput(nID);
	if (nRet == 2)
	{
		if (nID == 100001)
		{
			戦闘ログ_窓表示();
		}
		return 0;
	}
	if (nRet == 1)
	{
		return -1;
	}
	if (nMode == 0)
	{
		nKey = キー_未読スキップ();
		if (nKey > 0)
		{
			return nKey;
		}
		nKey = ホイール_確認(true);
		if (nKey > 0)
		{
			return nKey;
		}
	}
	if (nID <= 0)
	{
		nKey = キー_決定();
		if (nKey > 0)
		{
			効果音_クリック();
			return nKey;
		}
	}
	if (this.m_sButton.checkButtonKey(100001))
	{
		戦闘ログ_窓表示();
		return 0;
	}
	nKey = キー_キャンセル();
	if (nKey > 0)
	{
		効果音_キャンセル();
		return nKey;
	}
	return -1;
}

void T_BattleSelect::resetSelect(int nNo)
{
	ref T_BattleSkill rfsSkill = this.m_sSkill.get(nNo);
	if (rfsSkill !== NULL)
	{
		rfsSkill.resetSelect();
	}
	if (this.m_rfsSkill !== NULL)
	{
		this.m_rfsSkill.resetSelect();
	}
	this.m_sButton.resetSelect();
	システムバー_選択解除();
	this.hideComment(-1);
}

int T_BattleSelect::setCursor(int nID)
{
	if (nID <= 0)
	{
		if (this.m_nSkillMode < 1)
		{
			return -1;
		}
		if (this.m_rfsSkill === NULL)
		{
			return -1;
		}
		nID = this.m_rfsSkill.getDefaultID();
		if (nID <= 0)
		{
			return -1;
		}
	}
	if (キー優先())
	{
		this.resetSelect(0);
		this.setSelect(nID, true);
		return nID;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return nID;
	}
	if (nID > 200000)
	{
		if (this.m_rfsSkill !== NULL)
		{
			this.m_rfsSkill.getButton().setButtonCursor(nID);
		}
		return nID;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonCursor(nID);
		return nID;
	}
	return 0;
}

void T_BattleSelect::showComment(int nID)
{
	if (this.m_nCommentID == nID)
	{
		return;
	}
	int nTargetNo = -1;
	int nX = -1;
	int nY = -1;
	int nWaitTime = 500;
	string szComment = "";
	string szSubComment = "";
	if (nID > 200000)
	{
		if (this.m_rfsSkill !== NULL)
		{
			nTargetNo = this.m_rfsSkill.getComment(nID, nX, nY, szComment, szSubComment);
		}
		goto label0;
	}
	if (nID > 100000)
	{
		nX = this.m_sButton.getButtonPosX(nID);
		nY = this.m_sButton.getButtonPosY(nID);
		switch (nID)
		{
			case 100001:
				szComment = "Display battle log.";
				break;
			case 100021:
				szComment = "Right click to cancel.";
				nWaitTime = 0;
				break;
			default:
				break;
		}
		goto label0;
	}
label0:
	if (szComment.Empty())
	{
		this.hideComment(-1);
		return;
	}
	if (説明_表示(nID, "", szComment, szSubComment, nWaitTime, false) > 0)
	{
		int nW = 説明_幅();
		if (nX + 142 + nW < 1024)
		{
			説明_位置設定(nX + 142, nY);
		}
		else
		{
			説明_位置設定(nX - nW, nY);
		}
	}
	this.setSequenceSelect(nTargetNo);
	this.m_nCommentID = nID;
}

void T_BattleSelect::hideComment(int nID)
{
	nID = nID < 0 ? this.m_nCommentID : nID;
	if (nID > 0)
	{
		説明_消し(nID);
	}
	this.setSequenceSelect(-1);
	this.m_nCommentID = -1;
}

void T_BattleSelect::setSequenceSelect(int nNo)
{
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		int nNo2 = 戦闘番号_敵(i);
		戦闘行動順_選択設定(nNo2, nNo2 == nNo);
	}
}

bool T_BattleSelect::startAuto(ref int nRet)
{
	this.setAutoFlag(true);
	nRet = this.auto();
	this.m_rfsSkill.setTargetShow(-1, -1);
	return true;
}

int T_BattleSelect::auto()
{
	if (this.m_rfsSkill === NULL)
	{
		return -1;
	}
	int nCharaNo = this.m_rfsSkill.getCharaNo();
	if (nCharaNo <= 0)
	{
		return -1;
	}
	int nSkillNo = 0;
	int nTargetNo = 0;
	Ｔ思考ルーチン(nCharaNo, nSkillNo, nTargetNo);
	if (nSkillNo <= 0)
	{
		return 0;
	}
	this.m_rfsSkill.countDown(nSkillNo);
	this.m_nTargetNo = nTargetNo > 0 ? 戦闘番号_取得(nTargetNo) : 0;
	return nSkillNo;
}

void T_BattleSelect::setAutoFlag(bool bAutoFlag)
{
	this.m_bAutoFlag = bAutoFlag;
	this.m_sButton.setButtonSelect(100021, false, true);
	this.m_sButton.setButtonActive(100021, !bAutoFlag);
}

void T_BattleSelect::_setSkillMode(int nMode)
{
	this.m_nSkillMode = nMode;
	this.setShow(true, -1);
	if (this.m_rfsSkill !== NULL)
	{
		this.m_rfsSkill.setTargetShowMode(nMode);
	}
	UPDATE(true);
}

