T_StoreCommentData::T_StoreCommentData()
{
}

int T_StoreCommentData::add(int nType, string szText)
{
	if (nType < 0 || nType > 1)
	{
		return -1;
	}
	if (szText.Empty())
	{
		return -1;
	}
	this.m_anType.PushBack(nType);
	this.m_aszText.PushBack(szText);
	return this.m_anType.Numof();
}

void T_StoreCommentData::free()
{
	if (!this.m_anType.Empty())
	{
		this.m_anType.Free();
	}
	if (!this.m_aszText.Empty())
	{
		this.m_aszText.Free();
	}
}

void T_StoreCommentData::output()
{
	return;
}

int T_StoreCommentData::getCount()
{
	return this.m_anType.Numof();
}

int T_StoreCommentData::getType(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_anType.Numof() ? -1 : this.m_anType[nIndex];
}

string T_StoreCommentData::getText(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_aszText.Numof() ? "" : this.m_aszText[nIndex];
}

bool T_StoreComment::copyToSprite(ref T_Sprite rfsDst, int nDstX, int nDstY)
{
	return this.m_spComment.copyToSprite(rfsDst, nDstX, nDstY);
}

void T_StoreComment::setPos(int nX, int nY)
{
	this.m_spComment.setPos(nX, nY);
}

void T_StoreComment::setZ(int nZ)
{
	this.m_spComment.setZ(nZ, -1);
}

void T_StoreComment::setShow(bool bShow)
{
	this.m_spComment.setShow(bShow);
}

void T_StoreComment::setBlendRate(int nRate)
{
	this.m_spComment.setBlendRate(nRate);
}

int T_StoreComment::getPosX()
{
	return this.m_spComment.getPosX();
}

int T_StoreComment::getPosY()
{
	return this.m_spComment.getPosY();
}

int T_StoreComment::getZ()
{
	return this.m_spComment.getZ();
}

bool T_StoreComment::getShow()
{
	return this.m_spComment.getShow();
}

int T_StoreComment::getBlendRate()
{
	return this.m_spComment.getBlendRate();
}

bool T_StoreComment::isCreated()
{
	return this.m_spComment.isCreated();
}

bool T_StoreComment::suspend()
{
	return this.m_spComment.suspend();
}

bool T_StoreComment::resume()
{
	return this.m_spComment.resume();
}

bool T_StoreComment::isSuspend()
{
	return this.m_spComment.isSuspend();
}

T_StoreComment::T_StoreComment()
{
	this.clear();
}

T_StoreComment::~T_StoreComment()
{
	this.delete();
}

void T_StoreComment::create()
{
	this.delete();
	this.m_spComment.create(1, 1, 0, 0, 0, 0);
}

void T_StoreComment::delete()
{
	this.m_spComment.delete();
	this.clear();
}

void T_StoreComment::clear()
{
	this.m_szText = "";
}

bool T_StoreComment::setText(string szText)
{
	if (!this.isCreated())
	{
		return false;
	}
	if (this.m_szText == szText)
	{
		return true;
	}
	array@string aszText;
	テキスト分割_強制改行(szText, 19, aszText);
	this.m_spComment.textClear();
	int i = 0;
	int cnt = _min(4, aszText.Numof());
	if (cnt <= 0)
	{
		return true;
	}
	int nX = 0;
	int nY = 0;
	for (i = 0; i < cnt; ++i)
	{
		int nH = this.drawLine(0, nY, aszText[i]);
		if (nH < 0)
		{
			break;
		}
		nY += nH + -1;
	}
	this.m_spComment.setZ(this.getZ(), -1);
	this.m_spComment.setShow(this.getShow());
	this.m_spComment.setBlendRate(this.getBlendRate());
	this.m_szText = szText;
	return true;
}

bool T_StoreComment::setText2(string text, int lineCount)
{
	if (!this.isCreated())
	{
		return false;
	}
	if (this.m_szText == text)
	{
		return true;
	}
	array@string lines;
	array@float spacings;
	SelectFontNumber(258);
	SetFontSize(20);
	SetFixedWidthSpacing(-10);
	WordWrapText(text, lines, spacings, 264, 0.949999988079071, 0.600000023841858);
	while (lines.Numof() > lineCount)
	{
		if (!RemoveFirstLineBreak(text))
		{
			break;
		}
		lines.Alloc(0);
		spacings.Alloc(0);
		WordWrapText(text, lines, spacings, 264, 1.0, 0.600000023841858);
	}
	this.m_spComment.textClear();
	int i = 0;
	int cnt = _min(lineCount, lines.Numof());
	if (cnt <= 0)
	{
		return true;
	}
	int nX = 0;
	int nY = 0;
	for (i = 0; i < cnt; ++i)
	{
		int nH = this.drawLine2(2, nY, lines[i], spacings[i]);
		if (nH < 0)
		{
			break;
		}
		nY += nH + -1;
	}
	this.m_spComment.setZ(this.getZ(), -1);
	this.m_spComment.setShow(this.getShow());
	this.m_spComment.setBlendRate(this.getBlendRate());
	this.m_szText = text;
	return true;
}

int T_StoreComment::drawLine(int nX, int nY, string szText)
{
	if (szText.Empty())
	{
		return 18;
	}
	T_StoreCommentData sData;
	int i = 0;
	int cnt = this.convertLine(szText, sData);
	if (cnt < 0)
	{
		return -1;
	}
	sact_text_metrics_t tmComment;
	sact_text_metrics_t tmNumber;
	tmComment.nSize = 18;
	tmComment.nColorR = 255;
	tmComment.nColorG = 245;
	tmComment.nColorB = 100;
	tmComment.nWeight = 0;
	tmComment.nFace = 257;
	tmNumber.nSize = 16;
	tmNumber.nColorR = 255;
	tmNumber.nColorG = 255;
	tmNumber.nColorB = 255;
	tmNumber.nWeight = 0;
	tmNumber.nFace = 257;
	int nX2 = nX;
	int nW = 0;
	for (i = 0; i < cnt; ++i)
	{
		if (sData.getType(i) == 1)
		{
			nX2 += -2;
			nW = this.m_spComment.textDrawPos(0, nX2, nY + 2, sData.getText(i), tmNumber, -6, false);
		}
		else
		{
			nX2 += -4;
			nW = this.m_spComment.textDrawPos(0, nX2, nY, sData.getText(i), tmComment, -4, false);
		}
		if (nW < 0)
		{
			break;
		}
		nX2 += nW;
	}
	return 18;
}

int T_StoreComment::drawLine2(int nX, int nY, string text, float spacing)
{
	if (text.Empty())
	{
		return 18;
	}
	T_StoreCommentData sData;
	int i = 0;
	int cnt = this.convertLine(text, sData);
	if (cnt < 0)
	{
		return -1;
	}
	sact_text_metrics_t tmComment;
	sact_text_metrics_t tmNumber;
	tmComment.nSize = 20;
	tmComment.nColorR = 255;
	tmComment.nColorG = 245;
	tmComment.nColorB = 100;
	tmComment.nWeight = 0;
	tmComment.nFace = 258;
	tmComment.nShadowPixelL = 0;
	tmComment.nShadowPixelU = 0;
	tmComment.nShadowPixelR = 1;
	tmComment.nShadowPixelD = 1;
	tmComment.nShadowColorR = 96;
	tmComment.nShadowColorG = 64;
	tmComment.nShadowColorB = 48;
	tmNumber.nSize = 20;
	tmNumber.nColorR = 255;
	tmNumber.nColorG = 255;
	tmNumber.nColorB = 255;
	tmNumber.nShadowPixelL = 0;
	tmNumber.nShadowPixelU = 0;
	tmNumber.nShadowPixelR = 1;
	tmNumber.nShadowPixelD = 1;
	tmNumber.nShadowColorR = 0;
	tmNumber.nShadowColorG = 0;
	tmNumber.nShadowColorB = 0;
	tmNumber.nWeight = 70;
	tmNumber.nFace = 258;
	int nX2 = nX;
	int nW = 0;
	SetFixedWidthSpacing(-10);
	int charIndex = 0;
	for (i = 0; i < cnt; ++i)
	{
		int type = sData.getType(i);
		string nodeText = sData.getText(i);
		charIndex += nodeText.Length();
		if (type == 1)
		{
			nW = this.m_spComment.textDrawPos2(1, nX2, nY + 1, nodeText, tmNumber, -10, spacing, false, false);
		}
		else
		{
			nW = this.m_spComment.textDrawPos2(1, nX2, nY + 2, nodeText, tmComment, -10, spacing, false, false);
		}
		if (nW < 0)
		{
			break;
		}
		int nX2Next = nX + MeasureText(text.GetPart(0, charIndex), false);
		nX2Next = nX2 + nW;
		nX2 = nX2Next;
	}
	return 18;
}

int T_StoreComment::convertLine(string szText, ref T_StoreCommentData sData)
{
	if (sData === NULL)
	{
		return -1;
	}
	if (szText.Empty())
	{
		return 0;
	}
	sData.free();
	while (true)
	{
		if (!this.addLineText(szText, sData))
		{
			break;
		}
		if (!this.addLineNumber(szText, sData))
		{
			break;
		}
	}
	if (szText.Length() > 0)
	{
		sData.add(0, szText);
	}
	return sData.getCount();
}

bool T_StoreComment::addLineText(ref string szText, ref T_StoreCommentData sData)
{
	if (szText === NULL || szText.Empty())
	{
		return false;
	}
	if (sData === NULL)
	{
		return false;
	}
	bool forceHightlightStrategy = false;
label0:
	int i = 0;
	int cnt = szText.Length();
	for (i = 0; i < cnt; ++i)
	{
		if (szText[i] == '`')
		{
			if (forceHightlightStrategy)
			{
				sData.add(0, szText.GetPart(0, i));
				i += 1;
				szText = szText.GetPart(i, szText.Length() - i);
				forceHightlightStrategy = false;
				goto label0;
			}
			forceHightlightStrategy = true;
			sData.add(0, szText.GetPart(0, i));
			i += 1;
			szText = szText.GetPart(i, szText.Length() - i);
			goto label0;
		}
		if (szText[i] == '|')
		{
			if (forceHightlightStrategy)
			{
				sData.add(1, szText.GetPart(0, i));
				i += 1;
				szText = szText.GetPart(i, szText.Length() - i);
				forceHightlightStrategy = false;
				goto label0;
			}
			forceHightlightStrategy = true;
			sData.add(0, szText.GetPart(0, i));
			i += 1;
			szText = szText.GetPart(i, szText.Length() - i);
			goto label0;
		}
		if (forceHightlightStrategy)
		{
			continue;
		}
		if (this.isNumber2(szText, i, false, true))
		{
			sData.add(0, szText.GetPart(0, i));
			szText = szText.GetPart(i, szText.Length() - i);
			return true;
		}
	}
	return false;
}

bool T_StoreComment::addLineNumber(ref string szText, ref T_StoreCommentData sData)
{
	if (szText === NULL || szText.Empty())
	{
		return false;
	}
	if (sData === NULL)
	{
		return false;
	}
	int idx = -1;
	int i = 0;
	int cnt = szText.Length();
	for (i = 0; i < cnt; ++i)
	{
		if (!this.isNumber2(szText, i, true, true))
		{
			idx = i;
			break;
		}
	}
	if (idx < 0)
	{
		sData.add(1, szText);
		szText = "";
		return false;
	}
	sData.add(1, szText.GetPart(0, idx));
	szText = szText.GetPart(idx, szText.Length() - idx);
	return true;
}

bool T_StoreComment::isNumber(int nChar, bool bPoint)
{
	switch (nChar)
	{
		case 43:
		case 45:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
		case 20354:
		case 20610:
		case 20866:
		case 21122:
		case 21378:
		case 21634:
		case 21890:
		case 22146:
		case 22402:
		case 22658:
		case 31617:
		case 31873:
			return true;
		case 46:
		case 17537:
			return bPoint;
		default:
			break;
	}
	return false;
}

bool T_StoreComment::isNumber2(ref string szText, int index, bool bPoint, bool checkNegativeSign)
{
	int nChar = 32;
	if (index < szText.Length())
	{
		nChar = szText[index];
	}
	switch (nChar)
	{
		case 43:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
		case 20354:
		case 20610:
		case 20866:
		case 21122:
		case 21378:
		case 21634:
		case 21890:
		case 22146:
		case 22402:
		case 22658:
		case 24706:
		case 24962:
		case 25218:
		case 29314:
		case 31617:
		case 31873:
			return true;
		case 46:
		case 17537:
			return bPoint;
		case 45:
		case 23681:
			if (checkNegativeSign == false)
			{
				return false;
			}
			else
			{
				return this.isNumber2(szText, index + 1, bPoint, false);
			}
			break;
		default:
			break;
	}
	return false;
}

