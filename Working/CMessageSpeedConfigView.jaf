CMessageSpeedConfigView::CMessageSpeedConfigView()
{
	this.m_nBaseZ = 15000;
	this.m_nTabHeight = 32;
	this.m_nExitBarHeight = 32;
	this.m_nOnCursorObject = -1;
	this.m_DefaultCharProperty.SetSize(20);
	this.m_DefaultCharProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	this.m_DefaultCharProperty.SetEdgeWeight(1.0);
	this.m_DefaultCharProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
}

int CMessageSpeedConfigView::Run(ref array@string TabNameList)
{
	this.Create(TabNameList);
	SYS_画面更新(1, 100, 0, 0);
	this.m_nExitCode = -1;
	this.RunLoop();
	this.Release();
	return this.m_nExitCode;
}

void CMessageSpeedConfigView::Create(ref array@string TabNameList)
{
	CConfigCommonViewCreater ConfigCommonViewCreater;
	ConfigCommonViewCreater.CreateTab(this.m_ConfigTabView, this.m_nBaseZ + 1, 0, TabNameList);
	ConfigCommonViewCreater.CreateBaseSprite(this.m_BaseSprite, 0, this.m_nBaseZ);
	this.m_FastTextSprite.SetText("速", this.m_DefaultCharProperty);
	this.m_FastTextSprite.SetCharSpace(-2);
	this.m_FastTextSprite.SetPos(632, 64);
	this.m_FastTextSprite.SetZ(this.m_nBaseZ + 1);
	this.m_FastTextSprite.SetShow(true);
	this.m_SlowTextSprite.SetText("遅", this.m_DefaultCharProperty);
	this.m_SlowTextSprite.SetCharSpace(-2);
	this.m_SlowTextSprite.SetPos(330, 64);
	this.m_SlowTextSprite.SetZ(this.m_nBaseZ + 1);
	this.m_SlowTextSprite.SetShow(true);
	ConfigCommonViewCreater.CreateExitBar(this.m_ExitBar, this.m_nBaseZ + 1);
	this.CreateMessageSpeedSlider();
	this.CreateAutoModeWaitTimeSlider();
	this.CreateReadedMessageSkipWaitTimeSlider();
	this.CreateDoesNotReadMessageSkipWaitTimeSlider();
	this.CreateSampleMessage();
	this.m_SpaceKeyClick.Init(32, true);
	this.m_LButtonClick.Init(1, true);
	this.m_RButtonClick.Init(2, true);
	this.m_EscapeKeyClick.Init(27, true);
}

void CMessageSpeedConfigView::Release()
{
	this.m_SampleMessageTextSprite.Release();
	this.m_FastTextSprite.Release();
	this.m_SlowTextSprite.Release();
	this.m_ShowSampleMessageCheckBoxSprite.Release();
	this.m_AutoModeWaitTimeResetButtonSprite.Release();
	this.m_AutoModeWaitTimeSlider.Release();
	this.m_AutoModeWaitTimeText.Release();
	this.m_AutoModeWaitTimeSliderBaseSprite.Release();
	this.m_MessageSpeedResetButtonSprite.Release();
	this.m_MessageSpeedSlider.Release();
	this.m_MessageSpeedText.Release();
	this.m_MessageSpeedSliderBaseSprite.Release();
	this.m_ReadedMessageSkipWaitTimeResetButtonSprite.Release();
	this.m_ReadedMessageSkipWaitTimeSlider.Release();
	this.m_ReadedMessageSkipWaitTimeText.Release();
	this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.Release();
	this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.Release();
	this.m_DoesNotReadMessageSkipWaitTimeSlider.Release();
	this.m_DoesNotReadMessageSkipWaitTimeText.Release();
	this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.Release();
	this.m_ExitBar.Release();
	this.m_BaseSprite.Release();
	this.m_ConfigTabView.Release();
}

void CMessageSpeedConfigView::RunLoop()
{
	for (; ; )
	{
		if (!this.CheckInput())
		{
			break;
		}
		this.UpdateMessageSpeedSlider();
		this.UpdateAutoModeWaitTimeSlider();
		this.UpdateReadedMessageSkipWaitTimeSlider();
		this.UpdateDoesNotReadMessageSkipWaitTimeSlider();
		this.UpdateSampleMessage();
		UpdateView(true);
	}
}

void CMessageSpeedConfigView::CreateMessageSpeedSlider()
{
	int nSliderHeight = 24;
	bool ExistBackCG = !g_ConfigModeDocument.GetEachBackCGInfo(0)._GetCg().Empty();
	if (!ExistBackCG)
	{
		this.m_MessageSpeedText.SetText("メッセージ表示速度　", this.m_DefaultCharProperty);
		this.m_MessageSpeedText.SetCharSpace(-2);
		this.m_MessageSpeedText.SetPos(20, 90 + (nSliderHeight - this.m_DefaultCharProperty.GetSize()) / 2);
		this.m_MessageSpeedText.SetZ(this.m_nBaseZ + 1);
	}
	CASRect SliderRect;
	SliderRect = g_ConfigModeDocument.GetMessageSpeedSliderRect();
	if (SliderRect.GetWidth() > 0 && SliderRect.GetHeight() > 0)
	{
		this.m_MessageSpeedSlider.SetRect(SliderRect.GetX(), SliderRect.GetY(), SliderRect.GetWidth(), SliderRect.GetHeight());
	}
	else
	{
		this.m_MessageSpeedSlider.SetRect(338, 90, 300, nSliderHeight);
	}
	if (!ExistBackCG)
	{
		this.m_MessageSpeedSliderBaseSprite.AddCreatePixelOnly(this.m_MessageSpeedSlider.GetWidth(), this.m_MessageSpeedSlider.GetHeight());
		this.m_MessageSpeedSliderBaseSprite.AddFillGradationHorizon(0, 0, this.m_MessageSpeedSlider.GetWidth(), this.m_MessageSpeedSlider.GetHeight(), 128, 128, 128, 192, 192, 192);
		this.m_MessageSpeedSliderBaseSprite.AddFill(0, 0, this.m_MessageSpeedSlider.GetWidth(), 1, 96, 96, 96);
		this.m_MessageSpeedSliderBaseSprite.AddFill(0, 0, 1, this.m_MessageSpeedSlider.GetHeight(), 96, 96, 96);
		this.m_MessageSpeedSliderBaseSprite.Build();
		this.m_MessageSpeedSliderBaseSprite.SetPos(this.m_MessageSpeedSlider.GetX(), this.m_MessageSpeedSlider.GetY());
		this.m_MessageSpeedSliderBaseSprite.SetZ(this.m_nBaseZ + 1);
	}
	string SliderBoxCG = g_ConfigModeDocument.GetMessageSpeedSliderCG();
	string SliderBoxOnCursorCG = g_ConfigModeDocument.GetMessageSpeedSliderOnCursorCG();
	if (!SliderBoxCG.Empty() && !SliderBoxOnCursorCG.Empty())
	{
		this.m_MessageSpeedSlider.SetCG(SliderBoxCG, SliderBoxOnCursorCG);
	}
	else
	{
		this.m_MessageSpeedSlider.CreateSampleSprite(16, nSliderHeight - 2);
	}
	this.m_MessageSpeedSlider.SetZ(this.m_nBaseZ + 2);
	this.m_MessageSpeedSlider.Init();
	this.m_MessageSpeedSlider.SetBoxPosByRate(g_fMessageSpeedRate);
	string ResetButtonKeyUpCG = g_ConfigModeDocument.GetMessageSpeedResetButtonKeyUpCG();
	string ResetButtonKeyDownCG = g_ConfigModeDocument.GetMessageSpeedResetButtonKeyDownCG();
	string ResetButtonKeyUpOnCursorCG = g_ConfigModeDocument.GetMessageSpeedResetButtonKeyUpOnCursorCG();
	string ResetButtonKeyDownOnCursorCG = g_ConfigModeDocument.GetMessageSpeedResetButtonKeyDownOnCursorCG();
	if (ResetButtonKeyUpCG.Empty() || ResetButtonKeyDownCG.Empty() || ResetButtonKeyUpOnCursorCG.Empty() || ResetButtonKeyDownOnCursorCG.Empty())
	{
		this.m_MessageSpeedResetButtonSprite.CreateTextButton(24, 24, "▼", 0);
		this.m_MessageSpeedResetButtonSprite.SetPos(this.m_MessageSpeedSlider.GetX() + (this.m_MessageSpeedSlider.GetWidth() - 24) / 2, this.m_MessageSpeedSlider.GetY() + -28);
	}
	else
	{
		this.m_MessageSpeedResetButtonSprite.CreateCGButton(ResetButtonKeyUpCG, ResetButtonKeyDownCG, ResetButtonKeyUpOnCursorCG, ResetButtonKeyDownOnCursorCG, "");
		CASPos Pos;
		Pos = g_ConfigModeDocument.GetMessageSpeedResetButtonPos();
		this.m_MessageSpeedResetButtonSprite.SetPos(Pos.GetX(), Pos.GetY());
	}
	this.m_MessageSpeedResetButtonSprite.SetZ(this.m_nBaseZ + 3);
}

void CMessageSpeedConfigView::CreateAutoModeWaitTimeSlider()
{
	int nSliderHeight = 24;
	bool ExistBackCG = !g_ConfigModeDocument.GetEachBackCGInfo(0)._GetCg().Empty();
	if (!ExistBackCG)
	{
		this.m_AutoModeWaitTimeText.SetText("オートモード待ち時間", this.m_DefaultCharProperty);
		this.m_AutoModeWaitTimeText.SetCharSpace(-2);
		this.m_AutoModeWaitTimeText.SetPos(20, 170 + (nSliderHeight - this.m_DefaultCharProperty.GetSize()) / 2);
		this.m_AutoModeWaitTimeText.SetZ(this.m_nBaseZ + 1);
	}
	CASRect SliderRect;
	SliderRect = g_ConfigModeDocument.GetAutoModeWaitTimeSliderRect();
	if (SliderRect.GetWidth() > 0 && SliderRect.GetHeight() > 0)
	{
		this.m_AutoModeWaitTimeSlider.SetRect(SliderRect.GetX(), SliderRect.GetY(), SliderRect.GetWidth(), SliderRect.GetHeight());
	}
	else
	{
		this.m_AutoModeWaitTimeSlider.SetRect(338, 170, 300, nSliderHeight);
	}
	if (!ExistBackCG)
	{
		this.m_AutoModeWaitTimeSliderBaseSprite.AddCreatePixelOnly(this.m_AutoModeWaitTimeSlider.GetWidth(), this.m_AutoModeWaitTimeSlider.GetHeight());
		this.m_AutoModeWaitTimeSliderBaseSprite.AddFillGradationHorizon(0, 0, this.m_AutoModeWaitTimeSlider.GetWidth(), this.m_AutoModeWaitTimeSlider.GetHeight(), 128, 128, 128, 192, 192, 192);
		this.m_AutoModeWaitTimeSliderBaseSprite.AddFill(0, 0, this.m_MessageSpeedSlider.GetWidth(), 1, 96, 96, 96);
		this.m_AutoModeWaitTimeSliderBaseSprite.AddFill(0, 0, 1, this.m_MessageSpeedSlider.GetHeight(), 96, 96, 96);
		this.m_AutoModeWaitTimeSliderBaseSprite.Build();
		this.m_AutoModeWaitTimeSliderBaseSprite.SetPos(this.m_AutoModeWaitTimeSlider.GetX(), this.m_AutoModeWaitTimeSlider.GetY());
		this.m_AutoModeWaitTimeSliderBaseSprite.SetZ(this.m_nBaseZ + 1);
	}
	string SliderBoxCG = g_ConfigModeDocument.GetAutoModeWaitTimeSliderCG();
	string SliderBoxOnCursorCG = g_ConfigModeDocument.GetAutoModeWaitTimeSliderOnCursorCG();
	if (!SliderBoxCG.Empty() && !SliderBoxOnCursorCG.Empty())
	{
		this.m_AutoModeWaitTimeSlider.SetCG(SliderBoxCG, SliderBoxOnCursorCG);
	}
	else
	{
		this.m_AutoModeWaitTimeSlider.CreateSampleSprite(16, nSliderHeight - 2);
	}
	this.m_AutoModeWaitTimeSlider.SetZ(this.m_nBaseZ + 2);
	this.m_AutoModeWaitTimeSlider.Init();
	this.m_AutoModeWaitTimeSlider.SetBoxPosByRate(g_fAutoModeWaitTimeRate);
	string ResetButtonKeyUpCG = g_ConfigModeDocument.GetAutoModeWaitTimeResetButtonKeyUpCG();
	string ResetButtonKeyDownCG = g_ConfigModeDocument.GetAutoModeWaitTimeResetButtonKeyDownCG();
	string ResetButtonKeyUpOnCursorCG = g_ConfigModeDocument.GetAutoModeWaitTimeResetButtonKeyUpOnCursorCG();
	string ResetButtonKeyDownOnCursorCG = g_ConfigModeDocument.GetAutoModeWaitTimeResetButtonKeyDownOnCursorCG();
	if (ResetButtonKeyUpCG.Empty() || ResetButtonKeyDownCG.Empty() || ResetButtonKeyUpOnCursorCG.Empty() || ResetButtonKeyDownOnCursorCG.Empty())
	{
		this.m_AutoModeWaitTimeResetButtonSprite.CreateTextButton(24, 24, "▼", 0);
		this.m_AutoModeWaitTimeResetButtonSprite.SetPos(this.m_AutoModeWaitTimeSlider.GetX() + (this.m_AutoModeWaitTimeSlider.GetWidth() - 24) / 2, this.m_AutoModeWaitTimeSlider.GetY() + -28);
	}
	else
	{
		this.m_AutoModeWaitTimeResetButtonSprite.CreateCGButton(ResetButtonKeyUpCG, ResetButtonKeyDownCG, ResetButtonKeyUpOnCursorCG, ResetButtonKeyDownOnCursorCG, "");
		CASPos Pos;
		Pos = g_ConfigModeDocument.GetAutoModeWaitTimeResetButtonPos();
		this.m_AutoModeWaitTimeResetButtonSprite.SetPos(Pos.GetX(), Pos.GetY());
	}
	this.m_AutoModeWaitTimeResetButtonSprite.SetZ(this.m_nBaseZ + 3);
}

void CMessageSpeedConfigView::CreateReadedMessageSkipWaitTimeSlider()
{
	int nSliderHeight = 24;
	bool ExistBackCG = !g_ConfigModeDocument.GetEachBackCGInfo(0)._GetCg().Empty();
	if (!ExistBackCG)
	{
		this.m_ReadedMessageSkipWaitTimeText.SetText("既読スキップ待ち時間　", this.m_DefaultCharProperty);
		this.m_ReadedMessageSkipWaitTimeText.SetCharSpace(-2);
		this.m_ReadedMessageSkipWaitTimeText.SetPos(20, 250 + (nSliderHeight - this.m_DefaultCharProperty.GetSize()) / 2);
		this.m_ReadedMessageSkipWaitTimeText.SetZ(this.m_nBaseZ + 1);
	}
	CASRect SliderRect;
	SliderRect = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeSliderRect();
	if (SliderRect.GetWidth() > 0 && SliderRect.GetHeight() > 0)
	{
		this.m_ReadedMessageSkipWaitTimeSlider.SetRect(SliderRect.GetX(), SliderRect.GetY(), SliderRect.GetWidth(), SliderRect.GetHeight());
	}
	else
	{
		this.m_ReadedMessageSkipWaitTimeSlider.SetRect(338, 250, 300, nSliderHeight);
	}
	if (!ExistBackCG)
	{
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.AddCreatePixelOnly(this.m_ReadedMessageSkipWaitTimeSlider.GetWidth(), this.m_ReadedMessageSkipWaitTimeSlider.GetHeight());
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.AddFillGradationHorizon(0, 0, this.m_ReadedMessageSkipWaitTimeSlider.GetWidth(), this.m_ReadedMessageSkipWaitTimeSlider.GetHeight(), 128, 128, 128, 192, 192, 192);
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.AddFill(0, 0, this.m_ReadedMessageSkipWaitTimeSlider.GetWidth(), 1, 96, 96, 96);
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.AddFill(0, 0, 1, this.m_ReadedMessageSkipWaitTimeSlider.GetHeight(), 96, 96, 96);
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.Build();
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.SetPos(this.m_ReadedMessageSkipWaitTimeSlider.GetX(), this.m_ReadedMessageSkipWaitTimeSlider.GetY());
		this.m_ReadedMessageSkipWaitTimeSliderBaseSprite.SetZ(this.m_nBaseZ + 1);
	}
	string SliderBoxCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeSliderCG();
	string SliderBoxOnCursorCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeSliderOnCursorCG();
	if (!SliderBoxCG.Empty() && !SliderBoxOnCursorCG.Empty())
	{
		this.m_ReadedMessageSkipWaitTimeSlider.SetCG(SliderBoxCG, SliderBoxOnCursorCG);
	}
	else
	{
		this.m_ReadedMessageSkipWaitTimeSlider.CreateSampleSprite(16, nSliderHeight - 2);
	}
	this.m_ReadedMessageSkipWaitTimeSlider.SetZ(this.m_nBaseZ + 2);
	this.m_ReadedMessageSkipWaitTimeSlider.Init();
	this.m_ReadedMessageSkipWaitTimeSlider.SetBoxPosByRate(g_fReadedMessageSkipWaitTimeRate);
	string ResetButtonKeyUpCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeResetButtonKeyUpCG();
	string ResetButtonKeyDownCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeResetButtonKeyDownCG();
	string ResetButtonKeyUpOnCursorCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeResetButtonKeyUpOnCursorCG();
	string ResetButtonKeyDownOnCursorCG = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeResetButtonKeyDownOnCursorCG();
	if (ResetButtonKeyUpCG.Empty() || ResetButtonKeyDownCG.Empty() || ResetButtonKeyUpOnCursorCG.Empty() || ResetButtonKeyDownOnCursorCG.Empty())
	{
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.CreateTextButton(24, 24, "▼", 0);
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.SetPos(this.m_ReadedMessageSkipWaitTimeSlider.GetX() + (this.m_ReadedMessageSkipWaitTimeSlider.GetWidth() - 24) / 2, this.m_ReadedMessageSkipWaitTimeSlider.GetY() + -28);
	}
	else
	{
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.CreateCGButton(ResetButtonKeyUpCG, ResetButtonKeyDownCG, ResetButtonKeyUpOnCursorCG, ResetButtonKeyDownOnCursorCG, "");
		CASPos Pos;
		Pos = g_ConfigModeDocument.GetReadedMessageSkipWaitTimeResetButtonPos();
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.SetPos(Pos.GetX(), Pos.GetY());
	}
	this.m_ReadedMessageSkipWaitTimeResetButtonSprite.SetZ(this.m_nBaseZ + 3);
	if (g_bConfigIsSpeedupForFrameSkip)
	{
		this.m_ReadedMessageSkipWaitTimeSlider.SetShow(false);
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.SetShow(false);
	}
}

void CMessageSpeedConfigView::CreateDoesNotReadMessageSkipWaitTimeSlider()
{
	int nSliderHeight = 24;
	bool ExistBackCG = !g_ConfigModeDocument.GetEachBackCGInfo(0)._GetCg().Empty();
	if (!ExistBackCG)
	{
		this.m_DoesNotReadMessageSkipWaitTimeText.SetText("未読スキップ待ち時間　", this.m_DefaultCharProperty);
		this.m_DoesNotReadMessageSkipWaitTimeText.SetCharSpace(-2);
		this.m_DoesNotReadMessageSkipWaitTimeText.SetPos(20, 330 + (nSliderHeight - this.m_DefaultCharProperty.GetSize()) / 2);
		this.m_DoesNotReadMessageSkipWaitTimeText.SetZ(this.m_nBaseZ + 1);
	}
	CASRect SliderRect;
	SliderRect = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeSliderRect();
	if (SliderRect.GetWidth() > 0 && SliderRect.GetHeight() > 0)
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.SetRect(SliderRect.GetX(), SliderRect.GetY(), SliderRect.GetWidth(), SliderRect.GetHeight());
	}
	else
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.SetRect(338, 330, 300, nSliderHeight);
	}
	if (!ExistBackCG)
	{
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.AddCreatePixelOnly(this.m_DoesNotReadMessageSkipWaitTimeSlider.GetWidth(), this.m_DoesNotReadMessageSkipWaitTimeSlider.GetHeight());
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.AddFillGradationHorizon(0, 0, this.m_DoesNotReadMessageSkipWaitTimeSlider.GetWidth(), this.m_DoesNotReadMessageSkipWaitTimeSlider.GetHeight(), 128, 128, 128, 192, 192, 192);
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.AddFill(0, 0, this.m_DoesNotReadMessageSkipWaitTimeSlider.GetWidth(), 1, 96, 96, 96);
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.AddFill(0, 0, 1, this.m_DoesNotReadMessageSkipWaitTimeSlider.GetHeight(), 96, 96, 96);
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.Build();
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.SetPos(this.m_DoesNotReadMessageSkipWaitTimeSlider.GetX(), this.m_DoesNotReadMessageSkipWaitTimeSlider.GetY());
		this.m_DoesNotReadMessageSkipWaitTimeSliderBaseSprite.SetZ(this.m_nBaseZ + 1);
	}
	string SliderBoxCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeSliderCG();
	string SliderBoxOnCursorCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeSliderOnCursorCG();
	if (!SliderBoxCG.Empty() && !SliderBoxOnCursorCG.Empty())
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.SetCG(SliderBoxCG, SliderBoxOnCursorCG);
	}
	else
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.CreateSampleSprite(16, nSliderHeight - 2);
	}
	this.m_DoesNotReadMessageSkipWaitTimeSlider.SetZ(this.m_nBaseZ + 2);
	this.m_DoesNotReadMessageSkipWaitTimeSlider.Init();
	this.m_DoesNotReadMessageSkipWaitTimeSlider.SetBoxPosByRate(g_fDoesNotReadMessageSkipWaitTimeRate);
	string ResetButtonKeyUpCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeResetButtonKeyUpCG();
	string ResetButtonKeyDownCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeResetButtonKeyDownCG();
	string ResetButtonKeyUpOnCursorCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeResetButtonKeyUpOnCursorCG();
	string ResetButtonKeyDownOnCursorCG = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeResetButtonKeyDownOnCursorCG();
	if (ResetButtonKeyUpCG.Empty() || ResetButtonKeyDownCG.Empty() || ResetButtonKeyUpOnCursorCG.Empty() || ResetButtonKeyDownOnCursorCG.Empty())
	{
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.CreateTextButton(24, 24, "▼", 0);
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.SetPos(this.m_DoesNotReadMessageSkipWaitTimeSlider.GetX() + (this.m_DoesNotReadMessageSkipWaitTimeSlider.GetWidth() - 24) / 2, this.m_DoesNotReadMessageSkipWaitTimeSlider.GetY() + -28);
	}
	else
	{
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.CreateCGButton(ResetButtonKeyUpCG, ResetButtonKeyDownCG, ResetButtonKeyUpOnCursorCG, ResetButtonKeyDownOnCursorCG, "");
		CASPos Pos;
		Pos = g_ConfigModeDocument.GetDoesNotReadMessageSkipWaitTimeResetButtonPos();
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.SetPos(Pos.GetX(), Pos.GetY());
	}
	this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.SetZ(this.m_nBaseZ + 3);
	if (g_bConfigIsSpeedupForFrameSkip)
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.SetShow(false);
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.SetShow(false);
	}
}

void CMessageSpeedConfigView::CreateSampleMessage()
{
	this.m_ShowSampleMessageCheckBoxSprite.CreateSampleSprite(20, 410, this.m_nBaseZ + 1, 20, 20);
	this.m_ShowSampleMessageCheckBoxSprite.SetTextCharSpace(-4);
	this.m_ShowSampleMessageCheckBoxSprite.SetText("サンプルメッセージを表示する", this.m_DefaultCharProperty);
	this.m_ShowSampleMessageCheckBoxSprite.SetShowCheckMark(g_ShowSampleMessage);
	this.m_SampleMessageTextSprite.SetText("", this.m_DefaultCharProperty);
	this.m_SampleMessageTextSprite.SetCharSpace(-2);
	this.m_SampleMessageTextSprite.SetPos(50, 440);
	this.m_SampleMessageTextSprite.SetZ(this.m_nBaseZ + 1);
	this.m_SampleMessageTextSprite.SetShow(g_ShowSampleMessage);
	this.m_SampleMessageTimer.Reset();
}

void CMessageSpeedConfigView::UpdateSampleMessage()
{
	this.m_SampleMessageTextSprite.SetTextWithoutProperty(AFL_Config_GetSampleMessageTextByElapsedTime(this.m_SampleMessageTimer.Get()));
}

bool CMessageSpeedConfigView::CheckInput()
{
	int nPrevOnCursorObject = this.m_nOnCursorObject;
	this.m_nOnCursorObject = -1;
	if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
	{
		this.m_MessageSpeedSlider.UpdateState();
		if (this.m_MessageSpeedSlider.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 0;
		}
	}
	if (!this.m_MessageSpeedSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
	{
		this.m_AutoModeWaitTimeSlider.UpdateState();
		if (this.m_AutoModeWaitTimeSlider.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 1;
		}
	}
	if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_MessageSpeedSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging() && !g_bConfigIsSpeedupForFrameSkip)
	{
		this.m_ReadedMessageSkipWaitTimeSlider.UpdateState();
		if (this.m_ReadedMessageSkipWaitTimeSlider.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 2;
		}
	}
	if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_MessageSpeedSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !g_bConfigIsSpeedupForFrameSkip)
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.UpdateState();
		if (this.m_DoesNotReadMessageSkipWaitTimeSlider.IsMouseCursorInRect())
		{
			this.m_nOnCursorObject = 3;
		}
	}
	if (this.m_nOnCursorObject == -1 && this.m_ShowSampleMessageCheckBoxSprite.IsMouseCursorInRect())
	{
		this.m_nOnCursorObject = 8;
	}
	this.m_ShowSampleMessageCheckBoxSprite.SetShowCursor(this.m_ShowSampleMessageCheckBoxSprite.IsMouseCursorInRect());
	this.m_MessageSpeedResetButtonSprite.UpdateState();
	this.m_AutoModeWaitTimeResetButtonSprite.UpdateState();
	if (!g_bConfigIsSpeedupForFrameSkip)
	{
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.UpdateState();
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.UpdateState();
	}
	if (this.m_nOnCursorObject == -1 && this.m_MessageSpeedResetButtonSprite.IsMouseCursorInRect())
	{
		this.m_nOnCursorObject = 4;
	}
	else if (this.m_nOnCursorObject == -1 && this.m_AutoModeWaitTimeResetButtonSprite.IsMouseCursorInRect())
	{
		this.m_nOnCursorObject = 5;
	}
	else if (this.m_nOnCursorObject == -1 && this.m_ReadedMessageSkipWaitTimeResetButtonSprite.IsMouseCursorInRect())
	{
		this.m_nOnCursorObject = 6;
	}
	else if (this.m_nOnCursorObject == -1 && this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.IsMouseCursorInRect())
	{
		this.m_nOnCursorObject = 7;
	}
	this.m_ConfigTabView.Update();
	if (this.m_nOnCursorObject == -1)
	{
		int nObject = this.m_ConfigTabView.GetOnMouseCursorObject();
		if (nObject != -1)
		{
			this.m_nOnCursorObject = 20 + nObject;
		}
	}
	this.m_ExitBar.Update();
	if (this.m_nOnCursorObject == -1)
	{
		int nObject = this.m_ExitBar.GetOnMouseCursorObject();
		if (nObject != -1)
		{
			this.m_nOnCursorObject = 30 + nObject;
		}
	}
	if (this.m_nOnCursorObject != -1 && nPrevOnCursorObject != this.m_nOnCursorObject && !this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_MessageSpeedSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
	{
		this.PlaySoundUnderCursor();
	}
	if (this.m_SpaceKeyClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_RButtonClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_EscapeKeyClick.IsClick(-2147483648))
	{
		this.PlaySoundCancel();
		return false;
	}
	if (this.m_LButtonClick.IsClick(this.m_nOnCursorObject) && this.m_nOnCursorObject != -1)
	{
		if (this.m_nOnCursorObject == 4)
		{
			this.PlaySoundDecide();
			g_fMessageSpeedRate = 0.5;
			this.m_MessageSpeedSlider.SetBoxPosByRate(g_fMessageSpeedRate);
		}
		else if (this.m_nOnCursorObject == 5)
		{
			this.PlaySoundDecide();
			g_fAutoModeWaitTimeRate = 0.5;
			this.m_AutoModeWaitTimeSlider.SetBoxPosByRate(g_fAutoModeWaitTimeRate);
		}
		else if (this.m_nOnCursorObject == 6 && !g_bConfigIsSpeedupForFrameSkip)
		{
			this.PlaySoundDecide();
			g_fReadedMessageSkipWaitTimeRate = 0.666666686534882;
			this.m_ReadedMessageSkipWaitTimeSlider.SetBoxPosByRate(g_fReadedMessageSkipWaitTimeRate);
		}
		else if (this.m_nOnCursorObject == 7 && !g_bConfigIsSpeedupForFrameSkip)
		{
			this.PlaySoundDecide();
			g_fDoesNotReadMessageSkipWaitTimeRate = 0.666666686534882;
			this.m_DoesNotReadMessageSkipWaitTimeSlider.SetBoxPosByRate(g_fDoesNotReadMessageSkipWaitTimeRate);
		}
		else if (this.m_nOnCursorObject == 8)
		{
			g_ShowSampleMessage = !g_ShowSampleMessage;
			this.m_ShowSampleMessageCheckBoxSprite.SetShowCheckMark(g_ShowSampleMessage);
			this.m_SampleMessageTextSprite.SetShow(g_ShowSampleMessage);
			if (g_ShowSampleMessage)
			{
				this.m_SampleMessageTimer.Reset();
			}
		}
		else if (this.m_nOnCursorObject == 30 + 0)
		{
			this.PlaySoundDecide();
			ゲーム終了();
		}
		else if (this.m_nOnCursorObject == 30 + 1)
		{
			this.PlaySoundDecide();
			タイトルに戻る();
		}
		else if (this.m_nOnCursorObject == 30 + 2)
		{
			this.PlaySoundDecide();
			return false;
		}
		else if (this.m_nOnCursorObject >= 20 && this.m_nOnCursorObject < 26 && this.m_nOnCursorObject - 20 != 0)
		{
			this.PlaySoundDecide();
			this.m_nExitCode = this.m_nOnCursorObject - 20;
			return false;
		}
	}
	return true;
}

void CMessageSpeedConfigView::UpdateMessageSpeedSlider()
{
	if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
	{
		if (this.m_MessageSpeedSlider.CheckBeginDrag())
		{
			this.PlaySoundDecide();
		}
		this.m_MessageSpeedSlider.UpdateDraggingBox();
	}
	g_fMessageSpeedRate = this.m_MessageSpeedSlider.GetRateByBoxPos();
}

void CMessageSpeedConfigView::UpdateAutoModeWaitTimeSlider()
{
	if (!this.m_MessageSpeedSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
	{
		if (this.m_AutoModeWaitTimeSlider.CheckBeginDrag())
		{
			this.PlaySoundDecide();
		}
		this.m_AutoModeWaitTimeSlider.UpdateDraggingBox();
	}
	g_fAutoModeWaitTimeRate = this.m_AutoModeWaitTimeSlider.GetRateByBoxPos();
}

void CMessageSpeedConfigView::UpdateReadedMessageSkipWaitTimeSlider()
{
	if (!g_bConfigIsSpeedupForFrameSkip)
	{
		if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_MessageSpeedSlider.IsDragging() && !this.m_DoesNotReadMessageSkipWaitTimeSlider.IsDragging())
		{
			if (this.m_ReadedMessageSkipWaitTimeSlider.CheckBeginDrag())
			{
				this.PlaySoundDecide();
			}
			this.m_ReadedMessageSkipWaitTimeSlider.UpdateDraggingBox();
		}
		g_fReadedMessageSkipWaitTimeRate = this.m_ReadedMessageSkipWaitTimeSlider.GetRateByBoxPos();
	}
	else
	{
		this.m_ReadedMessageSkipWaitTimeSlider.SetShow(false);
		this.m_ReadedMessageSkipWaitTimeResetButtonSprite.SetShow(false);
	}
}

void CMessageSpeedConfigView::UpdateDoesNotReadMessageSkipWaitTimeSlider()
{
	if (!g_bConfigIsSpeedupForFrameSkip)
	{
		if (!this.m_AutoModeWaitTimeSlider.IsDragging() && !this.m_MessageSpeedSlider.IsDragging() && !this.m_ReadedMessageSkipWaitTimeSlider.IsDragging())
		{
			if (this.m_DoesNotReadMessageSkipWaitTimeSlider.CheckBeginDrag())
			{
				this.PlaySoundDecide();
			}
			this.m_DoesNotReadMessageSkipWaitTimeSlider.UpdateDraggingBox();
		}
		g_fDoesNotReadMessageSkipWaitTimeRate = this.m_DoesNotReadMessageSkipWaitTimeSlider.GetRateByBoxPos();
	}
	else
	{
		this.m_DoesNotReadMessageSkipWaitTimeSlider.SetShow(false);
		this.m_DoesNotReadMessageSkipWaitTimeResetButtonSprite.SetShow(false);
	}
}

void CMessageSpeedConfigView::PlaySoundDecide()
{
	if (g_ConfigModeDocument.GetSoundDecide() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundDecide());
}

void CMessageSpeedConfigView::PlaySoundUnderCursor()
{
	if (g_ConfigModeDocument.GetSoundUnderCursor() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundUnderCursor());
}

void CMessageSpeedConfigView::PlaySoundCancel()
{
	if (g_ConfigModeDocument.GetSoundCancel() == -2147483648)
	{
		return;
	}
	システム効果音(g_ConfigModeDocument.GetSoundCancel());
}

