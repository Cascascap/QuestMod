int T_ConfigWindow::getCheckID(int nIndex)
{
	return nIndex < 0 || nIndex >= 10 ? -1 : 210000 + nIndex + 1;
}

int T_ConfigWindow::getCheckIndex(int nID)
{
	int idx = nID + -210001;
	return idx < 0 || idx >= 10 ? -1 : idx;
}

T_ConfigWindow::T_ConfigWindow()
{
	this.clear();
	this.m_ManualTextList[3] = AFL_Config_GetHelpText(0, true);
	this.m_ManualTextList[4] = AFL_Config_GetHelpText(1, true);
	this.m_ManualTextList[5] = AFL_Config_GetHelpText(2, true);
	this.m_ManualTextList[7] = AFL_Config_GetHelpText(4, true);
	this.m_ManualTextList[8] = AFL_Config_GetHelpText(5, true);
	this.m_ManualTextCharSpriteProperty.SetType(258);
	this.m_ManualTextCharSpriteProperty.SetSize(22);
	this.m_ManualTextCharSpriteProperty.SetColor(CF_CASColor(255, 255, 255, 255));
	this.m_ManualTextCharSpriteProperty.SetEdgeWeight(0.75);
	this.m_ManualTextCharSpriteProperty.SetEdgeColor(CF_CASColor(0, 0, 0, 255));
}

T_ConfigWindow::~T_ConfigWindow()
{
	this.delete();
}

int T_ConfigWindow::run()
{
	int nRet = 0;
	int nID = this.getFirstCheckBox();
	if (!this.create())
	{
		return -1;
	}
	UPDATE(true);
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

int T_ConfigWindow::moveUp(int nID)
{
	if (nID > 210000)
	{
		return this.getPrevCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return this.getLastCheckBox();
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_上矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		return 200001;
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigWindow::moveDown(int nID)
{
	if (nID > 210000)
	{
		return this.getNextCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return 100011;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_下矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		return this.getFirstCheckBox();
	}
label0:
	return this.getLastCheckBox();
}

int T_ConfigWindow::moveLeft(int nID)
{
	if (nID > 210000)
	{
		return nID;
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return nID;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_左矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigWindow::moveRight(int nID)
{
	if (nID > 210000)
	{
		return nID;
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return nID;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_右矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getLastCheckBox();
}

bool T_ConfigWindow::create()
{
	this.delete();
	this.m_spBase.setCg(40003);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(15000, -1);
	this.m_spBase.setShow(true);
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfsCheck = this.m_aspCheck[i];
		rfsCheck.setCg(40037);
		rfsCheck.setZ(15001);
	}
	this.m_sButton.create();
	this.createCheckBox(0, 70, 105, 40049, "");
	this.createCheckBox(1, 70, 135, 40049, "");
	this.createCheckBox(2, 70, 225, 40049, "");
	this.createCheckBox(3, 70, 255, 40049, "");
	this.createCheckBox(4, 70, 345, 40049, "");
	this.createCheckBox(5, 70, 375, 40049, "");
	this.createCheckBox(6, 70, 435, 40049, "");
	this.createCheckBox(7, 70, 465, 40049, "");
	this.createCheckBox(8, 70, 495, 40049, "");
	this.createCheckBox(9, 70, 525, 40049, "");
	コンフィグ共通_ボタン作成_土台付(this.m_sButton, 200001, 70, 570, 40050, 0);
	コンフィグ共通_作成(this.m_sButton);
	this.m_sButton.setButtonActive(100003, false);
	this.m_sButton.setZ(15001);
	this.m_sButton.setShow(true);
	this.m_ManualTextSprite.SetPos(600, 125);
	this.m_ManualTextSprite.SetZ(15002);
	this.m_ManualTextSprite.SetCharSpace(-8);
	this.setValue();
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&コンフィグ_上矢印);
	this.m_sInputKey.setArrowDownCallback(&コンフィグ_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&コンフィグ_左矢印);
	this.m_sInputKey.setArrowRightCallback(&コンフィグ_右矢印);
	this.m_sInputKey.setSelectCallback(&コンフィグ_選択設定);
	return true;
}

void T_ConfigWindow::delete()
{
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspCheck[i].delete();
	}
	this.m_spBase.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.m_ManualTextSprite.Release();
	this.clear();
}

void T_ConfigWindow::clear()
{
	return;
}

bool T_ConfigWindow::createCheckBox(int nIndex, int nX, int nY, int nCgNo, string szText)
{
	if (nIndex < 0 || nIndex >= this.m_aspCheck.Numof())
	{
		return false;
	}
	if (!コンフィグ共通_チェックＢＯＸ作成(this.m_sButton, this.getCheckID(nIndex), nX, nY, nCgNo))
	{
		return false;
	}
	this.m_aspCheck[nIndex].setPos(nX, nY);
	return true;
}

bool T_ConfigWindow::exec(int nID, ref int nRet)
{
	nRet = 0;
	if (nID > 210000)
	{
		return this.execCheckBox(this.getCheckIndex(nID));
	}
	switch (nID)
	{
		case 200001:
			AFL_Config_InitMainWindowPosAndSize();
			this.setValue();
			return false;
		default:
			break;
	}
	int nRet2 = コンフィグ共通_処理(nID);
	if (nRet2 != 0)
	{
		nRet = nRet2 > 0 ? nRet2 : 0;
		return true;
	}
	return false;
}

bool T_ConfigWindow::execCheckBox(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			AFL_Config_SetWindowMode(true);
			break;
		case 1:
			AFL_Config_SetWindowMode(false);
			break;
		case 2:
			AFL_Config_SetAspectRatio(0);
			break;
		case 3:
			AFL_Config_SetAspectRatio(1);
			break;
		case 4:
			AFL_Config_SetScalingType(0);
			break;
		case 5:
			AFL_Config_SetScalingType(1);
			break;
		case 6:
			AFL_Config_SetRecordPosSize(!AFL_Config_GetRecordPosSize());
			break;
		case 7:
			AFL_Config_SetMinimizeByFullScreenInactive(!AFL_Config_GetMinimizeByFullScreenInactive());
			break;
		case 8:
			AFL_Config_SetSleepByInactive(!AFL_Config_GetSleepByInactive());
			break;
		case 9:
			AFL_Config_SetOverFrameRateSleep(!AFL_Config_GetOverFrameRateSleep());
			break;
		default:
			return false;
	}
	this.setValue();
	return false;
}

int T_ConfigWindow::checkSelect(int nID)
{
	int nRet = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		int nID4 = this.checkWheel();
		if (nID4 > 0)
		{
			nRet = nID4;
			break;
		}
		if (キャンセル_確認())
		{
			nRet = 100019;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		this.UpdateManualText(this.getCheckIndex(nID2));
		UPDATE(true);
	}
	return nRet;
}

int T_ConfigWindow::checkInput(ref int nSelectID)
{
	return this.m_sButton.checkInput(nSelectID);
}

int T_ConfigWindow::checkKey(int nID)
{
	int nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

int T_ConfigWindow::checkWheel()
{
	switch (ホイール_確認(true))
	{
		case 9991:
			return 100002;
		case 9992:
			return 100004;
		default:
			break;
	}
	ホイール_クリア();
	return 0;
}

void T_ConfigWindow::resetSelect()
{
	this.m_sButton.resetSelect();
}

void T_ConfigWindow::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(nID, bSelect, true);
}

void T_ConfigWindow::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	this.m_sButton.setButtonCursor(nID);
}

void T_ConfigWindow::setValue()
{
	if (AFL_Config_GetWindowMode())
	{
		this.m_aspCheck[0].setShow(1);
		this.m_aspCheck[1].setShow(0);
		this.m_sButton.setButtonActive(this.getCheckID(0), false);
		this.m_sButton.setButtonActive(this.getCheckID(1), true);
	}
	else
	{
		this.m_aspCheck[0].setShow(0);
		this.m_aspCheck[1].setShow(1);
		this.m_sButton.setButtonActive(this.getCheckID(0), true);
		this.m_sButton.setButtonActive(this.getCheckID(1), false);
	}
	if (AFL_Config_GetAspectRatio() == 1)
	{
		this.m_aspCheck[2].setShow(0);
		this.m_aspCheck[3].setShow(1);
		this.m_sButton.setButtonActive(this.getCheckID(2), true);
		this.m_sButton.setButtonActive(this.getCheckID(3), false);
	}
	else
	{
		this.m_aspCheck[2].setShow(1);
		this.m_aspCheck[3].setShow(0);
		this.m_sButton.setButtonActive(this.getCheckID(2), false);
		this.m_sButton.setButtonActive(this.getCheckID(3), true);
	}
	if (AFL_Config_GetScalingType() == 1)
	{
		this.m_aspCheck[4].setShow(0);
		this.m_aspCheck[5].setShow(1);
		this.m_sButton.setButtonActive(this.getCheckID(4), true);
		this.m_sButton.setButtonActive(this.getCheckID(5), false);
	}
	else
	{
		this.m_aspCheck[4].setShow(1);
		this.m_aspCheck[5].setShow(0);
		this.m_sButton.setButtonActive(this.getCheckID(4), false);
		this.m_sButton.setButtonActive(this.getCheckID(5), true);
	}
	this.m_aspCheck[6].setShow(AFL_Config_GetRecordPosSize());
	this.m_aspCheck[7].setShow(AFL_Config_GetMinimizeByFullScreenInactive());
	this.m_aspCheck[8].setShow(AFL_Config_GetSleepByInactive());
	this.m_aspCheck[9].setShow(AFL_Config_GetOverFrameRateSleep());
}

void T_ConfigWindow::UpdateManualText(int nIndex)
{
	if (nIndex < 0 || nIndex >= this.m_ManualTextList.Numof())
	{
		this.m_ManualTextSprite.SetShow(false);
		return;
	}
	this.m_ManualTextSprite.SetText(this.m_ManualTextList[nIndex], this.m_ManualTextCharSpriteProperty);
	this.m_ManualTextSprite.SetShow(true);
}

int T_ConfigWindow::getPrevCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getLastCheckBox();
	}
	--idx;
	if (idx < 0)
	{
		return 100001;
	}
	return this.getCheckID(idx);
}

int T_ConfigWindow::getNextCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getFirstCheckBox();
	}
	++idx;
	if (idx >= 10)
	{
		return 200001;
	}
	return this.getCheckID(idx);
}

int T_ConfigWindow::getFirstCheckBox()
{
	return this.getCheckID(0);
}

int T_ConfigWindow::getLastCheckBox()
{
	return this.getCheckID(9);
}

