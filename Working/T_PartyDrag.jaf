int T_PartyDrag::getTargetID()
{
	return this.m_nTargetID;
}

bool T_PartyDrag::isCreated()
{
	return this.m_nCharaNo > 0;
}

T_PartyDrag::T_PartyDrag()
{
	this.clear();
	int i = 0;
	int cnt = this.m_arcChara.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_arcChara[i].set(戦闘味方_位置Ｘ(i), 戦闘味方_位置Ｙ(i), 334, 170);
	}
	this.m_rcErase.set2(936, 638, 1015, 717);
}

T_PartyDrag::~T_PartyDrag()
{
	this.delete();
}

bool T_PartyDrag::create(int nMode, int nLayout, bool bCustom, int nIndex, int nCharaNo, ref T_CharaFace rfsFace)
{
	this.delete();
	if (!キャラ_登録済(nCharaNo))
	{
		return false;
	}
	if (!this.createIcon(9001, nLayout, nCharaNo, rfsFace))
	{
		return false;
	}
	if (nMode == 1)
	{
		this.m_spFrame.create(this.m_rcErase.getWidth(), this.m_rcErase.getHeight(), 216, 255, 0, 102);
		this.m_spFrame.setPos(this.m_rcErase.m_nSx, this.m_rcErase.m_nSy);
		this.m_spFrame.setZ(8991);
	}
	if (bCustom)
	{
		this.createCustom(8991, nLayout);
	}
	this.createList(nLayout);
	this.m_nIconX = rfsFace.getPosX();
	this.m_nIconY = rfsFace.getPosY();
	this.m_nMode = nMode;
	this.m_bCustom = bCustom;
	this.m_nCustomX = nLayout == 1 ? -3 : -3;
	this.m_nCustomY = nLayout == 1 ? -6 : -17;
	this.m_nCurrentIndex = nIndex;
	this.m_nCharaNo = nCharaNo;
	return true;
}

void T_PartyDrag::delete()
{
	int i = 0;
	int cnt = this.m_aspScroll1.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspScroll1[i].delete();
		this.m_aspScroll2[i].delete();
	}
	this.m_spDragIcon.delete();
	this.m_spFrame.delete();
	this.m_spCustom.delete();
	this.clear();
}

void T_PartyDrag::clear()
{
	this.scrollEnd();
	if (!this.m_arcList.Empty())
	{
		this.m_arcList.Free();
	}
	this.m_nIconX = -1;
	this.m_nIconX = -1;
	this.m_nMode = -1;
	this.m_bCustom = false;
	this.m_nCustomX = -1;
	this.m_nCustomY = -1;
	this.m_nCurrentIndex = -1;
	this.m_nCharaNo = -1;
	this.m_nSelectID = -1;
	this.m_nTargetID = -1;
	this.m_bPlayDrag = false;
}

bool T_PartyDrag::run()
{
	bool bRet = false;
	T_Rect sRect;
	T_DragMouse sDrag;
	if (this.m_nCurrentIndex >= 0)
	{
		this.m_nSelectID = パーティ_配置ＩＤ(this.m_nCurrentIndex);
		this.setSelect(this.m_nSelectID, true);
	}
	else
	{
		this.resetSelect();
	}
	sDrag.create2(this.m_spDragIcon, sRect);
	sDrag.setSoundDrop(0);
	sDrag.setSoundError(0);
	sDrag.setDragCallback(&パーティ編成_ドラッグ);
	sDrag.setDropCallback(&パーティ編成_ドロップ);
	sDrag.setDragCallbackType(this.m_bCustom ? 1 : 0);
	if (キー_押下(1))
	{
		bRet = sDrag.run(0);
	}
	else
	{
		bRet = sDrag.runJoypad(0);
	}
	sDrag.delete();
	return bRet;
}

void T_PartyDrag::execDrag(int nX, int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	int i = 0;
	int cnt = this.m_arcChara.Numof();
	int nSelectID = -1;
	int nMax = 0;
	ref T_Sprite spIcon = this.m_spDragIcon.getSp();
	for (i = 0; i < cnt; ++i)
	{
		int nSize = this.m_arcChara[i].spriteIntersect(spIcon);
		if (nSize > nMax)
		{
			nSelectID = パーティ_配置ＩＤ(i);
			nMax = nSize;
		}
	}
	if (this.m_nMode == 1)
	{
		int nSize = this.m_rcErase.spriteIntersect(spIcon);
		if (nSize > nMax)
		{
			nSelectID = 999;
			nMax = nSize;
		}
	}
	if (this.m_bCustom)
	{
		cnt = this.m_arcList.Numof();
		for (i = 0; i < cnt; ++i)
		{
			int nSize = this.m_arcList[i].spriteIntersect(spIcon);
			if (nSize > nMax)
			{
				nSelectID = パーティ_一覧ＩＤ(i);
				nMax = nSize;
			}
		}
		cnt = this.m_aspScroll1.Numof();
		for (i = 0; i < cnt; ++i)
		{
			T_Rect rcWork;
			rcWork = this.m_aspScroll1[i].getRect();
			int nSize = rcWork.spriteIntersect(spIcon);
			if (nSize > nMax)
			{
				nSelectID = 991 + i;
				nMax = nSize;
			}
		}
	}
	if (nSelectID != this.m_nSelectID)
	{
		this.setSelect(this.m_nSelectID, false);
		this.setSelect(nSelectID, true);
	}
	this.m_nSelectID = nSelectID;
	this.execScroll(nSelectID);
}

bool T_PartyDrag::execDrop(int nX, int nY)
{
	this.m_nTargetID = -1;
	if (!this.isCreated())
	{
		return false;
	}
	bool bRet = false;
	if (this.m_nSelectID <= 0)
	{
		goto label0;
	}
	switch (this.m_nSelectID)
	{
		case 999:
			this.m_nTargetID = this.m_nSelectID;
			if (パーティ一覧_キャラ削除確認(this.m_nMode, this.m_nCharaNo))
			{
				bRet = true;
			}
			goto label0;
		case 991:
		case 992:
			goto label0;
		default:
			break;
	}
	if (this.m_nSelectID > 130000)
	{
		if (!パーティ編成_ドロップ確認(this.m_nSelectID, this.m_nCharaNo))
		{
			goto label0;
		}
	}
	else if (!this.m_bCustom)
	{
		goto label0;
	}
	bRet = true;
	this.m_nTargetID = this.m_nSelectID;
label0:
	this.resetSelect();
	this.scrollEnd();
	return bRet;
}

void T_PartyDrag::moveUp(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectID = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_上矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_PartyDrag::moveDown(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectID = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_下矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_PartyDrag::moveLeft(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectID = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_左矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

void T_PartyDrag::moveRight(ref int nX, ref int nY)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nX === NULL || nX == -2147483648)
	{
		return;
	}
	if (nY === NULL || nY == -2147483648)
	{
		return;
	}
	int nSelectID = -1;
	int nTime = 250;
	int nKey = 0;
	while (キー_決定_マウスなし() > 0)
	{
		nKey = キー_右矢印(false);
		if (nKey <= 0)
		{
			break;
		}
		UPDATE(true);
		if (!キー_離し待ち_タイマ(nTime, nKey, true))
		{
			break;
		}
		nTime = 50;
	}
	キー_離し待ち(nKey, true);
}

bool T_PartyDrag::createIcon(int nZ, int nLayout, int nCharaNo, ref T_CharaFace rfsFace)
{
	int nX = rfsFace.getPosX();
	int nY = rfsFace.getPosY();
	if (!this.m_spDragIcon.copy(rfsFace.getSp(), false))
	{
		return false;
	}
	if (キー_押下(1))
	{
		int nMx = 0;
		int nMy = 0;
		if (!マウス_位置取得(nMx, nMy))
		{
			return false;
		}
		nX = nMx - this.m_spDragIcon.getWidth() / 2;
		nY = nMy - this.m_spDragIcon.getHeight() / 2;
	}
	this.m_spDragIcon.setPos(nX, nY);
	this.m_spDragIcon.setZ(nZ, -1);
	this.m_spDragIcon.setShow(true);
	return true;
}

bool T_PartyDrag::createCustom(int nZ, int nLayout)
{
	this.m_spCustom.setCg(nLayout == 1 ? 11060 : 11059);
	this.m_spCustom.setZ(nZ);
	if (!ＣＧ_分割_横(11057, this.m_aspScroll1))
	{
		return false;
	}
	if (!ＣＧ_分割_横(11058, this.m_aspScroll2))
	{
		return false;
	}
	int i = 0;
	int cnt = this.m_aspScroll1.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int nX = 0 + 512 * i;
		ref T_Sprite spWork1 = this.m_aspScroll1[i];
		spWork1.setPos(nX, 0);
		spWork1.setZ(nZ);
		spWork1.setShow(1);
		ref T_Sprite spWork2 = this.m_aspScroll2[i];
		spWork2.setPos(nX, 0);
		spWork2.setZ(nZ);
		spWork2.setShow(1);
	}
	return true;
}

void T_PartyDrag::createList(int nLayout)
{
	int i = 0;
	int cnt = パーティ一覧_数(nLayout);
	int nW = パーティ一覧_幅(nLayout);
	int nH = パーティ一覧_高(nLayout);
	if (!this.m_arcList.Empty())
	{
		this.m_arcList.Free();
	}
	this.m_arcList.Alloc(cnt);
	for (i = 0; i < cnt; ++i)
	{
		this.m_arcList[i].set(パーティ一覧_キャラＸ(i, false, nLayout), パーティ一覧_キャラＹ(i, false, nLayout), nW, nH);
	}
}

bool T_PartyDrag::execScroll(int nID)
{
	if (!this.m_bCustom)
	{
		return false;
	}
	switch (nID)
	{
		case 991:
			return this.scrollLeft();
		case 992:
			return this.scrollRight();
		default:
			break;
	}
	this.scrollEnd();
	return false;
}

bool T_PartyDrag::scrollLeft()
{
	if (!this.m_bCustom)
	{
		return false;
	}
	if (this.m_nScrollID != 991)
	{
		this.scrollEnd();
		this.m_nScrollTime = 250;
	}
	else
	{
		if (this.m_sScrollTimer.Get() < this.m_nScrollTime)
		{
			return false;
		}
		this.m_nScrollTime = 10;
	}
	パーティ編成_左スクロール();
	this.m_sScrollTimer.Reset();
	this.m_nScrollID = 991;
	return true;
}

bool T_PartyDrag::scrollRight()
{
	if (!this.m_bCustom)
	{
		return false;
	}
	if (this.m_nScrollID != 992)
	{
		this.scrollEnd();
		this.m_nScrollTime = 250;
	}
	else
	{
		if (this.m_sScrollTimer.Get() < this.m_nScrollTime)
		{
			return false;
		}
		this.m_nScrollTime = 10;
	}
	パーティ編成_右スクロール();
	this.m_sScrollTimer.Reset();
	this.m_nScrollID = 992;
	return true;
}

void T_PartyDrag::scrollEnd()
{
	this.m_nScrollID = 0;
	this.m_nScrollTime = -1;
}

void T_PartyDrag::resetSelect()
{
	パーティ編成_キャラ選択設定(パーティ_配置インデクス(this.m_nSelectID), false);
	this.m_spFrame.setShow(0);
	this.m_spCustom.setShow(0);
	int i = 0;
	int cnt = this.m_aspScroll1.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspScroll1[i].setShow(1);
		this.m_aspScroll2[i].setShow(0);
	}
	this.m_nSelectID = -1;
}

void T_PartyDrag::setSelect(int nSelectID, bool bSelect)
{
	switch (nSelectID)
	{
		case 999:
			this.m_spFrame.setShow(bSelect);
			return;
		case 991:
			this.m_aspScroll1[0].setShow(!bSelect);
			this.m_aspScroll2[0].setShow(bSelect);
			return;
		case 992:
			this.m_aspScroll1[1].setShow(!bSelect);
			this.m_aspScroll2[1].setShow(bSelect);
			return;
		default:
			break;
	}
	if (this.m_bCustom)
	{
		int idx = パーティ_一覧インデクス(nSelectID);
		if (idx >= 0)
		{
			int nX = パーティ一覧_キャラＸ(idx, false, -1);
			int nY = パーティ一覧_キャラＹ(idx, false, -1);
			this.m_spCustom.setPos(nX + this.m_nCustomX, nY + this.m_nCustomY);
			this.m_spCustom.setShow(bSelect);
			return;
		}
	}
	パーティ編成_キャラ選択設定(パーティ_配置インデクス(nSelectID), bSelect);
}

int T_PartyDrag::getPrevChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		return this.getLastChara(nCharaNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = idx - 1; i >= 0; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = idx - 1; i >= 3; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return this.getLastChara(nCharaNo);
}

int T_PartyDrag::getNextChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		return this.getFirstChara(nCharaNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = idx + 1; i < 3; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = idx + 1; i < 5; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return this.getFirstChara(nCharaNo);
}

int T_PartyDrag::getFirstChara(int nCharaNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = 0; i < 3; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = 3; i < 5; ++i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return -1;
}

int T_PartyDrag::getLastChara(int nCharaNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nCharaNo))
	{
		for (i = 2; i >= 0; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	else
	{
		for (i = 4; i >= 3; --i)
		{
			int nCharaNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nCharaNo2))
			{
				return nCharaNo2;
			}
		}
	}
	return -1;
}

int T_PartyDrag::getForwardChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		idx = 戦闘番号_味方インデクス(this.m_nCharaNo);
		nCharaNo = this.m_nCharaNo;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getForwardChara(idx);
		int nCharaNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nCharaNo2))
		{
			return nCharaNo2;
		}
	}
	return nCharaNo;
}

int T_PartyDrag::_getForwardChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
		case 1:
			return 3;
		case 2:
			return 4;
		case 3:
			return 0;
		case 4:
			return 1;
		default:
			break;
	}
	return -1;
}

int T_PartyDrag::getBackChara(int nCharaNo)
{
	int idx = 戦闘番号_味方インデクス(nCharaNo);
	if (idx < 0)
	{
		idx = 戦闘番号_味方インデクス(this.m_nCharaNo);
		nCharaNo = this.m_nCharaNo;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getBackChara(idx);
		int nCharaNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nCharaNo2))
		{
			return nCharaNo2;
		}
	}
	return nCharaNo;
}

int T_PartyDrag::_getBackChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			return 3;
		case 1:
		case 2:
			return 4;
		case 3:
			return 1;
		case 4:
			return 2;
		default:
			break;
	}
	return -1;
}

