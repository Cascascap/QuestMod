int T_Bar::getValue()
{
	return this.m_nValue;
}

int T_Bar::getMax()
{
	return this.m_nMax;
}

int T_Bar::getPosX()
{
	return this.m_nX;
}

int T_Bar::getPosY()
{
	return this.m_nY;
}

int T_Bar::getZ()
{
	return this.m_aspBar[0].getZ();
}

bool T_Bar::getShow()
{
	return this.m_nIndex < 0 ? 0 : this.m_aspBar[this.m_nIndex].getShow();
}

int T_Bar::getTotalTime()
{
	return this.m_nTotalTime;
}

bool T_Bar::isAnime()
{
	return this.m_nNewValue >= 0;
}

bool T_Bar::isCreated()
{
	return this.m_nType > 0;
}

bool T_Bar::isSuspend()
{
	return this.m_aspBar[0].isSuspend();
}

ref T_Sprite T_Bar::getSp(int nIndex)
{
	return this.getBar(nIndex < 0 ? this.m_nIndex : nIndex);
}

T_Bar::T_Bar()
{
	this.clear();
}

T_Bar::~T_Bar()
{
	this.delete();
}

bool T_Bar::create(int nType, int nWidth, int nHeight, int nColor1R, int nColor1G, int nColor1B, int nBlendRate1, int nColor2R, int nColor2G, int nColor2B, int nBlendRate2, int nColor3R, int nColor3G, int nColor3B, int nBlendRate3)
{
	this.delete();
	if (!this.createBarFromColor(0, nWidth, nHeight, nColor1R, nColor1G, nColor1B, nBlendRate1))
	{
		return false;
	}
	this.createBarFromColor(1, nWidth, nHeight, nColor2R, nColor2G, nColor2B, nBlendRate2);
	this.createBarFromColor(2, nWidth, nHeight, nColor3R, nColor3G, nColor3B, nBlendRate3);
	this.m_nIndex = 0;
	this.m_nType = nType;
	this.m_nWidth = nWidth;
	this.m_nHeight = nHeight;
	return true;
}

bool T_Bar::createCg(int nType, int nCgNo1, int nCgNo2, int nCgNo3)
{
	this.delete();
	if (!this.createBarFromCg(0, nCgNo1))
	{
		return false;
	}
	this.createBarFromCg(1, nCgNo2);
	this.createBarFromCg(2, nCgNo3);
	this.m_nIndex = 0;
	this.m_nType = nType;
	this.m_nWidth = this.m_aspBar[0].getWidth();
	this.m_nHeight = this.m_aspBar[0].getHeight();
	return true;
}

void T_Bar::delete()
{
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		this.m_aspBar[i].delete();
	}
	this.clear();
}

void T_Bar::clear()
{
	this.m_nType = 0;
	this.m_nWidth = -1;
	this.m_nHeight = -1;
	this.m_nX = -1;
	this.m_nY = -1;
	this.m_nIndex = -1;
	this.m_nValue = -1;
	this.m_nMax = 0;
	this.m_nTotalTime = 0;
	this.m_nOldValue = -1;
	this.m_nNewValue = -1;
}

bool T_Bar::copyToSprite(ref T_Sprite rfsDst, int nDstX, int nDstY)
{
	if (rfsDst === NULL)
	{
		return false;
	}
	ref T_Sprite rfBar = this.getBar(this.m_nIndex);
	if (rfBar === NULL)
	{
		return false;
	}
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	rfBar.getSurfaceArea(nX, nY, nW, nH);
	if (!rfBar.copyToSprite(rfsDst, nDstX + nX, nDstY + nY, nW, nH, 0))
	{
		return false;
	}
	return true;
}

void T_Bar::update(int nValue, int nTotalTime)
{
	if (!this.isCreated())
	{
		return;
	}
	if (this.m_nValue == nValue)
	{
		return;
	}
	if (this.m_nValue < 0)
	{
		this.setValue(nValue, -1);
		return;
	}
	if (nTotalTime <= 0)
	{
		this.setValue(nValue, -1);
		return;
	}
	int nTime = 0;
	CASTimer sTimer;
	this.animeStart(nValue, nTotalTime);
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		this.anime(nTime);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	this.animeEnd();
}

bool T_Bar::animeStart(int nValue, int nTotalTime)
{
	if (!this.isCreated())
	{
		return false;
	}
	this.animeEnd();
	if (nValue == this.m_nValue)
	{
		return false;
	}
	nTotalTime = nTotalTime < 0 ? 250 : nTotalTime;
	if (nTotalTime <= 0)
	{
		return false;
	}
	this.m_nTotalTime = nTotalTime;
	this.m_nOldValue = this.m_nValue;
	this.m_nNewValue = nValue;
	return true;
}

void T_Bar::animeEnd()
{
	if (this.m_nNewValue >= 0)
	{
		this.setValue(this.m_nNewValue, -1);
	}
	this.m_nTotalTime = 0;
	this.m_nOldValue = -1;
	this.m_nNewValue = -1;
}

int T_Bar::anime(int nTime)
{
	if (this.m_nNewValue < 0)
	{
		return this.m_nValue;
	}
	int nValue = 0;
	if (nTime > this.m_nTotalTime)
	{
		nTime = this.m_nTotalTime;
	}
	if (nTime >= this.m_nTotalTime)
	{
		nValue = this.m_nNewValue;
	}
	else
	{
		nValue = this.m_nOldValue + é¿êîåvéZ(this.m_nNewValue - this.m_nOldValue, nTime, this.m_nTotalTime);
	}
	this.setValue(nValue, -1);
	return nValue;
}

void T_Bar::setValue(int nValue, int nMax)
{
	if (!this.isCreated())
	{
		return;
	}
	if (nMax < 0)
	{
		nMax = this.m_nMax;
	}
	if (nMax < 1)
	{
		return;
	}
	if (nValue < 0)
	{
		nValue = nMax;
	}
	if (nValue > nMax)
	{
		nValue = nMax;
	}
	if (this.m_nValue == nValue && this.m_nMax == nMax)
	{
		return;
	}
	this.m_nValue = nValue;
	this.m_nMax = nMax;
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	if (this.m_nType == 2)
	{
		nW = this.m_nWidth;
		if (this.m_nValue > 0)
		{
			nH = é¿êîåvéZ(this.m_nHeight, this.m_nValue, this.m_nMax);
			nH = nH > 0 ? nH : 1;
		}
		else
		{
			nH = 0;
		}
		nX = 0;
		nY = this.m_nHeight - nH;
	}
	else
	{
		nH = this.m_nHeight;
		if (this.m_nValue > 0)
		{
			nW = é¿êîåvéZ(this.m_nWidth, this.m_nValue, this.m_nMax);
			nW = nW > 0 ? nW : 1;
		}
		else
		{
			nW = 0;
		}
		nX = 0;
		nY = 0;
	}
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		ref T_Sprite rfBar = this.getBar(i);
		rfBar.setPos(this.m_nX + nX, this.m_nY + nY);
		rfBar.setSurfaceArea(nX, nY, nW, nH);
	}
}

void T_Bar::setPos(int nX, int nY)
{
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		this.m_aspBar[i].setPos(nX, nY);
	}
	this.m_nX = nX;
	this.m_nY = nY;
}

void T_Bar::setPos2(int nX, int nY)
{
	this.setPos(this.m_nX + nX, this.m_nY + nY);
}

void T_Bar::setZ(int nZ)
{
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		this.m_aspBar[i].setZ(nZ);
	}
}

void T_Bar::setShow(bool bShow, int nIndex)
{
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		this.m_aspBar[i].setShow(0);
	}
	int idx = nIndex < 0 ? this.m_nIndex : nIndex;
	ref T_Sprite rfBar = this.getBar(idx);
	if (rfBar === NULL)
	{
		this.m_nIndex = -1;
		return;
	}
	rfBar.setShow(bShow);
	this.m_nIndex = idx;
}

void T_Bar::setBlendRate(int nRate)
{
	int i = 0;
	for (i = 0; i < 3; ++i)
	{
		this.m_aspBar[i].setBlendRate(nRate);
	}
}

bool T_Bar::createBarFromCg(int nIndex, int nCgNo)
{
	if (nIndex < 0 || nIndex >= 3)
	{
		return false;
	}
	ref T_Sprite rfBar = this.m_aspBar[nIndex];
	if (rfBar.setCg(nCgNo) <= 0)
	{
		return false;
	}
	return true;
}

bool T_Bar::createBarFromColor(int nIndex, int nWidth, int nHeight, int nColorR, int nColorG, int nColorB, int nBlendRate)
{
	if (nIndex < 0 || nIndex >= 3)
	{
		return false;
	}
	if (nColorR < 0 || nColorG < 0 || nColorB < 0)
	{
		return false;
	}
	ref T_Sprite rfBar = this.m_aspBar[nIndex];
	rfBar.create(nWidth, nHeight, nColorR, nColorG, nColorB, nBlendRate);
	return true;
}

ref T_Sprite T_Bar::getBar(int nIndex)
{
	if (nIndex < 0 || nIndex >= 3)
	{
		return NULL;
	}
	return this.m_aspBar[nIndex];
}

bool T_Bar::suspend()
{
	bool bRet = false;
	int i = 0;
	int cnt = this.m_aspBar.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_aspBar[i].suspend())
		{
			bRet = true;
		}
	}
	return bRet;
}

bool T_Bar::resume()
{
	bool bRet = false;
	int i = 0;
	int cnt = this.m_aspBar.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (this.m_aspBar[i].resume())
		{
			bRet = true;
		}
	}
	return bRet;
}

