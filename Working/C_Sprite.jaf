bool ＣＧ_情報(int nCgNo, ref cg_metrics_t sCgMetrics)
{
	if (!ＣＧ_あり(nCgNo))
	{
		return false;
	}
	if (!ChipmunkSpriteEngine.CG_GetMetrics("%d" % nCgNo, sCgMetrics))
	{
		return false;
	}
	return true;
}

bool ＣＧ_あり(int nCgNo)
{
	if (nCgNo <= 0)
	{
		return false;
	}
	if (!ChipmunkSpriteEngine.CG_IsExist("%d" % nCgNo))
	{
		return false;
	}
	return true;
}

int ＣＧ_幅(int nCgNo)
{
	return Ａ＿ＣＧ幅取得("%d" % nCgNo);
}

int ＣＧ_高(int nCgNo)
{
	return Ａ＿ＣＧ高さ取得("%d" % nCgNo);
}

int スプライト_番号()
{
	return ChipmunkSpriteEngine.SP_GetUnuseNum(10000);
}

int スプライト_Ｚ順序最大()
{
	return 999999;
}

bool スプライト_有効(ref T_Sprite rfSp)
{
	if (rfSp === NULL)
	{
		return false;
	}
	return rfSp.isCreated();
}

bool テキストスプライト_有効(ref T_TextSprite rfSp)
{
	if (rfSp === NULL)
	{
		return false;
	}
	return rfSp.isCreated();
}

int ＣＧ_分割_横(int nCgNo, ref array@T_Sprite aspSp)
{
	T_Sprite spCg;
	if (spCg.setCg(nCgNo) < 0)
	{
		return -1;
	}
	return ＳＰ_分割_横(spCg, aspSp);
}

int ＣＧ_分割_縦(int nCgNo, ref array@T_Sprite aspSp)
{
	T_Sprite spCg;
	if (spCg.setCg(nCgNo) < 0)
	{
		return -1;
	}
	return ＳＰ_分割_縦(spCg, aspSp);
}

int ＣＧ_分割_縦横(int nCgNo, ref array@T_Sprite@2 aspSp)
{
	T_Sprite spCg;
	if (spCg.setCg(nCgNo) < 0)
	{
		return -1;
	}
	return ＳＰ_分割_縦横(spCg, aspSp);
}

int ＳＰ_分割_横(ref T_Sprite spSrc, ref array@T_Sprite aspDst)
{
	if (!スプライト_有効(spSrc))
	{
		return -1;
	}
	if (aspDst === NULL)
	{
		return -1;
	}
	int cnt = aspDst.Numof();
	if (cnt <= 0)
	{
		return -1;
	}
	int i = 0;
	int nWidth = spSrc.getWidth() / cnt;
	int nHeight = spSrc.getHeight();
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfSp = aspDst[i];
		rfSp.create(nWidth, nHeight, 0, 0, 0, 255);
		rfSp.copyCg(0, 0, spSrc, nWidth * i, 0, nWidth, nHeight);
	}
	spSrc.delete();
	return cnt;
}

int ＳＰ_分割_縦(ref T_Sprite spSrc, ref array@T_Sprite aspDst)
{
	if (!スプライト_有効(spSrc))
	{
		return -1;
	}
	if (aspDst === NULL)
	{
		return -1;
	}
	int cnt = aspDst.Numof();
	if (cnt <= 0)
	{
		return -1;
	}
	int i = 0;
	int nWidth = spSrc.getWidth();
	int nHeight = spSrc.getHeight() / cnt;
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfSp = aspDst[i];
		rfSp.create(nWidth, nHeight, 0, 0, 0, 255);
		rfSp.copyCg(0, 0, spSrc, 0, nHeight * i, nWidth, nHeight);
	}
	spSrc.delete();
	return cnt;
}

int ＳＰ_分割_縦横(ref T_Sprite spSrc, ref array@T_Sprite@2 aspDst)
{
	if (!スプライト_有効(spSrc))
	{
		return -1;
	}
	if (aspDst === NULL)
	{
		return -1;
	}
	int cnt1 = aspDst.Numof();
	if (cnt1 <= 0)
	{
		return -1;
	}
	int cnt2 = aspDst.Numof(2);
	if (cnt2 <= 0)
	{
		return -1;
	}
	int i = 0;
	int j = 0;
	int nWidth = spSrc.getWidth() / cnt2;
	int nHeight = spSrc.getHeight() / cnt1;
	int nX = 0;
	int nY = 0;
	nY = 0;
	for (i = 0; i < cnt1; ++i)
	{
		nX = 0;
		for (j = 0; j < cnt2; ++j)
		{
			ref T_Sprite rfSp = aspDst[i][j];
			rfSp.create(nWidth, nHeight, 0, 0, 0, 255);
			rfSp.copyCg(0, 0, spSrc, nX, nY, nWidth, nHeight);
			nX += nWidth;
		}
		nY += nHeight;
	}
	spSrc.delete();
	return cnt1 * cnt2;
}

void スプライト_拡大ズーム(ref T_Sprite rfSp, int nZoomX, int nZoomY, int nZoomW, int nZoomH, int nZoomTime)
{
	if (!スプライト_有効(rfSp))
	{
		return;
	}
	int nSrcX = rfSp.getPosX();
	int nSrcY = rfSp.getPosY();
	int nSrcW = rfSp.getWidth();
	int nSrcH = rfSp.getHeight();
	bool bAlpha = rfSp.existAlpha();
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	int nTime = 0;
	CASTimer sTimer;
	T_Sprite spWork;
	sTimer.Reset();
	while (nTime < nZoomTime)
	{
		nX = nZoomX + 実数計算(nSrcX - nZoomX, nTime, nZoomTime);
		nY = nZoomY + 実数計算(nSrcY - nZoomY, nTime, nZoomTime);
		nW = nZoomW + 実数計算(nSrcW - nZoomW, nTime, nZoomTime);
		nH = nZoomH + 実数計算(nSrcH - nZoomH, nTime, nZoomTime);
		if (bAlpha)
		{
			spWork.create(nW, nH, 0, 0, 0, 0);
			drawGraph_CopyReduceAMap(spWork, 0, 0, nW, nH, rfSp, 0, 0, nSrcW, nSrcH);
		}
		else
		{
			spWork.createPixelOnly(nW, nH);
		}
		spWork.setPos(nX, nY);
		spWork.setZ(-1);
		spWork.setShow(1);
		drawGraph_CopyReduce(spWork, 0, 0, nW, nH, rfSp, 0, 0, nSrcW, nSrcH);
		UPDATE(true);
		spWork.delete();
		nTime = sTimer.Get();
	}
}

void スプライト_縮小ズーム(ref T_Sprite rfSp, int nZoomX, int nZoomY, int nZoomW, int nZoomH, int nZoomTime)
{
	if (!スプライト_有効(rfSp))
	{
		return;
	}
	int nSrcX = rfSp.getPosX();
	int nSrcY = rfSp.getPosY();
	int nSrcW = rfSp.getWidth();
	int nSrcH = rfSp.getHeight();
	bool bAlpha = rfSp.existAlpha();
	int nX = 0;
	int nY = 0;
	int nW = 0;
	int nH = 0;
	int nTime = 0;
	CASTimer sTimer;
	T_Sprite spWork;
	sTimer.Reset();
	while (nTime < nZoomTime)
	{
		nX = nSrcX + 実数計算(nZoomX - nSrcX, nTime, nZoomTime);
		nY = nSrcY + 実数計算(nZoomY - nSrcY, nTime, nZoomTime);
		nW = nSrcW - 実数計算(nSrcW - nZoomW, nTime, nZoomTime);
		nH = nSrcH - 実数計算(nSrcH - nZoomH, nTime, nZoomTime);
		if (bAlpha)
		{
			spWork.create(nW, nH, 0, 0, 0, 0);
			drawGraph_CopyReduceAMap(spWork, 0, 0, nW, nH, rfSp, 0, 0, nSrcW, nSrcH);
		}
		else
		{
			spWork.createPixelOnly(nW, nH);
		}
		spWork.setPos(nX, nY);
		spWork.setZ(-1);
		spWork.setShow(1);
		drawGraph_CopyReduce(spWork, 0, 0, nW, nH, rfSp, 0, 0, nSrcW, nSrcH);
		UPDATE(true);
		spWork.delete();
		nTime = sTimer.Get();
	}
}

void スプライト_揺らし(int nSpNo, int nQuakeX, int nQuakeY, int nQuakeTime)
{
	T_Sprite spWork;
	spWork.attach(nSpNo);
	if (!スプライト_有効(spWork))
	{
		return;
	}
	int nOldX = spWork.getPosX();
	int nOldY = spWork.getPosY();
	int nTime = 0;
	CASTimer sTimer;
	sTimer.Reset();
	while (true)
	{
		if (nTime > nQuakeTime)
		{
			break;
		}
		float fMag = 1.0 - nTime / nQuakeTime;
		int nX = nQuakeX > 0 ? (AFL_Rand() % nQuakeX - nQuakeX / 2) * fMag : 0;
		int nY = nQuakeY > 0 ? (AFL_Rand() % nQuakeY - nQuakeY / 2) * fMag : 0;
		spWork.setPos(nOldX + nX, nOldY + nY);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	spWork.setPos(nOldX, nOldY);
	spWork.detach();
	UPDATE(true);
}

void スプライト_揺らし_複数(ref array@int anSpNo, int nQuakeX, int nQuakeY, int nQuakeTime)
{
	if (anSpNo === NULL)
	{
		return;
	}
	int i = 0;
	int cnt = anSpNo.Numof();
	if (cnt <= 0)
	{
		return;
	}
	array@int anOldX;
	array@int anOldY;
	T_Sprite spWork;
	for (i = 0; i < cnt; ++i)
	{
		spWork.attach(anSpNo[i]);
		anOldX.PushBack(spWork.getPosX());
		anOldY.PushBack(spWork.getPosY());
		spWork.detach();
	}
	int nTime = 0;
	CASTimer sTimer;
	sTimer.Reset();
	while (true)
	{
		if (nTime > nQuakeTime)
		{
			break;
		}
		float fMag = 1.0 - nTime / nQuakeTime;
		int nX = nQuakeX > 0 ? (AFL_Rand() % nQuakeX - nQuakeX / 2) * fMag : 0;
		int nY = nQuakeY > 0 ? (AFL_Rand() % nQuakeY - nQuakeY / 2) * fMag : 0;
		for (i = 0; i < cnt; ++i)
		{
			spWork.attach(anSpNo[i]);
			spWork.setPos(anOldX[i] + nX, anOldY[i] + nY);
			spWork.detach();
		}
		UPDATE(true);
		nTime = sTimer.Get();
	}
	for (i = 0; i < cnt; ++i)
	{
		spWork.attach(anSpNo[i]);
		spWork.setPos(anOldX[i], anOldY[i]);
		spWork.detach();
	}
	UPDATE(true);
}

void スプライト_フラッシュ(int nSpNo, int nFlashTime)
{
	if (nSpNo <= 0)
	{
		return;
	}
	AFL_Sprite_SetAddColor(nSpNo, 255, 255, 255, 0);
	UPDATE(true);
	_W(nFlashTime);
	AFL_Sprite_SetAddColor(nSpNo, 0, 0, 0, 0);
	UPDATE(true);
}

void スプライト_フラッシュ_複数(ref array@int anSpNo, int nFlashTime)
{
	if (anSpNo === NULL)
	{
		return;
	}
	int i = 0;
	int cnt = anSpNo.Numof();
	if (cnt <= 0)
	{
		return;
	}
	for (i = 0; i < cnt; ++i)
	{
		ref int nSpNo = anSpNo[i];
		if (nSpNo > 0)
		{
			AFL_Sprite_SetAddColor(nSpNo, 255, 255, 255, 0);
		}
	}
	UPDATE(true);
	_W(nFlashTime);
	for (i = 0; i < cnt; ++i)
	{
		ref int nSpNo = anSpNo[i];
		if (nSpNo > 0)
		{
			AFL_Sprite_SetAddColor(nSpNo, 0, 0, 0, 0);
		}
	}
	UPDATE(true);
}

void スプライト_移動(ref T_TextSprite rfSp, int nMoveX, int nMoveY, int nMoveTime)
{
	if (!テキストスプライト_有効(rfSp))
	{
		return;
	}
	int nOldX = rfSp.getPosX();
	int nOldY = rfSp.getPosY();
	int nTime = 0;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nMoveTime)
	{
		float fMag = nTime / nMoveTime;
		rfSp.setPos(nOldX + (nMoveX - nOldX) * fMag, nOldY + (nMoveY - nOldY) * fMag);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	rfSp.setPos(nMoveX, nMoveY);
	UPDATE(true);
}

void _スプライト_移動(int nSpNo, int nStrX, int nStrY, int nEndX, int nEndY, int nTotalTime)
{
	T_Sprite spWork;
	spWork.attach(nSpNo);
	int nTime = 0;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		float fMag = nTime / nTotalTime;
		spWork.setPos(nStrX + (nEndX - nStrX) * fMag, nStrY + (nEndY - nStrY) * fMag);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	spWork.setPos(nEndX, nEndY);
	UPDATE(true);
	spWork.detach();
}

bool スプライト_縮小(ref T_Sprite rfSp, int nEndX, int nEndY, int nTotalTime)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nX = rfSp.getPosX();
	int nY = rfSp.getPosY();
	int nZ = rfSp.getZ();
	int nW = rfSp.getWidth();
	int nH = rfSp.getHeight();
	int nTime = 0;
	CASTimer sTimer;
	T_Sprite spWork;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		int nW2 = nW - 実数計算(nW, nTime, nTotalTime);
		int nH2 = nH - 実数計算(nH, nTime, nTotalTime);
		int nnX2 = nX + 実数計算(nEndX - nX, nTime, nTotalTime);
		int nnY2 = nY + 実数計算(nEndY - nY, nTime, nTotalTime);
		spWork.create(nW2, nH2, 0, 0, 0, 0);
		drawGraph_CopyStretchBilinearWithAlphaMap(spWork, 0, 0, nW2, nH2, rfSp, 0, 0, nW, nH);
		spWork.setPos(nnX2, nnY2);
		spWork.setZ(nZ);
		spWork.setShow(1);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	spWork.delete();
	return true;
}

bool スプライト_縮小回転(ref T_Sprite rfSp, int nEndX, int nEndY, int nRotateTime, int nRotateCount)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nX = rfSp.getPosX();
	int nY = rfSp.getPosY();
	int nZ = rfSp.getZ();
	int nW = rfSp.getWidth();
	int nH = rfSp.getHeight();
	int nTime = 0;
	int nTotalTime = nRotateTime * nRotateCount;
	CASTimer sTimer;
	T_Sprite spWork1;
	T_Sprite spWork2;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		int nW2 = nW - 実数計算(nW, nTime, nTotalTime);
		int nH2 = nH - 実数計算(nH, nTime, nTotalTime);
		spWork1.create(nW2, nH2, 0, 0, 0, 0);
		drawGraph_CopyStretchBilinearWithAlphaMap(spWork1, 0, 0, nW2, nH2, rfSp, 0, 0, nW, nH);
		int nnX2 = nX + 実数計算(nEndX - nX, nTime, nTotalTime);
		int nnY2 = nY + 実数計算(nEndY - nY, nTime, nTotalTime);
		float fRotate = 実数計算(-360.0, nTime % nRotateTime, nRotateTime);
		spWork2.copyRotZoom(spWork1, fRotate, 1.0);
		spWork2.setPos(nnX2, nnY2);
		spWork2.setZ(nZ);
		spWork2.setShow(1);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	spWork1.delete();
	spWork2.delete();
	return true;
}

int スプライト_選択枠作成(ref T_Sprite rfSp, int nX, int nY, int nSize, int nR, int nG, int nB, int nRate)
{
	if (!スプライト_有効(rfSp))
	{
		return -1;
	}
	色_補正(nR, nG, nB);
	α値_補正(nRate);
	int nW = rfSp.getWidth();
	int nH = rfSp.getHeight();
	T_Sprite spWork;
	spWork.create(nW, nH, 0, 0, 0, 0);
	spWork.fill(nX, nY, nW - nX * 2, nH - nY * 2, nR, nG, nB, nRate);
	spWork.fill(nX + nSize, nY + nSize, nW - (nX + nSize) * 2, nH - (nY + nSize) * 2, 0, 0, 0, 0);
	return spWork.detach();
}

bool スプライト_変形_右回転(ref T_Sprite rfSp, int nRotateTime, int nRotateCount)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nTime = 0;
	int nTotalTime = nRotateTime * nRotateCount;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		float fAngle = 実数計算(360.0, nTime % nRotateTime, nRotateTime);
		スプライト_変形(rfSp, fAngle, 1.0);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	return true;
}

bool スプライト_変形_左回転(ref T_Sprite rfSp, int nRotateTime, int nRotateCount)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nTime = 0;
	int nTotalTime = nRotateTime * nRotateCount;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		float fAngle = 実数計算(-360.0, nTime % nRotateTime, nRotateTime);
		スプライト_変形(rfSp, fAngle, 1.0);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	return true;
}

bool スプライト_変形_回転縮小(ref T_Sprite rfSp, int nRotateTime, int nRotateCount)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nTime = 0;
	int nTotalTime = nRotateTime * nRotateCount;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		float fAngle = 実数計算(360.0, nTime % nRotateTime, nRotateTime);
		float fMag = 1.0 - 実数計算(1.0, nTime, nTotalTime);
		スプライト_変形(rfSp, fAngle, fMag);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	return true;
}

bool スプライト_変形_回転拡大(ref T_Sprite rfSp, int nRotateTime, int nRotateCount)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nTime = 0;
	int nTotalTime = nRotateTime * nRotateCount;
	CASTimer sTimer;
	sTimer.Reset();
	while (nTime < nTotalTime)
	{
		float fAngle = 実数計算(-360.0, nTime % nRotateTime, nRotateTime);
		float fMag = 実数計算(1.0, nTime, nTotalTime);
		スプライト_変形(rfSp, fAngle, fMag);
		UPDATE(true);
		nTime = sTimer.Get();
	}
	return true;
}

bool スプライト_変形(ref T_Sprite rfSp, float fAngle, float fMag)
{
	if (!スプライト_有効(rfSp))
	{
		return false;
	}
	int nSpNo = rfSp.getSpNo();
	int nSpX = rfSp.getPosX();
	int nSpY = rfSp.getPosY();
	int nSpW = rfSp.getWidth();
	int nSpH = rfSp.getHeight();
	AFL_Sprite_SetTransformMode(nSpNo, 1);
	float fX0 = nSpX;
	float fY0 = nSpY;
	float fX1 = nSpX + nSpW;
	float fY1 = nSpY;
	float fX2 = nSpX;
	float fY2 = nSpY + nSpH;
	float fX3 = nSpX + nSpW;
	float fY3 = nSpY + nSpH;
	float fCentefX = nSpX + nSpW / 2.0;
	float fCenterY = nSpY + nSpH / 2.0;
	fX0 -= fCentefX;
	fY0 -= fCenterY;
	fX1 -= fCentefX;
	fY1 -= fCenterY;
	fX2 -= fCentefX;
	fY2 -= fCenterY;
	fX3 -= fCentefX;
	fY3 -= fCenterY;
	float fX4 = fX0 * Math.Cos(fAngle) - fY0 * Math.Sin(fAngle);
	float fY4 = fX0 * Math.Sin(fAngle) + fY0 * Math.Cos(fAngle);
	float fX5 = fX1 * Math.Cos(fAngle) - fY1 * Math.Sin(fAngle);
	float fY5 = fX1 * Math.Sin(fAngle) + fY1 * Math.Cos(fAngle);
	float fX6 = fX2 * Math.Cos(fAngle) - fY2 * Math.Sin(fAngle);
	float fY6 = fX2 * Math.Sin(fAngle) + fY2 * Math.Cos(fAngle);
	float fX7 = fX3 * Math.Cos(fAngle) - fY3 * Math.Sin(fAngle);
	float fY7 = fX3 * Math.Sin(fAngle) + fY3 * Math.Cos(fAngle);
	if (fMag != 1.0)
	{
		fX4 *= fMag;
		fY4 *= fMag;
		fX5 *= fMag;
		fY5 *= fMag;
		fX6 *= fMag;
		fY6 *= fMag;
		fX7 *= fMag;
		fY7 *= fMag;
	}
	fX4 += fCentefX;
	fY4 += fCenterY;
	fX5 += fCentefX;
	fY5 += fCenterY;
	fX6 += fCentefX;
	fY6 += fCenterY;
	fX7 += fCentefX;
	fY7 += fCenterY;
	float nZPos = 0.5;
	float nWPos = 1.0;
	float fU0 = 0.0;
	float fV0 = 0.0;
	float fU1 = nSpW;
	float fV1 = 0.0;
	float fU2 = 0.0;
	float fV2 = nSpH;
	float fU3 = nSpW;
	float fV3 = nSpH;
	return AFL_Sprite_SetTransformPos(nSpNo, fX4, fY4, nZPos, nWPos, fU0, fV0, fX5, fY5, nZPos, nWPos, fU1, fV1, fX6, fY6, nZPos, nWPos, fU2, fV2, fX7, fY7, nZPos, nWPos, fU3, fV3);
}

int スプライト_ＣＧロード(int nCgNo)
{
	T_Sprite spWork;
	if (spWork.setCg(nCgNo) <= 0)
	{
		return -1;
	}
	return spWork.detach();
}

bool スプライト_ＣＧコピー(int nCgNo, ref T_Sprite rfsSp, int nX, int nY, int nWidth, int nHeight)
{
	if (!スプライト_有効(rfsSp))
	{
		return false;
	}
	T_Sprite spWork;
	if (spWork.setCg(nCgNo) <= 0)
	{
		return false;
	}
	rfsSp.copyCg(0, 0, spWork, nX > 0 ? nX : 0, nY > 0 ? nY : 0, nWidth > 0 ? nWidth : spWork.getWidth(), nHeight > 0 ? nHeight : spWork.getHeight());
	spWork.delete();
	return true;
}

