int T_StatusSkill::getCharaNo()
{
	return this.m_sList.getCharaNo();
}

int T_StatusSkill::getSkillIndex(int nSkillNo)
{
	return this.m_sList.getIndex(nSkillNo);
}

int T_StatusSkill::getSkillCount()
{
	return this.m_sList.getCount();
}

ref T_SkillList T_StatusSkill::getList()
{
	return this.m_sList;
}

T_StatusSkill::T_StatusSkill()
{
	this.clear();
}

T_StatusSkill::~T_StatusSkill()
{
	this.delete();
}

bool T_StatusSkill::create(int nCharaNo, int nType, bool bLongSkill)
{
	this.delete();
	if (!this.m_sList.create(nCharaNo, 1))
	{
		return false;
	}
	int i = 0;
	int cnt = this.getSkillCount();
	for (i = 0; i < cnt; ++i)
	{
		int nSkillNo = this.m_sList.get(i);
		if (nSkillNo <= 0)
		{
			continue;
		}
		int nType2 = スキル_ボタン種別(nType, bLongSkill, nCharaNo, nSkillNo);
		ref T_SkillButton rfsSkill = this.m_asSkill[i];
		if (rfsSkill.create(nType2, nSkillNo, キャラスキル_ランク(nCharaNo, nSkillNo)))
		{
			rfsSkill.setNumber(キャラスキル_使用回数(nCharaNo, nSkillNo), キャラスキル_使用回数最大(nCharaNo, nSkillNo));
		}
	}
	return true;
}

void T_StatusSkill::delete()
{
	int i = 0;
	int cnt = this.m_asSkill.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asSkill[i].delete();
	}
	this.clear();
}

void T_StatusSkill::clear()
{
	this.m_sList.clear();
}

int T_StatusSkill::setCount(int nIndex, int nValue)
{
	int nSkillNo = this.getSkillNo(nIndex);
	if (nSkillNo <= 0)
	{
		return -1;
	}
	if (nValue < 0)
	{
		int nCharaNo = this.getCharaNo();
		if (nCharaNo <= 0)
		{
			return -1;
		}
		nValue = キャラスキル_使用回数(nCharaNo, nSkillNo);
	}
	this.m_asSkill[nIndex].setNumber(nValue, -1);
	return nValue;
}

void T_StatusSkill::setPos(int nX, int nY)
{
	int i = 0;
	int cnt = this.m_asSkill.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asSkill[i].setPos(nX, nY + 26 * i);
	}
}

void T_StatusSkill::setZ(int nZ)
{
	int i = 0;
	int cnt = this.m_asSkill.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asSkill[i].setZ(nZ);
	}
}

void T_StatusSkill::setShow(bool bShow)
{
	int i = 0;
	int cnt = this.m_asSkill.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asSkill[i].setShow(bShow);
	}
}

void T_StatusSkill::setBlendRate(int nBlendRate)
{
	int i = 0;
	int cnt = this.m_asSkill.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asSkill[i].setBlendRate(nBlendRate);
	}
}

int T_StatusSkill::getSkillNo(int nIndex)
{
	ref T_SkillButton rfsSkill = this.getFromIndex(nIndex);
	if (rfsSkill === NULL)
	{
		return -1;
	}
	return rfsSkill.getSkillNo();
}

ref T_SkillButton T_StatusSkill::get(int nSkillNo)
{
	return this.getFromIndex(this.m_sList.getIndex(nSkillNo));
}

ref T_SkillButton T_StatusSkill::getFromIndex(int nIndex)
{
	if (nIndex < 0 || nIndex >= this.m_asSkill.Numof())
	{
		return NULL;
	}
	return this.m_asSkill[nIndex];
}

