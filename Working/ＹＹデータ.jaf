void Ｑ起動時登録／ＹＹ(lint fg)
{
	int iiq = 0;
	iiq = 221;
	Ｑ初期セット(fg, iiq, 20, 38, 0);
	Ｑ名前(iiq, "Hanny Quest 1");
	Ｑ説明文(iiq, 1, "Hannies. They're everywhere.");
	Ｑ説明文(iiq, 2, "They live their lives freely.");
	Ｑ説明文(iiq, 3, "　");
	Ｑ説明文(iiq, 4, "And now they finally get a chance to take center stage!");
	Ｑ説明文(iiq, 5, "");
	Ｑ発生場所(iiq, "Some Mountain");
	Ｑ参加条件(iiq, 2, 13, 0);
	Ｑキット(iiq, 5);
	iiq = 222;
	Ｑ初期セット(fg, iiq, 20, 40, 0);
	Ｑ名前(iiq, "Hanny Quest 2");
	Ｑ説明文(iiq, 1, "The four hannies who made their debut as adventurers...");
	Ｑ説明文(iiq, 2, " ");
	Ｑ説明文(iiq, 3, "They set their next goal, and take their own path once again!");
	Ｑ説明文(iiq, 4, " ");
	Ｑ説明文(iiq, 5, " ");
	Ｑ発生場所(iiq, "Glasses Girl Cave");
	Ｑ参加条件(iiq, 2, 60, 0);
	Ｑキット(iiq, 5);
	iiq = 223;
	Ｑ初期セット(fg, iiq, 20, 42, 0);
	Ｑ名前(iiq, "Hanny Quest 3");
	Ｑ説明文(iiq, 1, "The young adventurers keep taking one step at a time, slowly but surely maturing.");
	Ｑ説明文(iiq, 2, " ");
	Ｑ説明文(iiq, 3, "They quest again today, limitless ambition in their hearts!");
	Ｑ説明文(iiq, 4, " ");
	Ｑ説明文(iiq, 5, " ");
	Ｑ発生場所(iiq, "Treasure Hill");
	Ｑ参加条件(iiq, 2, 12, 0);
	Ｑキット(iiq, 5);
	iiq = 224;
	Ｑ初期セット(fg, iiq, 0, 60, 0);
	Ｑ名前(iiq, "Hanny Quest 4");
	Ｑ説明文(iiq, 1, "Every adventure must one day come to an end.");
	Ｑ説明文(iiq, 2, "The chance they receive at the end of their journey is the highest honor for a hanny...");
	Ｑ説明文(iiq, 3, " ");
	Ｑ説明文(iiq, 4, "They challenge the trials their \"King\" has given them, along with their \"Prince\"...");
	Ｑ説明文(iiq, 5, " ");
	Ｑ発生場所(iiq, "Hanny Village");
	Ｑキット(iiq, 5);
	iiq = 225;
	Ｑ初期セット(fg, iiq, 0, 0, 0);
	Ｑ名前(iiq, "＊＊＊YY");
	Ｑ説明文(iiq, 1, "YY Quest for Debugging");
	Ｑ説明文(iiq, 2, "");
	Ｑ説明文(iiq, 3, "");
	Ｑ説明文(iiq, 4, "　");
	Ｑ説明文(iiq, 5, "");
	Ｑ発生場所(iiq, "　");
	Ｑキット(iiq, 5);
}

lint クエスト処理／ＹＹ(lint dd, lint no, lint fg)
{
	lint rr = 0;
	lint bre = 0;
	lint re = 0;
	lint ra = 0;
	lint ▲クリア = 0;
	lint ii = 0;
	lint iic = 0;
	lint iics = 0;
	lint aa = 0;
	lint loop = 0;
	if (◆iiq == 221)
	{
		if (dd == 7)
		{
			ＭＡＰ基礎型登録(7);
			if (◆キャラ位置 == 0)
			{
				◆キャラ位置 = 13;
			}
			クエスト基本登録(200, 22, 12);
			トラップ確率登録(0, 0, 0, 0);
			エンカウント中身登録(76, 75, 0, 0, 0);
			ボーナス登録(0, 0, 0);
			◆クエストボーナス物無し = 1;
			◆クエストパーティ編成禁止 = 1;
			if (no == 2)
			{
				◆ＭＡＰ名前 = "Some Mountain Summit";
				ＭＡＰ読み込み(no, 0, 0, 1, 0, 0, 3, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(0, 18, 90, 0, 1);
				}
			}
			if (no == 5)
			{
				◆ＭＡＰ名前 = "Some Mountain Animal Trail Y";
				ＭＡＰ読み込み(no, 0, 0, 1, 0, 0, 2, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(EEx, EEy, 9, 60, 0);
					ＭＤランダム(1, 15, 0, 0, 1);
				}
			}
			if (no == 6)
			{
				◆ＭＡＰ名前 = "Some Mountain 3/10ths up";
				ＭＡＰ読み込み(no, 0, 1, 1, 0, 0, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 9)
			{
				◆ＭＡＰ名前 = "Some Mountain Animal Trail X";
				ＭＡＰ読み込み(no, 0, 1, 0, 1, 0, 2, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(0, 13, 0, 0, 1);
				}
			}
			if (no == 10)
			{
				◆ＭＡＰ名前 = "Some Mountain 2/10ths up";
				ＭＡＰ読み込み(no, 313, 0, 1, 0, 0, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(NNx, NNy, 8, 5, 0);
					ＭＤ固定(EEx, EEy, 10, 15, 0);
				}
			}
			if (no == 13)
			{
				◆ＭＡＰ名前 = "Some Mountain Trailhead";
				ＭＡＰ読み込み(no, 0, 0, 0, 1, 0, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 14)
			{
				◆ＭＡＰ名前 = "Some Mountain 1/10th up";
				ＭＡＰ読み込み(no, 0, 1, 0, 0, 1, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			return 0;
		}
		if (dd == 8)
		{
			if (クリア確認(◆iiq) == 1)
			{
				FA[253] = 2;
			}
			EV("ハニクエ１／進行会話１", 0);
			EV("ハニクエ１／進行会話２", 0);
			EV("ハニクエ１／進行会話３", 0);
			EV("ハニクエ１／進行会話４", 0);
			EV("ハニクエ１／進行会話５", 0);
			EV("ハニクエ１／遠回り", 0);
			EV("ハニクエ１／崖会話", 0);
			ＱＭ登録(13);
			ハニクエ１／プロローグ();
			ＰＴＡ待避();
			ＰＴＡ全登録(87, 13, 90, 88, 89);
			ハニー最大レベル変更();
			スキル回数増加();
			ＰＴＡレベル合わせ(13);
			ＰＴＡ体力回復("");
			return 0;
		}
		if (dd == 9)
		{
			if (fg == 8 && ＰＴＡ有無／固有(13) == 0)
			{
				ハニクエ１／のぞみ戦闘不能();
				return 2;
			}
			if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
			{
				ハニクエ１／ハニー全滅();
				return 2;
			}
			if (no == 5)
			{
				クエスト進行率書き換え(60);
				ハニクエ１／遠回り();
				ＭＤ固定(16, 41, 3, 4, 60);
				return 0;
			}
			if (no == 15)
			{
				ハニクエ１／崖会話();
				選択初期();
				選択_項目追加(1, "Do it", -1, -1, -1, "", -1);
				選択_項目追加(2, "Don't", -1, -1, -1, "", -1);
				rr = 選択_実行(false, 0, 0, false);
				if (rr == 1)
				{
					ハニクエ１／崖会話／やる();
					return 2;
				}
				if (rr == 2)
				{
					ハニクエ１／崖会話／やらない();
				}
				return 0;
			}
			if (no == 60)
			{
				クエスト進行率書き換え(80);
				ハニクエ１／進行会話４();
				return 0;
			}
			if (fg == 5 && ◆ＢＭＡＰ == 14 && EV("ハニクエ１／進行会話１", -2147483648) == false)
			{
				クエスト進行率書き換え(20);
				ハニクエ１／進行会話１();
			}
			if (fg == 5 && ◆ＢＭＡＰ == 10 && EV("ハニクエ１／進行会話２", -2147483648) == false)
			{
				クエスト進行率書き換え(40);
				ハニクエ１／進行会話２();
			}
			if (fg == 5 && ◆ＢＭＡＰ == 9 && EV("ハニクエ１／進行会話３", -2147483648) == false)
			{
				クエスト進行率書き換え(60);
				ハニクエ１／進行会話３();
			}
			if (fg == 5 && ◆ＢＭＡＰ == 10 && EV("ハニクエ１／進行会話４", -2147483648) == true)
			{
				ＭＤ固定(NNx, NNy, 3, 1, 5);
			}
			if (fg == 5 && ◆ＢＭＡＰ == 6 && EV("ハニクエ１／進行会話５", -2147483648) == false)
			{
				クエスト進行率書き換え(90);
				ハニクエ１／進行会話５();
			}
			if (no == 90)
			{
				ハニクエ１／ボス戦闘前();
				ＰＴＢカスタム登録("Custom Anton", "", "", "", "");
				bre = ボス戦闘処理(2000, 491, 491, 491, 491, 491, "");
				if (bre == 2)
				{
					return 2;
				}
				if (ＰＴＡ有無／固有(13) == 0)
				{
					ハニクエ１／のぞみ戦闘不能();
					return 2;
				}
				if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
				{
					ハニクエ１／ハニー全滅();
					return 2;
				}
				ハニクエ１／エピローグ();
				return 1;
			}
			return 割り込み２(fg);
		}
		return 0;
	}
	if (◆iiq == 222)
	{
		if (dd == 7)
		{
			ＭＡＰ基礎型登録(1);
			◆ＭＡＰ名前 = "Map names 10 characters";
			if (◆キャラ位置 == 0)
			{
				◆キャラ位置 = 11;
			}
			クエスト基本登録(200, 23, 2);
			トラップ確率登録(0, 0, 0, 0);
			エンカウント中身登録(76, 75, 0, 0, 0);
			ボーナス登録(0, 0, 0);
			◆クエストパーティ編成禁止 = 1;
			if (no == 1)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave G";
				ＭＡＰ読み込み(no, 0, 0, 0, 1, 0, 2, 3, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(1, 18, 90, 0, 1);
				}
			}
			if (no == 2)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave F";
				ＭＡＰ読み込み(no, 0, 0, 1, 0, 1, 1, 2, 0, 0);
				エンカウント中身登録(77, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(1, 15, 0, 0, 1);
					ＭＤランダム(0, 1, 213, 0, 1);
				}
			}
			if (no == 3)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave C";
				ＭＡＰ読み込み(no, 0, 0, 1, 0, 0, 0, 2, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(0, 8, 30, 0, 1);
				}
			}
			if (no == 6)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave E";
				ＭＡＰ読み込み(no, 0, 0, 0, 1, 0, 2, 1, 0, 0);
				エンカウント中身登録(74, 75, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(NNx, NNy, 10, 10, 0);
				}
			}
			if (no == 7)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave B";
				ＭＡＰ読み込み(no, 106, 1, 1, 1, 1, 3, 2, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(0, 13, 0, 0, 1);
					ＭＤランダム(0, 8, 5, 0, 1);
				}
			}
			if (no == 8)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave D";
				ＭＡＰ読み込み(no, 106, 0, 0, 0, 1, 3, 2, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(0, 8, 60, 0, 1);
				}
			}
			if (no == 11)
			{
				◆ＭＡＰ名前 = "Glasses Girl Cave A";
				ＭＡＰ読み込み(no, 0, 1, 0, 0, 0, 2, 3, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			return 0;
		}
		if (dd == 8)
		{
			if (クリア確認(◆iiq) == 1)
			{
				FA[253] = 1;
			}
			EV("ハニクエ２／進行会話１", 0);
			EV("ハニクエ２／進行会話２", 0);
			EV("ハニクエ２／進行会話３", 0);
			EV("ハニクエ２／進行会話４", 0);
			EV("ハニクエ２／ブルマー", 0);
			ＱＭ登録(11);
			ハニクエ２／プロローグ();
			ＰＴＡ待避();
			ＰＴＡ全登録(87, 60, 90, 88, 89);
			ハニー最大レベル変更();
			スキル回数増加();
			ＰＴＡレベル合わせ(60);
			ＰＴＡ体力回復("");
			QD[1] = 0;
			return 0;
		}
		if (dd == 9)
		{
			if (no == 5)
			{
				ハニクエ２／進行会話１();
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (no == 10)
			{
				ハニクエ２／行き止まり();
			}
			if (no == 30)
			{
				ハニクエ２／進行会話２();
				ＰＴＡダメージ("体力半減");
				ＰＴＡダメージ("２５％減");
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (no == 60)
			{
				ハニクエ２／進行会話３();
				選択初期();
				選択_項目追加(1, "Open", -1, -1, -1, "", -1);
				選択_項目追加(2, "Don't", -1, -1, -1, "", -1);
				rr = 選択_実行(false, 0, 0, false);
				if (rr == 1)
				{
					ハニクエ２／宝箱開ける();
					return 2;
				}
				if (rr == 2)
				{
					ハニクエ２／宝箱開けない();
				}
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (fg == 5 && ◆ＢＭＡＰ == 6 && EV("ハニクエ２／進行会話１", -2147483648) == true && EV("ハニクエ２／進行会話２", -2147483648) == true && EV("ハニクエ２／進行会話３", -2147483648) == true && EV("ハニクエ２／進行会話４", -2147483648) == false)
			{
				クエスト進行率書き換え(90);
				ハニクエ２／進行会話４();
				ＰＴＡ体力回復("");
				ＰＴＡスキル回復("");
			}
			if (◆ＢＭＡＰ == 6 && EV("ハニクエ２／進行会話４", -2147483648) == true)
			{
				ＭＤ固定(NNx, NNy, 3, 1, 0);
			}
			if (Ｉクエスト倉庫の有無(213) != 0 && EV("ハニクエ２／ブルマー", -2147483648) == false)
			{
				ハニクエ２／ブルマー();
			}
			if (ＰＴＡ有無／固有(60) == 0)
			{
				ハニクエ２／メリム戦闘不能();
				return 2;
			}
			if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
			{
				ハニクエ２／ハニー全滅();
				return 2;
			}
			if (no == 90)
			{
				ハニクエ２／ボス戦闘前();
				ＰＴＢカスタム登録("Custom Blue Wand", "", "", "", "");
				bre = ボス戦闘処理(2000, 491, 491, 491, 491, 491, "");
				if (bre == 2)
				{
					return 2;
				}
				if (ＰＴＡ有無／固有(60) == 0)
				{
					ハニクエ２／メリム戦闘不能();
					return 2;
				}
				if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
				{
					ハニクエ２／ハニー全滅();
					return 2;
				}
				ハニクエ２／エピローグ();
				return 1;
			}
		}
		return 0;
	}
	if (◆iiq == 223)
	{
		if (dd == 7)
		{
			ＭＡＰ基礎型登録(8);
			◆ＭＡＰ名前 = "Map names 10 characters";
			if (◆キャラ位置 == 0)
			{
				◆キャラ位置 = 11;
			}
			クエスト基本登録(200, 22, 13);
			トラップ確率登録(0, 0, 0, 0);
			エンカウント中身登録(77, 76, 75, 0, 0);
			ボーナス登録(0, 0, 0);
			◆クエストパーティ編成禁止 = 1;
			if (no == 2)
			{
				◆ＭＡＰ名前 = "Treasure Hill North Entrance";
				ＭＡＰ読み込み(no, 43, 0, 1, 0, 0, 2, 1, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(26, 26, 8, 5, 0);
				}
			}
			if (no == 4)
			{
				◆ＭＡＰ名前 = "Treasure Hill Depths";
				ＭＡＰ読み込み(no, 43, 0, 1, 0, 0, 4, 1, 0, 0);
				エンカウント中身登録(106, 77, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 5)
			{
				◆ＭＡＰ名前 = "Treasure Hill West Entrance";
				ＭＡＰ読み込み(no, 46, 0, 0, 1, 0, 3, 1, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(26, 25, 8, 20, 0);
				}
			}
			if (no == 6)
			{
				◆ＭＡＰ名前 = "Treasure Hill Entrance";
				ＭＡＰ読み込み(no, 42, 1, 0, 1, 1, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 7)
			{
				◆ＭＡＰ名前 = "Treasure Hill Passageway";
				ＭＡＰ読み込み(no, 240, 0, 1, 0, 1, 3, 1, 0, 0);
				エンカウント中身登録(75, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(12, 27, 8, 40, 0);
				}
			}
			if (no == 8)
			{
				◆ＭＡＰ名前 = "Treasure Hill Midpoint";
				ＭＡＰ読み込み(no, 42, 1, 0, 0, 1, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				エンカウント中身登録(106, 77, 0, 0, 0);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤランダム(1, 15, 0, 0, 1);
					ＭＤランダム(0, 13, 0, 0, 1);
				}
			}
			if (no == 11)
			{
				◆ＭＡＰ名前 = "Treasure Hill South Entrance";
				ＭＡＰ読み込み(no, 44, 1, 0, 0, 0, 1, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(26, 25, 8, 60, 0);
				}
			}
			return 0;
		}
		if (dd == 8)
		{
			if (クリア確認(◆iiq) == 1)
			{
				FA[253] = 4;
			}
			EV("ハニクエ３／進行会話２", 0);
			EV("ハニクエ３／進行会話３", 0);
			EV("ハニクエ３／進行会話４", 0);
			EV("ハニクエ３／進行会話５", 0);
			EV("ハニクエ３／行き止まり", 0);
			EV("ハニクエ３／行き止まり／熊あり", 0);
			ＱＭ登録(6);
			ハニクエ３／プロローグ();
			ＰＴＡ待避();
			ＰＴＡ全登録(87, 12, 90, 88, 89);
			ハニー最大レベル変更();
			スキル回数増加();
			ＰＴＡレベル合わせ(12);
			ＰＴＡ体力回復("");
			QD[1] = 0;
			return 0;
		}
		if (dd == 9)
		{
			if (fg == 5 && ◆ＢＭＡＰ == 7 && EV("ハニクエ３／進行会話１", -2147483648) == true && EV("ハニクエ３／進行会話２", -2147483648) == true && EV("ハニクエ３／進行会話４", -2147483648) == true && EV("ハニクエ３／行き止まり", -2147483648) == false)
			{
				ＭＤ固定(EEx, EEy, 8, 80, 0);
			}
			if (fg == 5 && ◆ＢＭＡＰ == 4 && EV("ハニクエ３／進行会話５", -2147483648) == true)
			{
				ＭＤ固定(26, 26, 18, 90, 0);
			}
			if (no == 5)
			{
				ハニクエ３／進行会話１();
				選択初期();
				選択_項目追加(1, "Bury", -1, -1, -1, "", -1);
				選択_項目追加(2, "Don't", -1, -1, -1, "", -1);
				rr = 選択_実行(false, 0, 0, false);
				if (rr == 1)
				{
					ハニクエ３／埋まってみる();
					return 2;
				}
				if (rr == 2)
				{
					ハニクエ３／埋まらない();
				}
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (no == 20)
			{
				ハニクエ３／進行会話２();
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (no == 40)
			{
				ハニクエ３／進行会話３();
				if (Ｉクエスト倉庫は満杯ですか？() == 0)
				{
					Ｒ８アイテム取得(274, 0);
				}
			}
			if (no == 60)
			{
				ハニクエ３／進行会話４();
				QD[1]++;
				if (QD[1] == 1)
				{
					クエスト進行率書き換え(20);
				}
				if (QD[1] == 2)
				{
					クエスト進行率書き換え(40);
				}
				if (QD[1] == 3)
				{
					クエスト進行率書き換え(60);
				}
			}
			if (no == 80)
			{
				ハニクエ３／行き止まり();
				if (Ｉ有無(274, 8, "") == 0)
				{
					ハニクエ３／行き止まり／熊なし();
					ＭＤ固定(EEx, EEy, 8, 85, 0);
					Ｒ８戻し();
				}
				if (Ｉ有無(274, 8, "") != 0)
				{
					ハニクエ３／行き止まり／熊あり();
					Ｉ固有番号で削除(274, 8);
					ＭＤ固定(EEx, EEy, 3, 2, 0);
					Ｒ８戻し();
				}
			}
			if (no == 85 && Ｉ有無(274, 8, "") != 0)
			{
				ADVON();
				セット表示(0, gＭ, 0, 0);
				ハニクエ３／行き止まり／熊あり();
				Ｉ固有番号で削除(274, 8);
				ＭＤ固定(EEx, EEy, 3, 2, 0);
				クエスト進行率書き換え(80);
				Ｒ８戻し();
			}
			if (no == 85 && Ｉ有無(274, 8, "") == 0 && EV("ハニクエ３／行き止まり／熊あり", -2147483648) == false)
			{
				ADVON();
				セット表示(0, gＭ, 0, 0);
				ハニクエ３／行き止まり／熊なし();
				ＭＤ戻し();
				Ｒ８戻し();
			}
			if (fg == 5 && ◆ＢＭＡＰ == 8 && EV("ハニクエ３／進行会話５", -2147483648) == false)
			{
				ハニクエ３／進行会話５();
				iic = Ｃ番号取得(87);
				ＣＳ追加(iic, 489, 3);
				Ｃスキル強制実装Ａ(iic, 489, ＣＳ空き実装番号取得(iic));
				Ｃ再計算(iic);
				iic = Ｃ番号取得(88);
				ＣＳ追加(iic, 283, 4);
				Ｃスキル強制実装Ａ(iic, 283, ＣＳ空き実装番号取得(iic));
				Ｃ再計算(iic);
				iic = Ｃ番号取得(89);
				ＣＳ追加(iic, 225, 6);
				Ｃスキル強制実装Ａ(iic, 225, ＣＳ空き実装番号取得(iic));
				Ｃ再計算(iic);
				iic = Ｃ番号取得(90);
				ＣＳ追加(iic, 248, 3);
				ＣＳ追加(iic, 142, 4);
				Ｃスキル強制実装Ａ(iic, 248, ＣＳ空き実装番号取得(iic));
				Ｃスキル強制実装Ａ(iic, 142, ＣＳ空き実装番号取得(iic));
				Ｃ再計算(iic);
				ＰＴＡ体力回復("");
				ＰＴＡスキル回復("");
				if (◆ワールド == 2)
				{
					iic = Ｃ番号取得(87);
					ＣＳ追加(iic, 489, 1);
					iic = Ｃ番号取得(89);
					ＣＳ追加(iic, 225, 6);
					ＰＴＡスキル回復("");
				}
				if (◆ワールド == 3)
				{
					iic = Ｃ番号取得(87);
					ＣＳ追加(iic, 489, 2);
					iic = Ｃ番号取得(89);
					ＣＳ追加(iic, 225, 12);
					ＰＴＡスキル回復("");
				}
				クエスト進行率書き換え(90);
			}
			if (ＰＴＡ有無／固有(12) == 0)
			{
				ハニクエ３／リズナ戦闘不能();
				return 2;
			}
			if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
			{
				ハニクエ３／ハニー全滅();
				return 2;
			}
			if (no == 90)
			{
				ハニクエ３／ボス戦闘前();
				ＰＴＢカスタム登録("Custom Ammoth", "", "", "", "");
				bre = ボス戦闘処理(10000, 0, 491, 0, 0, 0, "");
				if (bre == 2)
				{
					return 2;
				}
				if (ＰＴＡ有無／固有(12) == 0)
				{
					ハニクエ３／リズナ戦闘不能();
					return 2;
				}
				if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
				{
					ハニクエ３／ハニー全滅();
					return 2;
				}
				ハニクエ３／エピローグ();
				return 1;
			}
		}
		return 0;
	}
	if (◆iiq == 224)
	{
		if (dd == 7)
		{
			ＭＡＰ基礎型登録(2);
			if (◆キャラ位置 == 0)
			{
				◆キャラ位置 = 12;
			}
			クエスト基本登録(10, 33, 14);
			トラップ確率登録(0, 0, 0, 0);
			エンカウント中身登録(77, 0, 0, 0, 0);
			ボーナス登録(0, 0, 0);
			◆クエストパーティ編成禁止 = 1;
			if (no == 1)
			{
				◆ＭＡＰ名前 = "Hanny Village Inside";
				ＭＡＰ読み込み(no, 2302, 0, 1, 0, 0, 1, 1, 0, 0);
				エンカウント中身登録(0, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 5)
			{
				◆ＭＡＰ名前 = "Hanny Village";
				ＭＡＰ読み込み(no, 0, 1, 0, 1, 0, 2, 1, 0, 0);
				エンカウント中身登録(49, 103, 126, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (QD[0] != NNy + 2)
				{
					QD[0] = NNy + 2;
				}
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(NNx, QD[0], 8, 80, 0);
				}
			}
			if (no == 6)
			{
				◆ＭＡＰ名前 = "Hanny Village Entrance";
				ＭＡＰ読み込み(no, 12, 0, 1, 1, 1, 1, 0, 0, 0);
				エンカウント中身登録(0, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
				if (EV("ハニクエ４／進行会話２", -2147483648) == false)
				{
					Ｍ置物(7, 23, 304);
					Ｍ置物(8, 23, 304);
				}
				if (Ｍ[no].初登録 == 0)
				{
					ＭＤ固定(7, 24, 8, 10, 0);
					ＭＤ固定(8, 24, 8, 10, 0);
					ＭＤランダム(1, 15, 0, 0, 1);
					ＭＤランダム(0, 13, 0, 0, 1);
				}
			}
			if (no == 7)
			{
				◆ＭＡＰ名前 = "Hanny Village Gate";
				ＭＡＰ読み込み(no, 0, 0, 0, 1, 1, 3, 2, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 8)
			{
				◆ＭＡＰ名前 = "Hanny Village Outskirts";
				ＭＡＰ読み込み(no, 0, 0, 0, 0, 1, 1, 0, 0, 0);
				エンカウント中身登録(77, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			if (no == 10)
			{
				◆ＭＡＰ名前 = "Hanny Village Side Street";
				ＭＡＰ読み込み(no, 2302, 1, 0, 0, 0, 1, 0, 0, 0);
				エンカウント中身登録(0, 0, 0, 0, 0);
				Ｒ８プレイヤーマーカー切り替え(2);
			}
			return 0;
		}
		if (dd == 8)
		{
			if (クリア確認(◆iiq) == 1)
			{
				FA[253] = 1;
			}
			EV("ハニクエ４／進行会話１", 0);
			EV("ハニクエ４／進行会話２", 0);
			EV("ハニクエ４／進行会話３", 0);
			EV("ハニクエ４／進行会話４", 0);
			EV("ハニクエ４／ハニーの村侵入", 0);
			ＱＭ登録(8);
			ハニクエ４／プロローグ();
			ＰＴＡ待避();
			ＰＴＡ全登録(87, 92, 90, 88, 89);
			iic = Ｃ番号取得(1);
			QD[0] = iic;
			iic = Ｃ番号取得(92);
			QD[1] = iic;
			Ｃ[QD[1]].ＬＶ = Ｃ[QD[0]].ＬＶ;
			Ｃ再計算(iic);
			ハニー最大レベル変更();
			ＰＴＡレベル合わせ(92);
			iic = Ｃ番号取得(87);
			ＣＳ追加(iic, 489, 3);
			Ｃスキル強制実装Ａ(iic, 489, ＣＳ空き実装番号取得(iic));
			Ｃ再計算(iic);
			iic = Ｃ番号取得(88);
			ＣＳ追加(iic, 283, 4);
			Ｃスキル強制実装Ａ(iic, 283, ＣＳ空き実装番号取得(iic));
			Ｃ再計算(iic);
			iic = Ｃ番号取得(89);
			ＣＳ追加(iic, 225, 6);
			Ｃスキル強制実装Ａ(iic, 225, ＣＳ空き実装番号取得(iic));
			Ｃ再計算(iic);
			iic = Ｃ番号取得(90);
			ＣＳ追加(iic, 248, 3);
			ＣＳ追加(iic, 142, 4);
			Ｃスキル強制実装Ａ(iic, 248, ＣＳ空き実装番号取得(iic));
			Ｃスキル強制実装Ａ(iic, 142, ＣＳ空き実装番号取得(iic));
			Ｃ再計算(iic);
			ＰＴＡ体力回復("");
			ＰＴＡスキル回復("");
			スキル回数増加();
			QD[2] = 0;
			return 0;
		}
		if (dd == 9)
		{
			if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
			{
				ハニクエ４／ハニー全滅();
				return 2;
			}
			if (fg == 8 && ＰＴＡ有無／固有(92) == 0)
			{
				ハニクエ４／ダークランス戦闘不能();
				return 2;
			}
			if (fg == 8 && EV("ハニクエ４／進行会話４", -2147483648) == false)
			{
				ハニクエ４／進行会話４();
			}
			if (no == 10)
			{
				ハニクエ４／進行会話１();
				ＭＤ固定(7, 24, 8, 30, 0);
				ＭＤ固定(8, 24, 8, 30, 0);
				Ｒ８戻し();
				クエスト進行率書き換え(30);
			}
			if (no == 30)
			{
				ハニクエ４／進行会話１／汎用();
				ＭＤ戻し();
				Ｒ８戻し();
				return 0;
			}
			if (no == 60)
			{
				ハニクエ４／進行会話２();
				クエスト進行率書き換え(60);
				return 0;
			}
			if (◆ＢＭＡＰ == 10 && EV("ハニクエ４／進行会話１", -2147483648) == true && EV("ハニクエ４／進行会話２", -2147483648) == false)
			{
				ＭＤ固定(26, 28, 8, 60, 0);
			}
			if (◆ＢＭＡＰ == 6 && EV("ハニクエ４／進行会話２", -2147483648) == true)
			{
				Ｍ置物(7, 23, 0);
				Ｍ置物(8, 23, 0);
				ＭＤ固定(7, 24, 0, 0, 0);
				ＭＤ固定(8, 24, 0, 0, 0);
			}
			if (◆ＢＭＡＰ == 5 && EV("ハニクエ４／ハニーの村侵入", -2147483648) == false)
			{
				ハニクエ４／ハニーの村侵入();
			}
			if (no == 80)
			{
				ハニクエ４／進行会話３();
				選択初期();
				選択_項目追加(1, "Persuade", -1, -1, -1, "", -1);
				選択_項目追加(2, "Don't", -1, -1, -1, "", -1);
				rr = 選択_実行(false, 0, 0, false);
				if (rr == 1)
				{
					ハニクエ４／説く();
					return 2;
				}
				if (rr == 2)
				{
					ハニクエ４／説かない();
				}
				クエスト進行率書き換え(90);
				return 0;
			}
			if (no == 90)
			{
				ハニクエ４／ボス戦闘前();
				iic = Ｃ番号取得(92);
				iics = ＣＳ有無(iic, 500, 0);
				QD[2] = ＣＳ使用回数(iic, iics, -1);
				ＰＴＢカスタム登録("", "", "", "", "Custom Hanny King");
				bre = ボス戦闘処理(0, 0, 495, 0, 0, 0, "");
				if (bre == 2)
				{
					return 2;
				}
				iic = Ｃ番号取得(92);
				iics = ＣＳ有無(iic, 500, 0);
				if (QD[2] != ＣＳ使用回数(iic, iics, -1))
				{
					ハニクエ４／魂狩り();
					return 2;
				}
				if (fg == 8 && ＰＴＡ有無／固有(87) == 0 && ＰＴＡ有無／固有(88) == 0 && ＰＴＡ有無／固有(89) == 0 && ＰＴＡ有無／固有(90) == 0)
				{
					ハニクエ４／ハニー全滅();
					return 2;
				}
				ハニクエ４／エピローグ();
				iic = Ｃ番号取得(13);
				if (ＣＳ空き番号取得(iic) != 0 && ＣＳ有無(iic, 592, 0) == 0)
				{
					ＣＳ追加(iic, 592, 0);
				}
				iic = Ｃ番号取得(60);
				if (ＣＳ空き番号取得(iic) != 0 && ＣＳ有無(iic, 592, 0) == 0)
				{
					ＣＳ追加(iic, 592, 0);
				}
				iic = Ｃ番号取得(12);
				if (ＣＳ空き番号取得(iic) != 0 && ＣＳ有無(iic, 592, 0) == 0)
				{
					ＣＳ追加(iic, 592, 0);
				}
				if (Ｉクエスト倉庫は満杯ですか？() == 0 && Ｉ有無(342, 0, "") == 0)
				{
					Ｒ８アイテム取得(342, 0);
				}
				ハニクエ４／エピローグ２();
				return 1;
			}
			if (◆ＢＭＡＰ == 1 && EV("ハニクエ４／進行会話３", -2147483648) == true)
			{
				ＭＤ固定(26, 28, 18, 90, 0);
			}
		}
		return 0;
	}
	if (◆iiq == 225)
	{
		if (dd == 8)
		{
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(37, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(16, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(20, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(95, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(99, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(93, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(77, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(36, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(41, 0);
			}
			if (Ｉクエスト倉庫は満杯ですか？() == 0)
			{
				Ｒ８アイテム取得(31, 0);
			}
			Ｃ生成(60);
			Ｃ生成(12);
			Ｃ生成(13);
			return 1;
		}
		return 0;
	}
	return 0;
}

int カスタムＹＹ(int iic, int no, string 識別名)
{
	if (識別名 == "Custom Anton")
	{
		Ｃ敵登録１(iic, no, 100129, "Herbivore Anton", 0, 6, 0, 2400, 48, 720, 0, 4500, 0, 100, 10, 0, 5, 80, 5, 0, 0, 0, 0, 0, 385, "flew forward.", 1, 70, 181, "", 1, 50, 185, "", 2, 100, 0, "", 1, 0, 0, "", 1, 0);
		ＣＬＶ(iic, 30);
		敵台詞登録(iic, "待機", "Gigigigi...");
		敵台詞登録(iic, "攻撃", "Gichigichigichi!");
		敵台詞登録(iic, "大技", "Gisaaaso!");
		return 1;
	}
	if (識別名 == "Custom Blue Wand")
	{
		Ｃ敵登録１(iic, no, 100091, "Trap Wand", 0, 12, 16, 1700, 45, 550, 7500, 0, 0, 85, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 394, "tackled with sharp blades.", 1, 100, 0, "", 1, 0, 0, "", 1, 0, 0, "", 1, 0, 0, "", 1, 0);
		ＣＬＶ(iic, 40);
		敵台詞登録(iic, "待機", "Booooooom");
		敵台詞登録(iic, "攻撃", "...Wham$↑Tackled");
		敵台詞登録(iic, "大技", "...Wham$...Wham$↑Tackled");
		return 1;
	}
	if (識別名 == "Custom Ammoth")
	{
		Ｃ敵登録１(iic, no, 100143, "Half-asleep Ammoth", 1, 4, 0, 37000, 52, 2250, 260, 0, 200, 300, 0, 0, 5, 15, 0, 0, 80, 0, 0, 0, 385, "tackled.", 1, 70, 565, "Nose slap", 1, 100, 0, "", 1, 0, 0, "", 1, 0, 0, "", 1, 0);
		ＣＬＶ(iic, 40);
		敵台詞登録(iic, "待機", "Ammo♪");
		敵台詞登録(iic, "攻撃", "Pow!");
		敵台詞登録(iic, "大技", "Powon!");
		敵台詞登録(iic, "支援", "Thud, thud$↑Skip");
		return 1;
	}
	if (識別名 == "Custom Hanny King")
	{
		Ｃ敵登録１(iic, no, 100227, "Nice Hanny King", 1, 0, 0, 42000, 46, 2750, 0, 10, 9999, 500, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 385, "whacked with staff.", 1, 60, 458, "", 2, 100, 305, "", 1, 0, 0, "", 1, 0, 0, "", 1, 0);
		ＣＬＶ(iic, 60);
		敵台詞登録(iic, "待機", "Haniho!$You're wonderful!");
		敵台詞登録(iic, "攻撃", "Haniho!$Can you withstand it?");
		敵台詞登録(iic, "大技", "Haniho, powawawa~$You're gonna die.");
		return 1;
	}
	return 0;
}

void ハニー最大レベル変更()
{
	lint iic = 0;
	if (◆ワールド == 2)
	{
		iic = Ｃ番号取得(87);
		Ｃ[iic].ＬＶ最大 = 90;
		iic = Ｃ番号取得(88);
		Ｃ[iic].ＬＶ最大 = 90;
		iic = Ｃ番号取得(89);
		Ｃ[iic].ＬＶ最大 = 90;
		iic = Ｃ番号取得(90);
		Ｃ[iic].ＬＶ最大 = 90;
	}
	if (◆ワールド == 3)
	{
		iic = Ｃ番号取得(87);
		Ｃ[iic].ＬＶ最大 = 200;
		iic = Ｃ番号取得(88);
		Ｃ[iic].ＬＶ最大 = 200;
		iic = Ｃ番号取得(89);
		Ｃ[iic].ＬＶ最大 = 200;
		iic = Ｃ番号取得(90);
		Ｃ[iic].ＬＶ最大 = 200;
	}
}

void スキル回数増加()
{
	lint iic = 0;
	if (◆ワールド == 2)
	{
		iic = Ｃ番号取得(87);
		ＣＳ追加(iic, 420, 14);
		iic = Ｃ番号取得(88);
		ＣＳ追加(iic, 420, 10);
		ＣＳ追加(iic, 121, 6);
		ＣＳ追加(iic, 211, 3);
		iic = Ｃ番号取得(89);
		ＣＳ追加(iic, 420, 4);
		ＣＳ追加(iic, 221, 4);
		ＣＳ追加(iic, 227, 8);
		iic = Ｃ番号取得(90);
		ＣＳ追加(iic, 420, 8);
		ＣＳ追加(iic, 282, 4);
		ＣＳ追加(iic, 212, 8);
		if (◆iiq == 224)
		{
			iic = Ｃ番号取得(87);
			ＣＳ追加(iic, 489, 1);
			iic = Ｃ番号取得(89);
			ＣＳ追加(iic, 225, 4);
		}
		Ｃ再計算(iic);
		ＰＴＡスキル回復("");
	}
	if (◆ワールド == 3)
	{
		iic = Ｃ番号取得(87);
		ＣＳ追加(iic, 277, 4);
		ＣＳ追加(iic, 420, 28);
		iic = Ｃ番号取得(88);
		ＣＳ追加(iic, 420, 20);
		ＣＳ追加(iic, 121, 12);
		ＣＳ追加(iic, 211, 6);
		iic = Ｃ番号取得(89);
		ＣＳ追加(iic, 420, 8);
		ＣＳ追加(iic, 221, 8);
		ＣＳ追加(iic, 227, 12);
		iic = Ｃ番号取得(90);
		ＣＳ追加(iic, 420, 16);
		ＣＳ追加(iic, 282, 4);
		ＣＳ追加(iic, 212, 12);
		if (◆iiq == 224)
		{
			iic = Ｃ番号取得(87);
			ＣＳ追加(iic, 489, 2);
			iic = Ｃ番号取得(89);
			ＣＳ追加(iic, 225, 8);
		}
		Ｃ再計算(iic);
		ＰＴＡスキル回復("");
	}
}

