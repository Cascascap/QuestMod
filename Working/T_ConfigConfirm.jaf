int T_ConfigConfirm::getCheckID(int nIndex)
{
	return nIndex < 0 || nIndex >= 15 ? -1 : 210000 + nIndex + 1;
}

int T_ConfigConfirm::getCheckIndex(int nID)
{
	int idx = nID + -210001;
	return idx < 0 || idx >= 15 ? -1 : idx;
}

T_ConfigConfirm::T_ConfigConfirm()
{
	this.clear();
}

T_ConfigConfirm::~T_ConfigConfirm()
{
	this.delete();
}

int T_ConfigConfirm::run()
{
	int nRet = 0;
	int nID = this.getFirstCheckBox();
	if (!this.create())
	{
		return -1;
	}
	UPDATE(true);
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

int T_ConfigConfirm::moveUp(int nID)
{
	if (nID > 210000)
	{
		return this.moveUpCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return this.getCheckID(12);
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_上矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		switch (nID)
		{
			case 100011:
			case 100012:
				return 200001;
			case 100013:
				break;
			default:
				break;
		}
		return this.getLastCheckBox();
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigConfirm::moveDown(int nID)
{
	if (nID > 210000)
	{
		return this.moveDownCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return 100011;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_下矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		switch (nID)
		{
			case 100001:
			case 100002:
			case 100003:
			case 100004:
				break;
			case 100005:
			case 100006:
			case 100007:
			case 100008:
			case 100019:
				return this.getCheckID(13);
			default:
				break;
		}
		return this.getFirstCheckBox();
	}
label0:
	return this.getLastCheckBox();
}

int T_ConfigConfirm::moveLeft(int nID)
{
	if (nID > 210000)
	{
		return this.moveLeftCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return nID;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_左矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigConfirm::moveRight(int nID)
{
	if (nID > 210000)
	{
		return this.moveRightCheckBox(nID);
	}
	if (nID > 200000)
	{
		switch (nID)
		{
			case 200001:
				return nID;
			default:
				break;
		}
		goto label0;
	}
	int nID2 = コンフィグ共通_右矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getLastCheckBox();
}

bool T_ConfigConfirm::create()
{
	this.delete();
	this.m_spBase.setCg(40005);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(15000, -1);
	this.m_spBase.setShow(true);
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfsCheck = this.m_aspCheck[i];
		rfsCheck.setCg(40037);
		rfsCheck.setZ(15001);
	}
	this.m_sButton.create();
	this.createCheckBox(0, 70, 105, 40056, "");
	this.createCheckBox(1, 70, 135, 40056, "");
	this.createCheckBox(2, 70, 165, 40056, "");
	this.createCheckBox(3, 70, 195, 40056, "");
	this.createCheckBox(4, 70, 225, 40056, "");
	this.createCheckBox(5, 70, 255, 40056, "");
	this.createCheckBox(6, 70, 285, 40056, "");
	this.createCheckBox(7, 70, 315, 40056, "");
	this.createCheckBox(8, 70, 345, 40056, "");
	this.createCheckBox(9, 70, 375, 40056, "");
	this.createCheckBox(10, 70, 405, 40056, "");
	this.createCheckBox(11, 70, 435, 40056, "");
	this.createCheckBox(12, 70, 465, 40056, "");
	this.createCheckBox(13, 450, 105, 40056, "");
	this.createCheckBox(14, 450, 135, 40056, "");
	コンフィグ共通_ボタン作成_土台付(this.m_sButton, 200001, 70, 550, 40057, 0);
	コンフィグ共通_作成(this.m_sButton);
	this.m_sButton.setButtonActive(100005, false);
	this.m_sButton.setZ(15001);
	this.m_sButton.setShow(true);
	this.setValue();
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&コンフィグ_上矢印);
	this.m_sInputKey.setArrowDownCallback(&コンフィグ_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&コンフィグ_左矢印);
	this.m_sInputKey.setArrowRightCallback(&コンフィグ_右矢印);
	this.m_sInputKey.setSelectCallback(&コンフィグ_選択設定);
	return true;
}

void T_ConfigConfirm::delete()
{
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspCheck[i].delete();
	}
	this.m_spBase.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_ConfigConfirm::clear()
{
	return;
}

bool T_ConfigConfirm::createCheckBox(int nIndex, int nX, int nY, int nCgNo, string szText)
{
	if (nIndex < 0 || nIndex >= this.m_aspCheck.Numof())
	{
		return false;
	}
	if (!コンフィグ共通_チェックＢＯＸ作成(this.m_sButton, this.getCheckID(nIndex), nX, nY, nCgNo))
	{
		return false;
	}
	this.m_aspCheck[nIndex].setPos(nX, nY);
	return true;
}

bool T_ConfigConfirm::exec(int nID, ref int nRet)
{
	nRet = 0;
	if (nID > 210000)
	{
		return this.execCheckBox(this.getCheckIndex(nID));
	}
	switch (nID)
	{
		case 200001:
			ダイアログフラグ_クリア();
			this.setValue();
			return false;
		default:
			break;
	}
	int nRet2 = コンフィグ共通_処理(nID);
	if (nRet2 != 0)
	{
		nRet = nRet2 > 0 ? nRet2 : 0;
		return true;
	}
	return false;
}

bool T_ConfigConfirm::execCheckBox(int nIndex)
{
	int nID = this.getDialogID(nIndex);
	if (nID <= 0)
	{
		return false;
	}
	確認なし_反転(nID);
	this.setValue();
	return false;
}

int T_ConfigConfirm::checkSelect(int nID)
{
	int nRet = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		int nID4 = this.checkWheel();
		if (nID4 > 0)
		{
			nRet = nID4;
			break;
		}
		if (キャンセル_確認())
		{
			nRet = 100019;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_ConfigConfirm::checkInput(ref int nSelectID)
{
	return this.m_sButton.checkInput(nSelectID);
}

int T_ConfigConfirm::checkKey(int nID)
{
	int nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

int T_ConfigConfirm::checkWheel()
{
	switch (ホイール_確認(true))
	{
		case 9991:
			return 100004;
		case 9992:
			return 100006;
		default:
			break;
	}
	ホイール_クリア();
	return 0;
}

void T_ConfigConfirm::resetSelect()
{
	this.m_sButton.resetSelect();
}

void T_ConfigConfirm::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(nID, bSelect, true);
}

void T_ConfigConfirm::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	this.m_sButton.setButtonCursor(nID);
}

void T_ConfigConfirm::setValue()
{
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int nID = this.getDialogID(i);
		this.m_aspCheck[i].setShow(nID > 0 ? !確認なし(nID) : 0);
	}
}

int T_ConfigConfirm::getDialogID(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 10;
		case 3:
			return 11;
		case 4:
			return 12;
		case 5:
			return 13;
		case 6:
			return 14;
		case 7:
			return 31;
		case 8:
			return 20;
		case 9:
			return 21;
		case 10:
			return 22;
		case 11:
			return 30;
		case 12:
			return 32;
		case 13:
			return 40;
		case 14:
			return 15;
		default:
			break;
	}
	return -1;
}

int T_ConfigConfirm::moveUpCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getLastCheckBox();
	}
	switch (idx)
	{
		case 0:
			return 100001;
		case 13:
			return 100006;
		default:
			break;
	}
	return this.getCheckID(idx - 1);
}

int T_ConfigConfirm::moveDownCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getFirstCheckBox();
	}
	switch (idx)
	{
		case 12:
			return 200001;
		case 14:
			return 100013;
		default:
			break;
	}
	return this.getCheckID(idx + 1);
}

int T_ConfigConfirm::moveLeftCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getLastCheckBox();
	}
	switch (idx)
	{
		case 0:
			return this.getCheckID(13);
		case 1:
			return this.getCheckID(14);
		case 13:
			return this.getCheckID(0);
		case 14:
			return this.getCheckID(1);
		default:
			break;
	}
	return nID;
}

int T_ConfigConfirm::moveRightCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getFirstCheckBox();
	}
	switch (idx)
	{
		case 0:
			return this.getCheckID(13);
		case 1:
			return this.getCheckID(14);
		case 13:
			return this.getCheckID(0);
		case 14:
			return this.getCheckID(1);
		default:
			break;
	}
	return nID;
}

int T_ConfigConfirm::getFirstCheckBox()
{
	return this.getCheckID(0);
}

int T_ConfigConfirm::getLastCheckBox()
{
	return this.getCheckID(14);
}

