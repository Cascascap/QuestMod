bool T_QuestStore::blinkList()
{
	return this.m_sList.blink();
}

int T_QuestStore::getButtonID(int nIndex)
{
	return nIndex < 0 || nIndex >= 13 ? -1 : 280000 + nIndex + 1;
}

int T_QuestStore::getQuestIndex(int nID)
{
	if (nID < 280000 || nID >= 290000)
	{
		return -1;
	}
	int idx = nID + -280001;
	return idx < 0 || idx >= 13 ? -1 : idx;
}

int T_QuestStore::getListNo(int nIndex)
{
	return nIndex < 0 || nIndex >= 13 ? -1 : this.m_sList.getList(this.m_sList.getTopIndex() + nIndex);
}

T_QuestStore::T_QuestStore()
{
	this.clear();
	this.m_rcArea1.set(625, 60, 314, 518);
	this.m_rcArea2.set(275, 60, 314, 518);
}

T_QuestStore::~T_QuestStore()
{
	this.delete();
}

int T_QuestStore::run(int nZ, int nSortMode, int nQuestType)
{
	int nRet = 0;
	if (!this.create(nZ, nSortMode, nQuestType))
	{
		return -1;
	}
	効果音_窓開き();
	_EFFECT(1, 100);
	int nID = クエスト_一覧先頭ＩＤ();
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

void T_QuestStore::scroll(int nValue)
{
	this.hideComment(-1);
	this.m_sList.setTopIndex(nValue);
	this.setButtonActive();
}

bool T_QuestStore::remakeList(int nQuestType)
{
	if (!this.m_sList.remake(nQuestType))
	{
		return false;
	}
	this.hideComment(-1);
	this.m_sScroll.setValue(this.m_sList.getTopIndex(), this.m_sList.getListCount(), -1);
	this.setButtonActive();
	this.setButtonShow(true);
	return true;
}

void T_QuestStore::execDrag(int nX, int nY)
{
	if (!this.m_spIcon.isCreated())
	{
		return;
	}
	this.m_spIcon.setPos(nX, nY);
	int nID = this.m_sButtonLock.checkIntersect(this.m_spIcon);
	switch (nID)
	{
		case 200011:
			this.m_nSelectNo = 0;
			break;
		case 200012:
			this.m_nSelectNo = 1;
			break;
		default:
			this.m_nSelectNo = -1;
			break;
	}
}

bool T_QuestStore::execDrop(int nX, int nY)
{
	if (!this.m_spIcon.isCreated())
	{
		return false;
	}
	this.m_spIcon.setPos(nX, nY);
	bool bRet = false;
	if (this.m_nSelectNo < 0)
	{
		goto label0;
	}
	bRet = true;
	効果音_ドロップ();
	this.m_nTargetNo = this.m_nSelectNo;
label0:
	return bRet;
}

void T_QuestStore::setSelect(int nID, bool bSelect)
{
	if (nID > 290000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		return;
	}
	if (nID > 200000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
		goto label0;
	}
	クエスト_選択設定_不要倉庫ＯＰＥＮ中(nID, bSelect);
label0:
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
}

bool T_QuestStore::create(int nZ, int nSortMode, int nQuestType)
{
	this.delete();
	this.m_spBase.setCg(11018);
	this.m_spBase.setPos(269, 54);
	this.m_sList.create(1, nSortMode, nQuestType);
	this.m_sScroll.create(2, 438, 290000, 0, 0);
	this.m_sScroll.setPos(569, 60);
	this.m_sScroll.setActive(-1, true);
	this.m_sScroll.setCallback(&scrollQuestStore);
	this.m_sScroll.setValue(0, this.m_sList.getListCount(), 13);
	this.m_sButton.create();
	this.m_sButtonLock.create();
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		ボタン登録_ＣＧ(this.m_sButton, this.getButtonID(i), クエスト一覧_項目Ｘ(i, 1), クエスト一覧_項目Ｙ(i, 1), 11012, -1, -1, -2147483648, -2147483648);
	}
	ボタン登録_ＣＧ(this.m_sButton, 200001, 593, 60, 10007, -1, -1, -2147483648, -2147483648);
	ボタン登録_矩形(this.m_sButtonLock, 200011, 625, 60, 314, 518, true);
	ボタン登録_矩形(this.m_sButtonLock, 200012, 275, 60, 314, 518, true);
	this.setZ(nZ);
	this.setButtonActive();
	this.setShow(true);
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&不要クエスト倉庫_上矢印);
	this.m_sInputKey.setArrowDownCallback(&不要クエスト倉庫_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&不要クエスト倉庫_左矢印);
	this.m_sInputKey.setArrowRightCallback(&不要クエスト倉庫_右矢印);
	this.m_sInputKey.setSelectCallback(&不要クエスト倉庫_選択設定);
	return true;
}

void T_QuestStore::delete()
{
	this.endDrag();
	this.hideComment(-1);
	this.m_spBase.delete();
	this.m_sList.delete();
	this.m_sScroll.delete();
	this.m_sButton.delete();
	this.m_sButtonLock.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_QuestStore::clear()
{
	this.m_nLockQuest = 0;
	this.m_nCommentID = 0;
}

int T_QuestStore::checkSelect(int nID)
{
	int nRet = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		this.checkWheel();
		if (キャンセル_確認())
		{
			nRet = 200001;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		else if (this.checkDrag(nID2))
		{
			nRet = nID2;
			break;
		}
		UPDATE(true);
	}
	return nRet;
}

int T_QuestStore::checkInput(ref int nSelectID)
{
	nSelectID = 0;
	switch (this.m_sScroll.checkInput(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
		case 2:
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			クエスト_入力ＯＦＦ();
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	switch (クエスト_入力確認(nSelectID))
	{
		case 0:
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			this.m_sButton.setInputFlag(false);
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
label0:
	if (nSelectID > 0)
	{
		this.showComment(nSelectID);
	}
	else
	{
		this.hideComment(-1);
	}
	this.m_sScroll.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	クエスト_入力ＯＮ();
	return 0;
}

int T_QuestStore::checkKey(int nID)
{
	switch (this.checkSelectArea(nID))
	{
		case 1:
			int nID2 = クエスト_キー確認(nID);
			if (nID2 > 0)
			{
				return nID2;
			}
			if (nID2 < 0)
			{
				this.hideComment(-1);
				return 0;
			}
			break;
		case 2:
			if (this.m_sScroll.checkKey())
			{
				return 0;
			}
			break;
		default:
			break;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

bool T_QuestStore::checkWheel()
{
	if (this.m_rcArea1.mouseInRect())
	{
		if (クエスト_ホイール確認())
		{
			this.hideComment(-1);
			return true;
		}
	}
	if (this.m_rcArea2.mouseInRect())
	{
		if (this.m_sScroll.checkWheel())
		{
			return true;
		}
	}
	ホイール_クリア();
	return false;
}

bool T_QuestStore::checkDrag(int nID)
{
	if (画面操作モード確認() != 0)
	{
		return false;
	}
	if (160000 < nID && nID < 180000)
	{
		return クエスト_ボタン有効(nID);
	}
	if (280000 < nID && nID < 290000)
	{
		return this.m_sButton.getButtonActive(nID);
	}
	return false;
}

int T_QuestStore::checkSelectArea(int nID)
{
	if (キー優先())
	{
		if (nID > 200000)
		{
			return 2;
		}
		if (nID > 100000)
		{
			return 1;
		}
	}
	else
	{
		if (this.m_rcArea1.mouseInRect())
		{
			return 1;
		}
		if (this.m_rcArea2.mouseInRect())
		{
			return 2;
		}
	}
	return 0;
}

void T_QuestStore::showComment(int nID)
{
	if (this.m_nCommentID == nID)
	{
		return;
	}
	if (this.m_nLockQuest > 0)
	{
		return;
	}
	if (nID > 200000)
	{
		int idx = this.getQuestIndex(nID);
		if (idx < 0)
		{
			goto label0;
		}
		if (説明_表示(nID, "", クエスト_倉庫説明(this.getListNo(idx)), "", 500, true) > 0)
		{
			int nX = クエスト一覧_項目Ｘ(idx, 1) + 228;
			int nY = クエスト一覧_項目Ｙ(idx, 1);
			説明_位置設定(nX, nY);
		}
		goto label1;
	}
	if (nID > 100000)
	{
		int idx = クエスト_インデクス(nID);
		if (idx < 0)
		{
			goto label0;
		}
		if (説明_表示(nID, "", クエスト_倉庫説明(クエスト_番号(idx)), "", 500, true) > 0)
		{
			int nX = クエスト一覧_項目Ｘ(idx, 0) - 説明_幅();
			int nY = クエスト一覧_項目Ｙ(idx, 0);
			説明_位置設定(nX, nY);
		}
		goto label1;
	}
label1:
	this.m_nCommentID = nID;
	return;
label0:
	this.hideComment(-1);
}

void T_QuestStore::hideComment(int nID)
{
	if (this.m_nLockQuest > 0)
	{
		return;
	}
	nID = nID < 0 ? this.m_nCommentID : nID;
	if (nID > 0)
	{
		説明_消し(nID);
		説明_ＩＤクリア();
	}
	this.m_nCommentID = -1;
}

void T_QuestStore::resetSelect()
{
	this.m_sScroll.resetSelect();
	this.m_sButton.resetSelect();
	this.m_sButtonLock.resetSelect();
	クエスト_選択解除();
	this.hideComment(-1);
}

void T_QuestStore::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 290000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 200000)
	{
		this.m_sButton.setButtonCursor(nID);
		return;
	}
	クエスト_カーソル設定(nID);
}

void T_QuestStore::setZ(int nZ)
{
	this.m_spBase.setZ(nZ);
	this.m_sScroll.setZ(nZ + 1);
	this.m_sButton.setZ(nZ + 10);
	this.m_sButtonLock.setZ(nZ + 50);
	this.m_sList.setZ(nZ + 15);
}

void T_QuestStore::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sList.setShow(bShow);
	this.m_sScroll.setShow(bShow);
	this.m_sButtonLock.setShow(false);
	this.setButtonShow(bShow);
}

void T_QuestStore::setButtonShow(bool bShow)
{
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		this.m_sButton.setButtonShow(this.getButtonID(i), this.getListNo(i) > 0 ? bShow : 0);
	}
	this.m_sButton.setButtonShow(200001, bShow);
}

void T_QuestStore::setButtonActive()
{
	int i = 0;
	for (i = 0; i < 13; ++i)
	{
		クエスト_ボタンＳＰ作成(this.getListNo(i), this.m_sButton.getButton(this.getButtonID(i)));
	}
}

void T_QuestStore::setListButtonShow(int nID, bool bShow)
{
	if (nID > 290000)
	{
		return;
	}
	if (nID > 280000)
	{
		this.m_sButton.setButtonShow(nID, bShow);
		return;
	}
	if (nID > 200000)
	{
		return;
	}
	クエスト_一覧表示設定(nID, bShow);
}

