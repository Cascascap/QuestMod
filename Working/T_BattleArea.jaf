T_BattleArea::T_BattleArea()
{
	this.m_anSequence[0] = 0;
	this.m_anSequence[1] = 3;
	this.m_anSequence[2] = 1;
	this.m_anSequence[3] = 4;
	this.m_anSequence[4] = 2;
	this.m_arcMonster[this.m_anSequence[0]].set2(0, 0, 205, 378);
	this.m_arcMonster[this.m_anSequence[1]].set2(206, 0, 409, 378);
	this.m_arcMonster[this.m_anSequence[2]].set2(410, 0, 613, 378);
	this.m_arcMonster[this.m_anSequence[3]].set2(614, 0, 817, 378);
	this.m_arcMonster[this.m_anSequence[4]].set2(818, 0, 1023, 378);
	this.m_arcMonsterForward[0].clear();
	this.m_arcMonsterForward[1].clear();
	this.m_arcMonsterForward[2].clear();
	this.m_arcMonsterForward[3].set(0, 0, 512, 378);
	this.m_arcMonsterForward[4].set(512, 0, 512, 378);
	this.m_arcChara[0].set(戦闘味方_位置Ｘ(0), 戦闘味方_位置Ｙ(0), 334, 170);
	this.m_arcChara[1].set(戦闘味方_位置Ｘ(1), 戦闘味方_位置Ｙ(1), 334, 170);
	this.m_arcChara[2].set(戦闘味方_位置Ｘ(2), 戦闘味方_位置Ｙ(2), 334, 170);
	this.m_arcChara[3].set(戦闘味方_位置Ｘ(3), 戦闘味方_位置Ｙ(3), 334, 170);
	this.m_arcChara[4].set(戦闘味方_位置Ｘ(4), 戦闘味方_位置Ｙ(4), 334, 170);
}

int T_BattleArea::check(bool bForward)
{
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		int nNo = 戦闘番号_味方(i);
		if (!戦闘番号_存在確認(nNo))
		{
			continue;
		}
		if (this.m_arcChara[i].mouseInRect())
		{
			return nNo;
		}
	}
	if (bForward)
	{
		for (i = 0; i < 5; ++i)
		{
			int nNo = 戦闘番号_敵(i);
			if (!戦闘データ_有効(nNo))
			{
				continue;
			}
			if (this.m_arcMonsterForward[i].mouseInRect())
			{
				return nNo;
			}
		}
	}
	else
	{
		for (i = 0; i < 5; ++i)
		{
			int nNo = 戦闘番号_敵(i);
			if (!戦闘データ_有効(nNo))
			{
				continue;
			}
			if (this.m_arcMonster[i].mouseInRect())
			{
				return nNo;
			}
		}
	}
	return 0;
}

bool T_BattleArea::setCursor(int nNo, bool bForward)
{
	ref T_Rect rcArea = this.get(nNo, bForward);
	if (rcArea === NULL)
	{
		return false;
	}
	rcArea.setMouseCenter();
	return true;
}

ref T_Rect T_BattleArea::get(int nNo, bool bForward)
{
	if (戦闘番号_味方確認(nNo))
	{
		return this.getChara(nNo);
	}
	if (戦闘番号_敵確認(nNo))
	{
		if (bForward)
		{
			return this.getMonsterForward(nNo);
		}
		return this.getMonster(nNo);
	}
	return NULL;
}

int T_BattleArea::getPrevMonster(int nNo)
{
	int idx = this.getSequence(nNo);
	if (idx < 0)
	{
		return this.getLastMonster();
	}
	int i = 0;
	for (i = idx - 1; i >= 0; --i)
	{
		int nNo2 = 戦闘番号_敵(this.m_anSequence[i]);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return this.getLastMonster();
}

int T_BattleArea::getNextMonster(int nNo)
{
	int idx = this.getSequence(nNo);
	if (idx < 0)
	{
		return this.getFirstMonster();
	}
	int i = 0;
	int cnt = this.m_anSequence.Numof();
	for (i = idx + 1; i < cnt; ++i)
	{
		int nNo2 = 戦闘番号_敵(this.m_anSequence[i]);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return this.getFirstMonster();
}

int T_BattleArea::getFirstMonster()
{
	int i = 0;
	int cnt = this.m_anSequence.Numof();
	for (i = 0; i < cnt; ++i)
	{
		int nNo2 = 戦闘番号_敵(this.m_anSequence[i]);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return -1;
}

int T_BattleArea::getLastMonster()
{
	int i = 0;
	int cnt = this.m_anSequence.Numof();
	for (i = cnt - 1; i >= 0; --i)
	{
		int nNo2 = 戦闘番号_敵(this.m_anSequence[i]);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return -1;
}

int T_BattleArea::getPrevChara(int nNo)
{
	int idx = 戦闘番号_味方インデクス(nNo);
	if (idx < 0)
	{
		return this.getLastChara(nNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nNo))
	{
		for (i = idx - 1; i >= 0; --i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	else
	{
		for (i = idx - 1; i >= 3; --i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	return this.getLastChara(nNo);
}

int T_BattleArea::getNextChara(int nNo)
{
	int idx = 戦闘番号_味方インデクス(nNo);
	if (idx < 0)
	{
		return this.getFirstChara(nNo);
	}
	int i = 0;
	if (戦闘データ_味方前衛(nNo))
	{
		for (i = idx + 1; i < 3; ++i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	else
	{
		for (i = idx + 1; i < 5; ++i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	return this.getFirstChara(nNo);
}

int T_BattleArea::getFirstChara(int nNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nNo))
	{
		for (i = 0; i < 3; ++i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	else
	{
		for (i = 3; i < 5; ++i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	return -1;
}

int T_BattleArea::getLastChara(int nNo)
{
	int i = 0;
	if (戦闘データ_味方前衛(nNo))
	{
		for (i = 2; i >= 0; --i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	else
	{
		for (i = 4; i >= 3; --i)
		{
			int nNo2 = 戦闘番号_味方(i);
			if (戦闘データ_有効(nNo2))
			{
				return nNo2;
			}
		}
	}
	return -1;
}

int T_BattleArea::getForwardChara(int nNo)
{
	int idx = 戦闘番号_味方インデクス(nNo);
	if (idx < 0)
	{
		return -1;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getForwardChara(idx);
		int nNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return nNo;
}

int T_BattleArea::getBackChara(int nNo)
{
	int idx = 戦闘番号_味方インデクス(nNo);
	if (idx < 0)
	{
		return -1;
	}
	int i = 0;
	for (i = 0; i < 5; ++i)
	{
		idx = this._getBackChara(idx);
		int nNo2 = 戦闘番号_味方(idx);
		if (戦闘データ_有効(nNo2))
		{
			return nNo2;
		}
	}
	return nNo;
}

int T_BattleArea::_getForwardChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
		case 1:
			return 3;
		case 2:
			return 4;
		case 3:
			return 0;
		case 4:
			return 1;
		default:
			break;
	}
	return -1;
}

int T_BattleArea::_getBackChara(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			return 3;
		case 1:
		case 2:
			return 4;
		case 3:
			return 1;
		case 4:
			return 2;
		default:
			break;
	}
	return -1;
}

ref T_Rect T_BattleArea::getChara(int nNo)
{
	int idx = 戦闘番号_味方インデクス(nNo);
	if (idx < 0)
	{
		return NULL;
	}
	return this.m_arcChara[idx];
}

ref T_Rect T_BattleArea::getMonster(int nNo)
{
	int idx = this.getSequence(nNo);
	if (idx < 0)
	{
		return NULL;
	}
	return this.m_arcMonster[this.m_anSequence[idx]];
}

ref T_Rect T_BattleArea::getMonsterForward(int nNo)
{
	int idx = this.getSequence(nNo);
	if (idx < 0)
	{
		return NULL;
	}
	return this.m_arcMonsterForward[this.m_anSequence[idx]];
}

int T_BattleArea::getSequence(int nNo)
{
	int idx = 戦闘番号_敵インデクス(nNo);
	if (idx < 0)
	{
		return -1;
	}
	return this.m_anSequence.Find(0, this.m_anSequence.Numof(), idx);
}

