int T_Knowledge::getButtonID(int nIndex)
{
	return nIndex < 0 || nIndex >= 24 ? -1 : 110000 + nIndex + 1;
}

int T_Knowledge::getKnowledgeIndex(int nID)
{
	if (nID < 110000)
	{
		return -1;
	}
	int idx = nID + -110001;
	return idx < 0 || idx >= 24 ? -1 : idx;
}

int T_Knowledge::getListNo(int nIndex)
{
	return nIndex < 0 || nIndex >= 24 ? 0 : this.m_sList.getList(this.m_sList.getTopIndex() + nIndex);
}

T_Knowledge::T_Knowledge()
{
	this.clear();
}

T_Knowledge::~T_Knowledge()
{
	this.delete();
}

int T_Knowledge::run(int nNo)
{
	int nRet = 0;
	if (!this.create(nNo))
	{
		return -1;
	}
	効果音_窓開き();
	_EFFECT(1, 100);
	int nID = this.getFirstList();
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

void T_Knowledge::scroll(int nValue)
{
	this.m_sList.setTopIndex(nValue);
	this.setButtonActive();
}

int T_Knowledge::moveUp(int nID)
{
	if (nID > 900000)
	{
		return this.getLastList();
	}
	if (nID > 130000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		return this.getLastList();
	}
	if (nID > 110000)
	{
		return this.getPrevList(nID);
	}
	switch (nID)
	{
		case 100001:
			return this.getLastList();
		default:
			break;
	}
label0:
	return this.getFirstList();
}

int T_Knowledge::moveDown(int nID)
{
	if (nID > 900000)
	{
		return this.getFirstList();
	}
	if (nID > 130000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		return this.getFirstList();
	}
	if (nID > 110000)
	{
		return this.getNextList(nID);
	}
	switch (nID)
	{
		case 100001:
			return this.getFirstList();
		default:
			break;
	}
label0:
	return this.getLastList();
}

int T_Knowledge::moveLeft(int nID)
{
	if (nID > 900000)
	{
		return システムバー_前ボタン(nID);
	}
	if (nID > 130000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		return this.m_sLimit.getPrev(nID);
	}
	if (nID > 110000)
	{
		return 900003;
	}
	switch (nID)
	{
		case 100001:
			return 900003;
		default:
			break;
	}
label0:
	return this.getFirstList();
}

int T_Knowledge::moveRight(int nID)
{
	if (nID > 900000)
	{
		return システムバー_次ボタン(nID);
	}
	if (nID > 130000)
	{
		goto label0;
	}
	if (nID > 120000)
	{
		return this.m_sLimit.getNext(nID);
	}
	if (nID > 110000)
	{
		return 900001;
	}
	switch (nID)
	{
		case 100001:
			return 900001;
		default:
			break;
	}
label0:
	return this.getLastList();
}

void T_Knowledge::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		return;
	}
	if (nID > 130000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		return;
	}
	if (nID > 120000)
	{
		this.m_sLimit.setSelect(nID, bSelect);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
		return;
	}
}

bool T_Knowledge::create(int nNo)
{
	this.delete();
	if (!this.m_sList.create(nNo, 0))
	{
		return false;
	}
	this.m_nMode = nNo > 0 ? 1 : 0;
	this.m_spBase.setCg(20001);
	this.m_spBase.setPos(0, 0);
	if (this.m_nMode == 0)
	{
		this.m_sScroll.create(2, 568, 130000, 0, 0);
		this.m_sScroll.setPos(994, 72);
		this.m_sScroll.setActive(-1, true);
		this.m_sScroll.setCallback(&scrollKnowledgeList);
		this.m_sScroll.setValue(0, this.m_sList.getListCount(), 24);
	}
	this.m_sLimit.create(9011, 120000);
	this.m_sButton.create();
	int i = 0;
	for (i = 0; i < 24; ++i)
	{
		ボタン登録_矩形(this.m_sButton, this.getButtonID(i), まめ知識一覧_Ｘ(i), まめ知識一覧_Ｙ(i), 267, 27, false);
	}
	ボタン登録_ＣＧ(this.m_sButton, 100001, 990, 14, 10007, -1, -1, -2147483648, -2147483648);
	this.setZ(9001);
	this.setButtonActive();
	this.setShow(true);
	if (this.m_nMode == 0)
	{
		this.m_sInputKey.create(0, this.m_sButton);
		this.m_sInputKey.setArrowUpCallback(&まめ知識_上矢印);
		this.m_sInputKey.setArrowDownCallback(&まめ知識_下矢印);
		this.m_sInputKey.setArrowLeftCallback(&まめ知識_左矢印);
		this.m_sInputKey.setArrowRightCallback(&まめ知識_右矢印);
		this.m_sInputKey.setSelectCallback(&まめ知識_選択設定);
	}
	return true;
}

void T_Knowledge::delete()
{
	this.m_spBase.delete();
	this.m_sList.delete();
	this.m_sScroll.delete();
	this.m_sLimit.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_Knowledge::clear()
{
	this.m_nMode = -1;
}

bool T_Knowledge::exec(int nID, ref int nRet)
{
	nRet = 0;
	switch (nID)
	{
		case 100001:
			return true;
		default:
			break;
	}
	if (nID > 900000)
	{
		nRet = nID;
		return true;
	}
	if (nID > 130000)
	{
		this.m_sScroll.exec(nID);
		return false;
	}
	if (nID > 120000)
	{
		return this.execLimit(nID - 120000);
	}
	if (nID > 110000)
	{
		return this.execLock(nID);
	}
	return false;
}

bool T_Knowledge::execLock(int nID)
{
	int idx = this.getKnowledgeIndex(nID);
	if (idx < 0)
	{
		return false;
	}
	int nNo = this.getListNo(idx);
	if (nNo <= 0)
	{
		return false;
	}
	if (nNo != this.m_sList.getLockNo())
	{
		this.m_sList.setLockNo(nNo);
	}
	return false;
}

bool T_Knowledge::execLimit(int nType)
{
	if (!this.m_sLimit.setKnowledgeType(nType))
	{
		return false;
	}
	if (!this.m_sList.create(0, this.m_sLimit.getKnowledgeType()))
	{
		return false;
	}
	this.m_sList.setZ(this.m_spBase.getZ() + 1);
	this.m_sScroll.setValue(0, this.m_sList.getListCount(), -1);
	this.setButtonActive();
	this.setShow(true);
	return false;
}

int T_Knowledge::checkSelect(int nID)
{
	int nRet = 0;
	int nID2 = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		nID2 = nID;
		this.setSelect(nID2, true);
	}
	while (true)
	{
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		this.checkWheel();
		if (キャンセル_確認())
		{
			nRet = 100001;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_Knowledge::checkInput(ref int nSelectID)
{
	int nID2 = 0;
	if (this.m_nMode == 0)
	{
		switch (システムバー_入力確認(nID2))
		{
			case 0:
				if (nID2 > 0)
				{
					goto label0;
				}
				break;
			case 1:
				this.m_sScroll.setInputFlag(false);
				this.m_sLimit.setInputFlag(false);
				this.m_sButton.setInputFlag(false);
				nSelectID = nID2;
				return 1;
			case 2:
				nSelectID = nID2;
				return 2;
			default:
				break;
		}
		switch (this.m_sScroll.checkInput(nID2))
		{
			case 0:
				if (nID2 > 0)
				{
					goto label0;
				}
				break;
			case 1:
			case 2:
				nSelectID = nID2;
				return 2;
			default:
				break;
		}
	}
	switch (this.m_sLimit.checkInput(nID2))
	{
		case 0:
			if (nID2 > 0)
			{
				goto label0;
			}
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			this.m_sButton.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			nSelectID = nID2;
			return 1;
		case 2:
			nSelectID = nID2;
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nID2))
	{
		case 0:
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			this.m_sLimit.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			nSelectID = nID2;
			return 1;
		case 2:
			nSelectID = nID2;
			return 2;
		default:
			break;
	}
label0:
	this.m_sScroll.setInputFlag(true);
	this.m_sLimit.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	システムバー_入力ＯＮ();
	if (nID2 != nSelectID)
	{
		this.setSelect(nSelectID, false);
	}
	nSelectID = nID2;
	return 0;
}

int T_Knowledge::checkKey(int nID)
{
	if (this.m_nMode != 0)
	{
		return 0;
	}
	if (this.m_sScroll.checkKey())
	{
		return 0;
	}
	int nID2 = システムバー_キー確認(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

bool T_Knowledge::checkWheel()
{
	if (this.m_nMode != 0)
	{
		return false;
	}
	if (this.m_sScroll.checkWheel())
	{
		return true;
	}
	ホイール_クリア();
	return false;
}

void T_Knowledge::resetSelect()
{
	this.m_sScroll.resetSelect();
	this.m_sLimit.resetSelect();
	this.m_sButton.resetSelect();
	システムバー_選択解除();
}

void T_Knowledge::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 130000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 120000)
	{
		this.m_sLimit.setCursor(nID);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonCursor(nID);
		return;
	}
}

void T_Knowledge::setZ(int nZ)
{
	this.m_spBase.setZ(nZ);
	this.m_sList.setZ(nZ + 1);
	this.m_sScroll.setZ(nZ + 1);
	this.m_sButton.setZ(nZ + 5);
}

void T_Knowledge::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sList.setShow(bShow);
	this.m_sScroll.setShow(bShow);
	this.m_sLimit.setShow(bShow);
	this.m_sButton.setShow(bShow);
}

void T_Knowledge::setButtonActive()
{
	int i = 0;
	for (i = 0; i < 24; ++i)
	{
		this.m_sButton.setButtonActive(this.getButtonID(i), this.m_nMode == 0 ? this.getListNo(i) > 0 : 0);
	}
	this.m_sLimit.setButtonActive(this.m_nMode);
}

int T_Knowledge::getPrevList(int nID)
{
	int idx = this.getKnowledgeIndex(nID);
	if (idx < 0)
	{
		return this.getLastList();
	}
	--idx;
	if (this.getListNo(idx) > 0)
	{
		return this.getButtonID(idx);
	}
	return this.m_sLimit.getFirst();
}

int T_Knowledge::getNextList(int nID)
{
	int idx = this.getKnowledgeIndex(nID);
	if (idx < 0)
	{
		return this.getFirstList();
	}
	++idx;
	if (this.getListNo(idx) > 0)
	{
		return this.getButtonID(idx);
	}
	return this.m_sLimit.getFirst();
}

int T_Knowledge::getFirstList()
{
	int cnt = this.m_sList.getListCount();
	if (cnt <= 0)
	{
		return this.m_sLimit.getFirst();
	}
	return this.getButtonID(0);
}

int T_Knowledge::getLastList()
{
	int cnt = this.m_sList.getListCount();
	if (cnt <= 0)
	{
		return this.m_sLimit.getFirst();
	}
	return cnt < 24 ? this.getButtonID(cnt - 1) : this.getButtonID(23);
}

