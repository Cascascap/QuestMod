T_Town::T_Town()
{
	this.clear();
}

T_Town::~T_Town()
{
	this.delete();
}

int T_Town::run()
{
	int nRet = 0;
	int nID = ランス城_オープン確認() ? 600011 : 600012;
	if (!this.create())
	{
		return -1;
	}
	_EFFECT(1, 100);
	セーブメッセージ_削除();
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

int T_Town::moveUp(int nID)
{
	if (nID > 920000)
	{
		switch (ミニステータス_遷移インデクス(nID))
		{
			case 0:
				break;
			case 1:
			case 2:
				return 600012;
			case 3:
				return 600013;
			case 4:
				return 600014;
			default:
				break;
		}
		return this.m_sButton.getFirstButton(true);
	}
	if (nID > 900000)
	{
		return カーソル移動_システムバー＞ミニステータス(nID);
	}
	if (nID > 600000)
	{
		return カーソル移動_街マップ＞システムバー(nID);
	}
	return this.m_sButton.getFirstButton(true);
}

int T_Town::moveDown(int nID)
{
	if (nID > 920000)
	{
		return カーソル移動_ミニステータス＞システムバー(nID);
	}
	if (nID > 900000)
	{
		return カーソル移動_システムバー＞街マップ(nID, this.m_sButton);
	}
	if (nID > 600000)
	{
		switch (nID)
		{
			case 600011:
				return ミニステータス_次ボタン_遷移(0);
			case 600012:
				return ミニステータス_次ボタン_遷移(1);
			case 600013:
				return ミニステータス_次ボタン_遷移(2);
			case 600014:
			default:
				break;
		}
		return ミニステータス_最終ボタン();
	}
	return this.m_sButton.getLastButton(true);
}

int T_Town::moveLeft(int nID)
{
	if (nID > 900000)
	{
		return システムバー_前ボタン(nID);
	}
	if (nID > 600000)
	{
		return this.m_sButton.getPrevButton(nID, true, true);
	}
	return this.m_sButton.getFirstButton(true);
}

int T_Town::moveRight(int nID)
{
	if (nID > 900000)
	{
		return システムバー_次ボタン(nID);
	}
	if (nID > 600000)
	{
		return this.m_sButton.getNextButton(nID, true, true);
	}
	return this.m_sButton.getLastButton(true);
}

void T_Town::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		return;
	}
	if (nID > 600000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
	}
}

bool T_Town::create()
{
	this.delete();
	システムバー_作成(10, -1, true);
	this.m_spBase.setCg(11001);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(1);
	T_Sprite spSelect;
	T_Sprite spDeactive;
	spSelect.setCg(11002);
	spDeactive.setCg(11003);
	if (ランス城_掃除中確認())
	{
		this.m_spBase.blendCg(167, 0, 11154, 255);
		spSelect.blendCg(167, 0, 11154, 255);
		spDeactive.blendCg(167, 0, 11154, 255);
	}
	this.m_sButton.create();
	int nX = 0;
	this.createButton(spSelect, spDeactive, nX, 0, 600011, 112, ランス城_オープン確認());
	nX += 256;
	this.createButton(spSelect, spDeactive, nX, 0, 600012, 113, true);
	nX += 256;
	this.createButton(spSelect, spDeactive, nX, 0, 600013, 114, true);
	nX += 256;
	this.createButton(spSelect, spDeactive, nX, 0, 600014, 115, true);
	this.m_sButton.setZ(2);
	this.setShow(true);
	spSelect.delete();
	spDeactive.delete();
	this.m_sShortcutInfo.create(9901);
	this.m_sShortcutInfo.addAll(this.m_sButton);
	this.m_sShortcutInfo.addAll(システムバー_ボタン群());
	this.m_sInputKey.create(1, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&街マップ_上矢印);
	this.m_sInputKey.setArrowDownCallback(&街マップ_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&街マップ_左矢印);
	this.m_sInputKey.setArrowRightCallback(&街マップ_右矢印);
	this.m_sInputKey.setSelectCallback(&街マップ_選択設定);
	return true;
}

bool T_Town::createButton(ref T_Sprite spSelect, ref T_Sprite spDeactive, int nX, int nY, int nID, int nKey, bool bActive)
{
	if (!スプライト_有効(spSelect))
	{
		return false;
	}
	T_TextSprite spWork;
	T_Button sButton;
	sButton.createRect(256, 588, 256, 588, -1, -1);
	ref T_ButtonSprite rfsButtonSp = sButton.getButtonSp(1);
	spWork.create(256, 588, 0, 0, 0, 0);
	spWork.copyCg(0, 0, spDeactive, nX, nY, 256, 588);
	rfsButtonSp.createSp(spWork);
	spWork.copyCg(0, 0, spSelect, nX, nY, 256, 588);
	sButton.createFrameSp(0, spWork, 0);
	this.m_sButton.addButton(nID, sButton);
	this.m_sButton.setButtonPos(nID, nX, nY);
	this.m_sButton.setButtonKey(nID, nKey);
	this.m_sButton.setButtonActive(nID, bActive);
	return true;
}

void T_Town::delete()
{
	this.m_spBase.delete();
	this.m_sButton.delete();
	this.m_sShortcutInfo.delete();
	this.m_sInputKey.delete();
	システムバー_削除();
	this.clear();
}

void T_Town::clear()
{
	return;
}

bool T_Town::exec(int nID, ref int nRet)
{
	nRet = 0;
	this.m_sShortcutInfo.setShow(false);
	if (nID > 900000)
	{
		return this.execSystemBar(nID);
	}
	switch (nID)
	{
		case 600011:
		case 600012:
		case 600013:
		case 600014:
			nRet = nID;
			return true;
		default:
			break;
	}
	return false;
}

bool T_Town::execSystemBar(int nID)
{
	int nRet = システムバー_実行(nID);
	if (nRet == 910002)
	{
		システムメニュー_ロード();
	}
	return false;
}

int T_Town::checkSelect(int nID)
{
	int nRet = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		if (キャンセル_確認())
		{
			this.setCursor(900001);
			continue;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_Town::checkInput(ref int nSelectID)
{
	nSelectID = 0;
	switch (システムバー_入力確認(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
			this.m_sButton.setInputFlag(false);
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nSelectID))
	{
		case 0:
			break;
		case 1:
			システムバー_入力ＯＦＦ();
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
label0:
	this.m_sButton.setInputFlag(true);
	システムバー_入力ＯＮ();
	return 0;
}

int T_Town::checkKey(int nID)
{
	int nID2 = システムバー_キー確認(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	this.m_sShortcutInfo.check();
	return 0;
}

void T_Town::resetSelect()
{
	this.m_sButton.resetSelect();
	システムバー_選択解除();
}

void T_Town::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 600000)
	{
		this.m_sButton.setButtonCursor(nID);
		return;
	}
}

void T_Town::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sButton.setShow(bShow);
	システムバー_表示設定(bShow);
}

