bool FitText2(string text, int maxWidth, int fontNumber, int maxFontSize, int minFontSize, ref int fontSize, float maxSpacing, float minSpacing, ref float spacing)
{
	int textWidth = 0;
	SelectFontNumber(fontNumber);
	fontSize = maxFontSize;
	for (; ; )
	{
		spacing = maxSpacing;
		SetFontSize(fontSize);
		SetSpacing(spacing);
		textWidth = MeasureText(text, true);
		if (textWidth <= maxWidth)
		{
			return true;
		}
		spacing = minSpacing;
		SetSpacing(spacing);
		textWidth = MeasureText(text, true);
		if (textWidth <= maxWidth)
		{
			FitText3(text, maxWidth, maxSpacing, minSpacing, spacing);
			return true;
		}
		if (fontSize - 2 < minFontSize)
		{
			return false;
		}
		fontSize -= 2;
	}
	return false;
}

void FitText3(string text, int maxWidth, float maxSpacing, float minSpacing, ref float spacing)
{
	int s1 = minSpacing * 20.0 + 0.5;
	int s2 = maxSpacing * 20.0 + 0.5;
	for (; ; )
	{
		int sI = (s1 + s2) / 2;
		spacing = sI / 20.0;
		SetSpacing(spacing);
		if (sI == s1)
		{
			break;
		}
		int textWidth = MeasureText(text, true);
		if (textWidth <= maxWidth)
		{
			s1 = sI;
		}
		else
		{
			s2 = sI;
		}
	}
}

void WordWrapText(string text, ref array@string lines, ref array@float spacings, int maxWidth, float maxSpacing, float minSpacing)
{
label0:
	int i = 0;
	int c = 0;
	int textLength = text.Length();
	for (i = 0; i < textLength; ++i)
	{
		c = text[i];
		if (c == 36 || c == 64 || c == 10)
		{
			string textLine = text.GetPart(0, i);
			text = text.GetPart(i + 1, textLength - (i + 1));
			WordWrapText2(textLine, lines, spacings, maxWidth, maxSpacing, minSpacing);
			goto label0;
		}
	}
	WordWrapText2(text, lines, spacings, maxWidth, maxSpacing, minSpacing);
}

void WordWrapText2(string text, ref array@string lines, ref array@float spacings, int maxWidth, float maxSpacing, float minSpacing)
{
	for (; ; )
	{
		int textLength = text.Length();
		int lineWidth = 0;
		int charIndexMaxSpacing = 0;
		int charIndexMinSpacing = 0;
		float spacing = maxSpacing;
		SetSpacing(maxSpacing);
		charIndexMaxSpacing = MeasureTextUntilPixel(text, lineWidth, maxWidth);
		charIndexMinSpacing = charIndexMaxSpacing;
		if (charIndexMaxSpacing == textLength)
		{
			lines.PushBack(text);
			spacings.PushBack(maxSpacing);
			return;
		}
		if (maxSpacing > minSpacing)
		{
			SetSpacing(minSpacing);
			charIndexMinSpacing = MeasureTextUntilPixel(text, lineWidth, maxWidth);
			if (charIndexMinSpacing == textLength)
			{
				FitText3(text, maxWidth, maxSpacing, minSpacing, spacing);
				lines.PushBack(text);
				spacings.PushBack(spacing);
				return;
			}
		}
		int i = charIndexMinSpacing - 1;
		if (i < 0)
		{
			i = 0;
		}
		int c = 0;
		c = text[i];
		while (c > 32 && c < 128 && i > 0)
		{
			--i;
			c = text[i];
		}
		while (c <= 32 && i > 0)
		{
			--i;
			c = text[i];
		}
		if (i == 0)
		{
			i = charIndexMinSpacing - 1;
		}
		++i;
		string line = text.GetPart(0, i);
		FitText3(line, maxWidth, maxSpacing * 1.5, minSpacing, spacing);
		lines.PushBack(line);
		spacings.PushBack(spacing);
		while (i < textLength && text[i] <= ' ')
		{
			++i;
		}
		if (i == textLength)
		{
			return;
		}
		text = text.GetPart(i, textLength - i);
	}
}

int DrawTextNew(int nType, string szText, int nFontType, int nFontSize, int nColorR, int nColorG, int nColorB, int nWeight, int nEdgeR, int nEdgeG, int nEdgeB, int nEdgeWeight, int nTextSpace, float fSpacing)
{
	if (nType == 0)
	{
		return テキスト_行作成(nType, szText, nFontType, nFontSize, nColorR, nColorG, nColorB, nWeight, nEdgeR, nEdgeG, nEdgeB, nEdgeWeight, nTextSpace);
	}
	int i = 0;
	int cnt = szText.Length();
	if (cnt <= 0)
	{
		return -1;
	}
	array@T_Sprite aspChar;
	array@int CharX;
	aspChar.Alloc(cnt);
	CharX.Alloc(cnt);
	int nW = 0;
	int nH = 0;
	SelectFontNumber(nFontType);
	SetFontSize(nFontSize);
	SetSpacing(fSpacing);
	SetFixedWidthSpacing(nTextSpace);
	float advance = 0.0;
	int tableIndex = 0;
	int x = 0;
	int c = 32;
	int nextChar = 32;
	c = GetCharFromText(szText, 0);
	if (c >= 32 && c < 127)
	{
		tableIndex = 95 + (c - 32) * 96;
		advance = Advances[tableIndex];
		x -= advance * currentScale + 0.0;
	}
	int widthCorrection = nEdgeWeight / 100;
	if (nWeight > 0)
	{
		widthCorrection += 2;
	}
	for (i = 0; i < cnt; ++i)
	{
		int nSpNo = 0;
		string szChar = szText.GetPart(i, 1);
		c = GetCharFromText(szChar, 0);
		nextChar = 32;
		if (i + 1 < cnt)
		{
			nextChar = GetCharFromText(szText, i + 1);
		}
		ref T_Sprite rfsChar = aspChar[i];
		ref int charX = CharX[i];
		nSpNo = テキスト_文字作成(szChar, nFontType, nFontSize, nColorR, nColorG, nColorB, 太字確認(nFontType, nWeight) ? 40 : 0, nEdgeR, nEdgeG, nEdgeB, nEdgeWeight);
		charX = x;
		rfsChar.attach(nSpNo);
		if (nSpNo <= 0 && c != 9)
		{
			continue;
		}
		if (c >= 32 && c < 127)
		{
			if (nextChar >= 32 && nextChar < 127)
			{
				tableIndex = (c - 32) + (nextChar - 32) * 96;
			}
			else
			{
				tableIndex = c - 32;
			}
			advance = Advances[tableIndex];
			int advanceInt = (advance + scaledSpacing) * currentScale + 0.5;
			x += advanceInt;
			nW = x + widthCorrection;
		}
		else if (c < 32)
		{
			if (c == 9)
			{
				x = (x / currentTabWidth + 1) * currentTabWidth;
			}
			nW = x + widthCorrection;
		}
		else
		{
			nW = x + rfsChar.getWidth() + widthCorrection;
			bool isBracket = c == 31105 || c == 31361;
			if (!isBracket)
			{
				x += (currentFixedWidthSpacing * 3) / 10;
			}
			else
			{
				x += currentFixedWidthSpacing / 9;
			}
			charX = x;
			if (c >= 161 && c <= 223)
			{
				x += currentFontSize / 2;
			}
			else
			{
				x += currentFontSize;
			}
			if (!isBracket)
			{
				x += currentFixedWidthSpacing - (currentFixedWidthSpacing * 3) / 10;
			}
			else
			{
				x += currentFixedWidthSpacing - currentFixedWidthSpacing / 9;
			}
		}
		nH = _max(nH, _max(nFontSize, rfsChar.getHeight()));
	}
	nW = nW > 1024 ? 1024 : nW;
	nH = nH > 768 ? 768 : nH;
	T_Sprite spText;
	spText.create(nW, nH, 0, 0, 0, 0);
	int y = 0;
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfsChar = aspChar[i];
		x = CharX[i];
		int width = rfsChar.getWidth();
		int height = rfsChar.getHeight();
		drawGraph_CopyUseAMapBorder(spText, x, y, rfsChar, 0, 0, width, height, 1);
		drawGraph_AddDA_DAxSA(spText, x, y, rfsChar, 0, 0, width, height);
		rfsChar.delete();
	}
	aspChar.Free();
	CharX.Free();
	return spText.detach();
}

