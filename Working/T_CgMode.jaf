int T_CgMode::getDataID(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? -1 : 110000 + nIndex + 1;
}

int T_CgMode::getDataIndex(int nID)
{
	if (nID < 110000 || nID >= 140000)
	{
		return -1;
	}
	int idx = nID + -110001;
	return idx < 0 || idx >= 20 ? -1 : idx;
}

int T_CgMode::getKaisoID(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? -1 : 140000 + nIndex + 1;
}

int T_CgMode::getKaisoIndex(int nID)
{
	if (nID < 140000 || nID >= 180000)
	{
		return -1;
	}
	int idx = nID + -140001;
	return idx < 0 || idx >= 20 ? -1 : idx;
}

int T_CgMode::getLightID(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_nMaxLine ? -1 : 180000 + nIndex + 1;
}

int T_CgMode::getLightIndex(int nID)
{
	if (nID < 180000 || nID >= 190000)
	{
		return -1;
	}
	int idx = nID + -180001;
	return idx < 0 || idx >= this.m_nMaxLine ? -1 : idx;
}

int T_CgMode::calcTopIndex(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_nMaxLine ? -1 : 数値_補正(nIndex - 2, 0, this.m_nMaxLine - 5);
}

int T_CgMode::calcLightIndex(int nIndex)
{
	return nIndex < 0 || nIndex >= 20 ? -1 : this.m_sData.getTopIndex() + nIndex;
}

int T_CgMode::getTopData(int nCol)
{
	int idx = ＣＧモード_インデクス(0, nCol);
	return idx < 0 ? this.getFirstData() : this.getDataID(idx);
}

int T_CgMode::getBottomData(int nCol)
{
	int idx = ＣＧモード_インデクス(3, nCol);
	return idx < 0 ? this.getLastData() : this.getDataID(idx);
}

int T_CgMode::getFirstData()
{
	return this.getDataID(0);
}

int T_CgMode::getLastData()
{
	return this.getDataID(19);
}

T_CgMode::T_CgMode()
{
	this.clear();
}

T_CgMode::~T_CgMode()
{
	this.delete();
}

int T_CgMode::run(int nMode)
{
	int nRet = 0;
	int nMusicNo = 音楽_番号();
	音楽_再生(0);
	int nID = 110001;
	this.create(nMode);
	_EFFECT(1, 100);
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
		nID = nRet;
	}
	this.delete();
	音楽_再生(nMusicNo);
	return nRet;
}

void T_CgMode::scroll(int nLine)
{
	int idx = this.m_sData.setTopIndex(数値_補正(nLine, 0, this.m_nMaxLine - 1) * 4);
	this.m_sLight.lock(idx);
	this.setButtonActive();
	this.setButtonShow(true);
}

int T_CgMode::moveUp(int nID)
{
	switch (nID)
	{
		case 100009:
			return this.getLastData();
		default:
			break;
	}
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			switch (nID)
			{
				case 900001:
					return this.getBottomData(0);
				case 900002:
					return this.getBottomData(1);
				case 900003:
					return this.getBottomData(2);
				default:
					break;
			}
		}
		goto label0;
	}
	if (nID > 190000)
	{
		return this.getLastData();
	}
	if (nID > 180000)
	{
		return this.m_nMode == 1 ? this.getBottomData(0) : 900001;
	}
	if (nID > 110000)
	{
		return this.moveUpData(this.getDataIndex(nID));
	}
label0:
	return this.getFirstData();
}

int T_CgMode::moveDown(int nID)
{
	switch (nID)
	{
		case 100009:
			return this.getTopData(4);
		default:
			break;
	}
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			switch (nID)
			{
				case 900001:
					return this.getTopData(0);
				case 900002:
					return this.getTopData(1);
				case 900003:
					return this.getTopData(2);
				default:
					break;
			}
		}
		goto label0;
	}
	if (nID > 190000)
	{
		return this.m_nMode == 1 ? this.getFirstData() : 900001;
	}
	if (nID > 180000)
	{
		return this.getFirstData();
	}
	if (nID > 110000)
	{
		return this.moveDownData(this.getDataIndex(nID));
	}
label0:
	return this.getLastData();
}

int T_CgMode::moveLeft(int nID)
{
	switch (nID)
	{
		case 100009:
			goto label0;
		default:
			break;
	}
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			return システムバー_前ボタン(nID);
		}
		goto label0;
	}
	if (nID > 190000)
	{
		return this.getBottomData(0);
	}
	if (nID > 180000)
	{
		goto label0;
	}
	if (nID > 110000)
	{
		return this.moveLeftData(this.getDataIndex(nID));
	}
label0:
	return this.getFirstData();
}

int T_CgMode::moveRight(int nID)
{
	switch (nID)
	{
		case 100009:
			return this.getTopData(4);
		default:
			break;
	}
	if (nID > 900000)
	{
		if (this.m_nMode == 0)
		{
			return システムバー_次ボタン(nID);
		}
		goto label0;
	}
	if (nID > 190000)
	{
		goto label0;
	}
	if (nID > 180000)
	{
		return this.getTopData(4);
	}
	if (nID > 110000)
	{
		return this.moveRightData(this.getDataIndex(nID));
	}
label0:
	return this.getLastData();
}

void T_CgMode::setSelect(int nID, bool bSelect)
{
	if (nID > 900000)
	{
		システムバー_選択設定(nID, bSelect, true);
		goto label0;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setSelect(nID, bSelect);
		goto label0;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonSelect(nID, bSelect, true);
	}
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		this.hideComment(nID);
	}
label0:
	this.checkButton(bSelect ? nID : 0);
}

void T_CgMode::create(int nMode)
{
	this.delete();
	this.m_spBase.setCg(12251);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(9001);
	this.m_sData.create(9002);
	this.m_sLight.create(9002, this.m_spBase);
	int nMaxCount = ＣＧモード_最大数();
	int nMaxLine = (nMaxCount + 3) / 4;
	this.m_sCount.create(98, 20, -1, 0, 1, 1);
	this.m_sCount.setPos(882, 8);
	this.m_sCount.setZ(9002);
	this.m_sCount.setTextSpace(-4);
	this.m_sCount.setFontSize(24);
	this.m_sCount.setFontType(258);
	this.m_sCount.setFontBold(1);
	this.m_sCount.setFontColor(255, 255, 255);
	this.m_sCount.setText("%03d／%03d" % ＣＧモード_有効数() % nMaxCount, false);
	this.m_sScroll.create(1, 920, 190000, 0, 0);
	this.m_sScroll.setPos(12, 706);
	this.m_sScroll.setZ(9002);
	this.m_sScroll.setActive(-1, true);
	this.m_sScroll.setCallback(&scrollCgMode);
	this.m_sScroll.setValue(0, nMaxLine, 5);
	this.m_nMode = nMode;
	this.m_nMaxLine = nMaxLine;
	this.m_sButton.create();
	int i = 0;
	int nZ = 9011;
	for (i = 0; i < 20; ++i)
	{
		this.createButton(i);
	}
	for (i = 0; i < nMaxLine; ++i)
	{
		this.createLight(i);
	}
	ボタン登録_ＣＧ(this.m_sButton, 100009, 988, 10, 10007, -1, -1, -2147483648, -2147483648);
	this.m_sButton.setZ(nZ);
	nZ += 20;
	for (i = 0; i < 20; ++i)
	{
		this.m_sButton.setButtonZ(this.getKaisoID(i), nZ);
	}
	this.scroll(0);
	this.setShow(true);
	this.m_sInputKey.create(1, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&ＣＧモード_上矢印);
	this.m_sInputKey.setArrowDownCallback(&ＣＧモード_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&ＣＧモード_左矢印);
	this.m_sInputKey.setArrowRightCallback(&ＣＧモード_右矢印);
	this.m_sInputKey.setSelectCallback(&ＣＧモード_選択設定);
}

void T_CgMode::delete()
{
	this.hideComment(-1);
	this.m_spBase.delete();
	this.m_sData.delete();
	this.m_sLight.delete();
	this.m_sCount.delete();
	this.m_sScroll.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_CgMode::clear()
{
	this.m_nMode = -1;
	this.m_nCommentID = 0;
	this.m_nMaxLine = 0;
}

bool T_CgMode::createButton(int nIndex)
{
	int nID = this.getDataID(nIndex);
	if (nID <= 0)
	{
		return false;
	}
	int nX = ＣＧモード_位置Ｘ(nIndex);
	int nY = ＣＧモード_位置Ｙ(nIndex);
	int nH = 72;
	this._createButton(this.getKaisoID(nIndex), nX + 44, nY + 76, 12256, nX, nY, nX, nY + nH, 192, 144 - nH);
	ボタン登録_矩形(this.m_sButton, nID, nX, nY, 192, 144, false);
	return true;
}

bool T_CgMode::_createButton(int nID, int nX, int nY, int nCgNo, int nFrameX, int nFrameY, int nSelectX, int nSelectY, int nWidth, int nHeight)
{
	if (nID <= 0)
	{
		return false;
	}
	ボタン登録_ＣＧ(this.m_sButton, nID, nX, nY, nCgNo, -1, -1, -2147483648, -2147483648);
	return true;
}

bool T_CgMode::createLight(int nIndex)
{
	int nID = this.getLightID(nIndex);
	if (nID <= 0)
	{
		return false;
	}
	int nX = 13 + 18 * nIndex;
	int nY = 37;
	int nX2 = 13 + 18 * this.calcTopIndex(nIndex);
	int nY2 = 37;
	T_Button sButton;
	if (!sButton.createRect(18, 56, -1, -1, -1, -1))
	{
		return false;
	}
	sButton.createFrame(0, 90, 56, 216, 255, 0, 102, nX2 - nX, nY2 - nY, 0);
	this.m_sButton.addButton(nID, sButton);
	this.m_sButton.setButtonPos(nID, nX, nY);
	return true;
}

bool T_CgMode::exec(int nID, ref int nRet)
{
	nRet = 0;
	switch (nID)
	{
		case 100009:
			return true;
		default:
			break;
	}
	if (nID > 900000)
	{
		nRet = nID;
		return true;
	}
	if (nID > 190000)
	{
		this.m_sScroll.exec(nID);
		return false;
	}
	if (nID > 180000)
	{
		return this.execLight(nID);
	}
	if (nID > 140000)
	{
		return this.execKaiso(this.getKaisoIndex(nID), nRet);
	}
	if (nID > 110000)
	{
		return this.execCg(this.getDataIndex(nID), nRet);
	}
	return false;
}

bool T_CgMode::execCg(int nIndex, ref int nRet)
{
	this.setShow(false);
	this.m_sData.exec(nIndex, 1);
	this.m_sLight.remake(this.calcLightIndex(nIndex));
	this.setShow(true);
	_EFFECT(1, 1000);
	nRet = this.getDataID(nIndex);
	return false;
}

bool T_CgMode::execKaiso(int nIndex, ref int nRet)
{
	this.setShow(false);
	this.m_sData.exec(nIndex, 2);
	this.m_sLight.remake(this.calcLightIndex(nIndex));
	this.setShow(true);
	_EFFECT(1, 100);
	nRet = this.getDataID(nIndex);
	return false;
}

bool T_CgMode::execLight(int nID)
{
	int idx = this.calcTopIndex(this.getLightIndex(nID));
	if (idx < 0)
	{
		return false;
	}
	this.m_sScroll.setValue(idx, -1, -1);
	this.scroll(idx);
	UPDATE(true);
	return false;
}

int T_CgMode::checkSelect(int nID)
{
	int nRet = 0;
	ホイール_クリア();
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	UPDATE(true);
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		this.checkWheel();
		if (キャンセル_確認())
		{
			nRet = 100009;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_CgMode::checkInput(ref int nSelectID)
{
	nSelectID = 0;
	switch (システムバー_入力確認(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			this.m_sButton.setInputFlag(false);
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	switch (this.m_sScroll.checkInput(nSelectID))
	{
		case 0:
			if (nSelectID > 0)
			{
				goto label0;
			}
			break;
		case 1:
		case 2:
			return 2;
		default:
			break;
	}
	switch (this.m_sButton.checkInput(nSelectID))
	{
		case 0:
			break;
		case 1:
			this.m_sScroll.setInputFlag(false);
			システムバー_入力ＯＦＦ();
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	if (nSelectID > 0)
	{
		this.showComment(nSelectID);
	}
	else
	{
		this.hideComment(-1);
	}
label0:
	システムバー_入力ＯＮ();
	this.m_sScroll.setInputFlag(true);
	this.m_sButton.setInputFlag(true);
	this.checkButton(nSelectID);
	return 0;
}

int T_CgMode::checkKey(int nID)
{
	if (this.m_sScroll.checkKey())
	{
		return 0;
	}
	int nID2 = 0;
	nID2 = システムバー_キー確認(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	if (!キー_押下(82))
	{
		return 0;
	}
	int idx = -1;
	if (nID > 140000)
	{
		idx = this.getKaisoIndex(nID);
		goto label0;
	}
	if (nID > 110000)
	{
		idx = this.getDataIndex(nID);
		goto label0;
	}
label0:
	if (idx < 0)
	{
		goto label1;
	}
	if (!ＣＧモード_回想あり(this.m_sData.getNo(idx)))
	{
		goto label1;
	}
	効果音_クリック();
	キー_離し待ち(82, true);
	return this.getKaisoID(idx);
label1:
	効果音_エラー();
	キー_離し待ち(82, true);
	return 0;
}

bool T_CgMode::checkWheel()
{
	if (this.m_sScroll.checkWheel())
	{
		return true;
	}
	ホイール_クリア();
	return false;
}

void T_CgMode::checkButton(int nID)
{
	int idx = -1;
	if (nID > 180000)
	{
		goto label0;
	}
	if (nID > 140000)
	{
		idx = this.getKaisoIndex(nID);
		goto label0;
	}
	if (nID > 110000)
	{
		idx = this.getDataIndex(nID);
		goto label0;
	}
label0:
	int i = 0;
	for (i = 0; i < 20; ++i)
	{
		int nID3 = this.getKaisoID(i);
		this.m_sButton.setButtonShow(nID3, i == idx ? this.m_sButton.getButtonActive(nID3) : 0);
	}
	this.m_sButton.setButtonSelect(this.getDataID(idx), true, false);
}

void T_CgMode::showComment(int nID)
{
	if (this.m_nCommentID == nID)
	{
		return;
	}
	string szText = "";
	if (szText.Empty())
	{
		this.hideComment(-1);
		return;
	}
	if (説明_表示(nID, "", szText, "", 500, false) > 0)
	{
		説明_位置設定(this.m_sButton.getButtonPosX(nID) + 192, this.m_sButton.getButtonPosY(nID));
	}
	this.m_nCommentID = nID;
}

void T_CgMode::hideComment(int nID)
{
	nID = nID < 0 ? this.m_nCommentID : nID;
	if (nID > 0)
	{
		説明_消し(nID);
	}
	this.m_nCommentID = -1;
}

void T_CgMode::resetSelect()
{
	this.m_sScroll.resetSelect();
	this.m_sButton.resetSelect();
	システムバー_選択解除();
	this.hideComment(-1);
	this.checkButton(0);
}

void T_CgMode::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	if (nID > 900000)
	{
		システムバー_カーソル設定(nID);
		return;
	}
	if (nID > 190000)
	{
		this.m_sScroll.setCursor(nID);
		return;
	}
	if (nID > 100000)
	{
		this.m_sButton.setButtonCursor(nID);
	}
}

void T_CgMode::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_sLight.setShow(bShow);
	this.m_sData.setShow(bShow);
	this.m_sCount.setShow(bShow);
	this.m_sScroll.setShow(bShow);
	this.setButtonShow(bShow);
}

void T_CgMode::setButtonShow(bool bShow)
{
	this.m_sButton.setShow(bShow);
	int i = 0;
	for (i = 0; i < 20; ++i)
	{
		this.m_sButton.setButtonShow(this.getKaisoID(i), false);
	}
}

void T_CgMode::setButtonActive()
{
	int i = 0;
	for (i = 0; i < 20; ++i)
	{
		bool bActive = this.m_sData.getStatus(i) > 0;
		bool bKaiso = ＣＧモード_回想あり(this.m_sData.getNo(i));
		this.m_sButton.setButtonActive(this.getDataID(i), bActive);
		this.m_sButton.setButtonActive(this.getKaisoID(i), bKaiso ? bActive : 0);
	}
}

int T_CgMode::moveUpData(int nIndex)
{
	int idx = this.m_sData.moveUp(nIndex, this.m_nMode == 1);
	if (idx >= 0)
	{
		return this.getDataID(idx);
	}
	if (this.m_nMode == 0)
	{
		int nCol = ＣＧモード_列位置(nIndex);
		switch (nCol)
		{
			case 0:
				return 900001;
			case 1:
				return 900002;
			case 2:
				return 900003;
			case 3:
			case 4:
				return this.getBottomData(nCol);
			default:
				break;
		}
	}
	return this.getFirstData();
}

int T_CgMode::moveDownData(int nIndex)
{
	int idx = this.m_sData.moveDown(nIndex, this.m_nMode == 1);
	if (idx >= 0)
	{
		return this.getDataID(idx);
	}
	if (this.m_nMode == 0)
	{
		int nCol = ＣＧモード_列位置(nIndex);
		switch (nCol)
		{
			case 0:
				return 900001;
			case 1:
				return 900002;
			case 2:
				return 900003;
			case 3:
			case 4:
				return this.getTopData(nCol);
			default:
				break;
		}
	}
	return this.getLastData();
}

int T_CgMode::moveLeftData(int nIndex)
{
	int idx = this.m_sData.moveLeft(nIndex, true);
	return idx < 0 ? this.getFirstData() : this.getDataID(idx);
}

int T_CgMode::moveRightData(int nIndex)
{
	int idx = this.m_sData.moveRight(nIndex, true);
	return idx < 0 ? this.getLastData() : this.getDataID(idx);
}

