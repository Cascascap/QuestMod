int T_ConfigEtc::getCheckID(int nIndex)
{
	return nIndex < 0 || nIndex >= 9 ? -1 : 210000 + nIndex + 1;
}

int T_ConfigEtc::getCheckIndex(int nID)
{
	int idx = nID + -210001;
	return idx < 0 || idx >= 9 ? -1 : idx;
}

T_ConfigEtc::T_ConfigEtc()
{
	this.clear();
}

T_ConfigEtc::~T_ConfigEtc()
{
	this.delete();
}

int T_ConfigEtc::run()
{
	int nRet = 0;
	int nID = this.getFirstCheckBox();
	if (!this.create())
	{
		return -1;
	}
	UPDATE(true);
	while (true)
	{
		nID = this.checkSelect(nID);
		if (this.exec(nID, nRet))
		{
			break;
		}
	}
	this.delete();
	return nRet;
}

int T_ConfigEtc::moveUp(int nID)
{
	if (nID > 210000)
	{
		return this.getPrevCheckBox(nID);
	}
	if (nID > 200000)
	{
		goto label0;
	}
	int nID2 = コンフィグ共通_上矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		return this.getLastCheckBox();
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigEtc::moveDown(int nID)
{
	if (nID > 210000)
	{
		return this.getNextCheckBox(nID);
	}
	if (nID > 200000)
	{
		goto label0;
	}
	int nID2 = コンフィグ共通_下矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
	if (nID2 == 0)
	{
		return this.getFirstCheckBox();
	}
label0:
	return this.getLastCheckBox();
}

int T_ConfigEtc::moveLeft(int nID)
{
	if (nID > 210000)
	{
		return nID;
	}
	if (nID > 200000)
	{
		goto label0;
	}
	int nID2 = コンフィグ共通_左矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getFirstCheckBox();
}

int T_ConfigEtc::moveRight(int nID)
{
	if (nID > 210000)
	{
		return nID;
	}
	if (nID > 200000)
	{
		goto label0;
	}
	int nID2 = コンフィグ共通_右矢印(nID);
	if (nID2 > 0)
	{
		return nID2;
	}
label0:
	return this.getLastCheckBox();
}

bool T_ConfigEtc::create()
{
	this.delete();
	this.m_spBase.setCg(40006);
	this.m_spBase.setPos(0, 0);
	this.m_spBase.setZ(15000, -1);
	this.m_spBase.setShow(true);
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		ref T_Sprite rfsCheck = this.m_aspCheck[i];
		rfsCheck.setCg(40037);
		rfsCheck.setZ(15001);
	}
	this.m_sButton.create();
	this.createCheckBox(0, 70, 135, 40059, "");
	this.createCheckBox(1, 70, 195, 40059, "");
	this.createCheckBox(2, 70, 295, 40059, "");
	this.createCheckBox(3, 70, 345, 40059, "");
	this.createCheckBox(4, 70, 435, 40059, "");
	this.createCheckBox(5, 70, 465, 40059, "");
	this.createCheckBox(6, 70, 540, 40059, "");
	this.createCheckBox(7, 70, 570, 40059, "");
	this.createCheckBox(8, 70, 600, 40059, "");
	コンフィグ共通_作成(this.m_sButton);
	this.m_sButton.setButtonActive(100006, false);
	this.m_sButton.setZ(15001);
	this.m_sButton.setShow(true);
	this.setValue();
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_sInputKey.setArrowUpCallback(&コンフィグ_上矢印);
	this.m_sInputKey.setArrowDownCallback(&コンフィグ_下矢印);
	this.m_sInputKey.setArrowLeftCallback(&コンフィグ_左矢印);
	this.m_sInputKey.setArrowRightCallback(&コンフィグ_右矢印);
	this.m_sInputKey.setSelectCallback(&コンフィグ_選択設定);
	return true;
}

void T_ConfigEtc::delete()
{
	int i = 0;
	int cnt = this.m_aspCheck.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspCheck[i].delete();
	}
	this.m_spBase.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_ConfigEtc::clear()
{
	return;
}

bool T_ConfigEtc::createCheckBox(int nIndex, int nX, int nY, int nCgNo, string szText)
{
	if (nIndex < 0 || nIndex >= this.m_aspCheck.Numof())
	{
		return false;
	}
	if (!コンフィグ共通_チェックＢＯＸ作成(this.m_sButton, this.getCheckID(nIndex), nX, nY, nCgNo))
	{
		return false;
	}
	this.m_aspCheck[nIndex].setPos(nX, nY);
	return true;
}

bool T_ConfigEtc::exec(int nID, ref int nRet)
{
	nRet = 0;
	if (nID > 210000)
	{
		return this.execCheckBox(this.getCheckIndex(nID));
	}
	int nRet2 = コンフィグ共通_処理(nID);
	if (nRet2 != 0)
	{
		nRet = nRet2 > 0 ? nRet2 : 0;
		return true;
	}
	return false;
}

bool T_ConfigEtc::execCheckBox(int nIndex)
{
	switch (nIndex)
	{
		case 0:
			マップ移動タイプ_設定(0);
			break;
		case 1:
			マップ移動タイプ_設定(1);
			break;
		case 2:
			画面操作モード設定(0);
			break;
		case 3:
			画面操作モード設定(1);
			break;
		case 4:
			マウスカーソル自動移動_設定(!マウスカーソル自動移動());
			break;
		case 5:
			AFL_Config_SetHideUnmoveMouseCursor(!AFL_Config_GetHideUnmoveMouseCursor());
			break;
		case 6:
			戦闘速度_設定(0);
			break;
		case 7:
			戦闘速度_設定(1);
			break;
		case 8:
			戦闘速度_設定(2);
			break;
		default:
			return false;
	}
	this.setValue();
	return false;
}

int T_ConfigEtc::checkSelect(int nID)
{
	int nRet = 0;
	キー_クリア(true);
	this.resetSelect();
	if (キー優先())
	{
		this.setSelect(nID, true);
	}
	while (true)
	{
		int nID2 = 0;
		int nRet2 = this.checkInput(nID2);
		if (nRet2 == 2)
		{
			nRet = nID2;
			break;
		}
		int nID4 = this.checkWheel();
		if (nID4 > 0)
		{
			nRet = nID4;
			break;
		}
		if (キャンセル_確認())
		{
			nRet = 100019;
			break;
		}
		if (nRet2 != 1)
		{
			int nID3 = this.checkKey(nID2);
			if (nID3 > 0)
			{
				nRet = nID3;
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_ConfigEtc::checkInput(ref int nSelectID)
{
	return this.m_sButton.checkInput(nSelectID);
}

int T_ConfigEtc::checkKey(int nID)
{
	int nID2 = this.m_sButton.checkKey();
	if (nID2 > 0)
	{
		return nID2;
	}
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

int T_ConfigEtc::checkWheel()
{
	switch (ホイール_確認(true))
	{
		case 9991:
			return 100005;
		case 9992:
			return 100007;
		default:
			break;
	}
	ホイール_クリア();
	return 0;
}

void T_ConfigEtc::resetSelect()
{
	this.m_sButton.resetSelect();
}

void T_ConfigEtc::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(nID, bSelect, true);
}

void T_ConfigEtc::setCursor(int nID)
{
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
		return;
	}
	this.m_sButton.setButtonCursor(nID);
}

void T_ConfigEtc::setValue()
{
	if (マップ移動タイプ() == 1)
	{
		this.m_aspCheck[0].setShow(0);
		this.m_aspCheck[1].setShow(1);
		this.m_sButton.setButtonActive(this.getCheckID(0), true);
		this.m_sButton.setButtonActive(this.getCheckID(1), false);
	}
	else
	{
		this.m_aspCheck[0].setShow(1);
		this.m_aspCheck[1].setShow(0);
		this.m_sButton.setButtonActive(this.getCheckID(0), false);
		this.m_sButton.setButtonActive(this.getCheckID(1), true);
	}
	if (画面操作モード() == 1)
	{
		this.m_aspCheck[2].setShow(0);
		this.m_aspCheck[3].setShow(1);
		this.m_sButton.setButtonActive(this.getCheckID(2), true);
		this.m_sButton.setButtonActive(this.getCheckID(3), false);
	}
	else
	{
		this.m_aspCheck[2].setShow(1);
		this.m_aspCheck[3].setShow(0);
		this.m_sButton.setButtonActive(this.getCheckID(2), false);
		this.m_sButton.setButtonActive(this.getCheckID(3), true);
	}
	this.m_aspCheck[4].setShow(マウスカーソル自動移動());
	this.m_aspCheck[5].setShow(AFL_Config_GetHideUnmoveMouseCursor());
	int nSpeed = 戦闘速度();
	this.m_aspCheck[6].setShow(nSpeed == 0);
	this.m_aspCheck[7].setShow(nSpeed == 1);
	this.m_sButton.setButtonActive(this.getCheckID(6), nSpeed != 0);
	this.m_sButton.setButtonActive(this.getCheckID(7), nSpeed != 1);
	this.m_aspCheck[8].setShow(nSpeed == 2);
	this.m_sButton.setButtonActive(this.getCheckID(8), nSpeed != 2);
}

int T_ConfigEtc::getPrevCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getLastCheckBox();
	}
	--idx;
	if (idx < 0)
	{
		return 100001;
	}
	return this.getCheckID(idx);
}

int T_ConfigEtc::getNextCheckBox(int nID)
{
	int idx = this.getCheckIndex(nID);
	if (idx < 0)
	{
		return this.getFirstCheckBox();
	}
	++idx;
	if (idx >= 9)
	{
		return 100011;
	}
	return this.getCheckID(idx);
}

int T_ConfigEtc::getFirstCheckBox()
{
	return this.getCheckID(0);
}

int T_ConfigEtc::getLastCheckBox()
{
	return this.getCheckID(8);
}

