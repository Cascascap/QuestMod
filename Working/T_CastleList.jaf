int T_CastleList::getAreaNo()
{
	return this.m_nAreaNo;
}

int T_CastleList::getPosX()
{
	return this.m_spBase.getPosX();
}

int T_CastleList::getPosY()
{
	return this.m_spBase.getPosY();
}

T_CastleList::T_CastleList()
{
	this.clear();
}

T_CastleList::~T_CastleList()
{
	this.delete();
}

bool T_CastleList::create(int nAreaNo)
{
	this.delete();
	if (nAreaNo <= 0)
	{
		return false;
	}
	if (ランス城_エリア状態(nAreaNo) <= 0)
	{
		return false;
	}
	this.m_spBase.setCg(11152);
	this.createFace(nAreaNo);
	if (ランス城_エリアＮＥＷ(nAreaNo) > 0)
	{
		this.m_spNew.setCg(11155);
	}
	switch (ランス城_エリアエロ(nAreaNo))
	{
		case 1:
			this.m_spHeart.setCg(11157);
			this.m_nHeartX = 239;
			this.m_nHeartY = 6;
			break;
		case 2:
		case 3:
			this.m_spHeart.setCg(11158);
			this.m_nHeartX = 238;
			this.m_nHeartY = 4;
			break;
		default:
			break;
	}
	this.m_nAreaNo = nAreaNo;
	return true;
}

void T_CastleList::delete()
{
	this.m_spBase.delete();
	this.m_spFrame.delete();
	this.m_spNew.delete();
	this.m_spHeart.delete();
	this.clear();
}

void T_CastleList::clear()
{
	this.m_nAreaNo = 0;
	this.m_nHeartX = 0;
	this.m_nHeartY = 0;
}

bool T_CastleList::createFace(int nAreaNo)
{
	bool bRet = false;
	T_Sprite spWork;
	T_Sprite spWork2;
	string szName = ランス城_エリアＣＧ文字列(nAreaNo);
	if (!szName.Empty())
	{
		bRet = spWork2.setCgFromFile(キャラ生成_顔ＣＧファイル名(szName));
	}
	else
	{
		int nCgNo = ランス城_エリアＣＧ(nAreaNo);
		if (nCgNo <= 0)
		{
			return false;
		}
		bRet = spWork2.setCg(nCgNo) > 0;
	}
	if (bRet)
	{
		spWork.copyStretch(24, 29, spWork2);
	}
	else
	{
		spWork.create(24, 29, 0, 0, 0, 255);
	}
	this.m_spFrame.setCg(11156);
	if (spWork.existAlpha())
	{
		drawGraph_BlendAMap(this.m_spFrame, 1, 1, spWork, 0, 0, 24, 29);
	}
	else
	{
		this.m_spFrame.copyCg(1, 1, spWork, 0, 0, 24, 29);
	}
	spWork.delete();
	return true;
}

void T_CastleList::setPos(int nX, int nY)
{
	this.m_spBase.setPos(nX, nY);
	this.m_spFrame.setPos(nX + 212, nY + 3);
	this.m_spNew.setPos(nX + -4, nY + -3);
	this.m_spHeart.setPos(nX + this.m_nHeartX, nY + this.m_nHeartY);
}

void T_CastleList::setZ(int nZ)
{
	this.m_spBase.setZ(nZ);
	this.m_spFrame.setZ(nZ + 1);
	this.m_spNew.setZ(nZ + 15);
	this.m_spHeart.setZ(nZ + 1);
}

void T_CastleList::setShow(bool bShow)
{
	this.m_spBase.setShow(bShow);
	this.m_spFrame.setShow(bShow);
	this.m_spNew.setShow(bShow);
	this.m_spHeart.setShow(bShow);
}

int T_CastleListManager::getAreaNo(int nIndex)
{
	return nIndex < 0 || nIndex >= this.m_anAreaNo.Numof() ? -1 : this.m_anAreaNo[nIndex];
}

int T_CastleListManager::getPosX(int nIndex)
{
	int nCol = this._getCol(nIndex);
	return nCol < 0 ? -1 : 145 + 286 * nCol;
}

int T_CastleListManager::getPosY(int nIndex)
{
	int nRow = this._getRow(nIndex);
	return nRow < 0 ? -1 : 82 + 55 * nRow;
}

int T_CastleListManager::getRow(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	return idx < 0 ? -1 : this._getRow(idx);
}

int T_CastleListManager::getCol(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	return idx < 0 ? -1 : this._getCol(idx);
}

int T_CastleListManager::getIndex(int nRow, int nCol)
{
	return nRow < 0 || nRow >= 9 || nCol < 0 || nCol >= 3 ? -1 : nRow * 3 + nCol;
}

int T_CastleListManager::_getRow(int nIndex)
{
	return nIndex < 0 || nIndex >= 27 ? -1 : nIndex / 3;
}

int T_CastleListManager::_getCol(int nIndex)
{
	return nIndex < 0 || nIndex >= 27 ? -1 : nIndex % 3;
}

T_CastleListManager::T_CastleListManager()
{
	this.clear();
}

T_CastleListManager::~T_CastleListManager()
{
	this.delete();
}

bool T_CastleListManager::create(int nZ)
{
	this.delete();
	if (this.setAreaNo() <= 0)
	{
		return false;
	}
	int i = 0;
	int cnt = this.m_asItem.Numof();
	for (i = 0; i < cnt; ++i)
	{
		ref T_CastleList rfsItem = this.m_asItem[i];
		if (rfsItem.create(this.m_anAreaNo[i]))
		{
			rfsItem.setPos(this.getPosX(i), this.getPosY(i));
			rfsItem.setZ(nZ);
		}
	}
	return true;
}

void T_CastleListManager::delete()
{
	int i = 0;
	int cnt = this.m_asItem.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asItem[i].delete();
	}
	this.clear();
}

void T_CastleListManager::clear()
{
	this.clearAreaNo();
}

int T_CastleListManager::moveUp(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	if (idx < 0)
	{
		return -1;
	}
	int i = 0;
	int nRow = this._getRow(idx);
	int nCol = this._getCol(idx);
	for (i = nRow - 1; i >= 0; --i)
	{
		int nNo = this.getAreaNo(this.getIndex(i, nCol));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return -1;
}

int T_CastleListManager::moveDown(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	if (idx < 0)
	{
		return -1;
	}
	int i = 0;
	int nRow = this._getRow(idx);
	int nCol = this._getCol(idx);
	for (i = nRow + 1; i < 9; ++i)
	{
		int nNo = this.getAreaNo(this.getIndex(i, nCol));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return -1;
}

int T_CastleListManager::moveLeft(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	if (idx < 0)
	{
		return -1;
	}
	int j = 0;
	int nRow = this._getRow(idx);
	int nCol = this._getCol(idx);
	for (j = nCol - 1; j >= 0; --j)
	{
		int nNo = this.getAreaNo(this.getIndex(nRow, j));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	for (j = 2; j > nCol; --j)
	{
		int nNo = this.getAreaNo(this.getIndex(nRow, j));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return nAreaNo;
}

int T_CastleListManager::moveRight(int nAreaNo)
{
	int idx = this.searchAreaNo(nAreaNo);
	if (idx < 0)
	{
		return -1;
	}
	int i = 0;
	int j = 0;
	int nRow = this._getRow(idx);
	int nCol = this._getCol(idx);
	for (j = nCol + 1; j < 3; ++j)
	{
		int nNo = this.getAreaNo(this.getIndex(nRow, j));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	for (j = 0; j < nCol; ++j)
	{
		int nNo = this.getAreaNo(this.getIndex(nRow, j));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return nAreaNo;
}

void T_CastleListManager::setShow(bool bShow)
{
	int i = 0;
	int cnt = this.m_asItem.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_asItem[i].setShow(bShow);
	}
}

int T_CastleListManager::getTopAreaNo(int nCol)
{
	if (nCol < 0 || nCol >= 3)
	{
		return -1;
	}
	int i = 0;
	int j = 0;
	int nNo = 0;
	for (i = 0; i < 9; ++i)
	{
		nNo = this.getAreaNo(this.getIndex(i, nCol));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return -1;
}

int T_CastleListManager::getBottomAreaNo(int nCol)
{
	if (nCol < 0 || nCol >= 3)
	{
		return -1;
	}
	int i = 0;
	int j = 0;
	int nNo = 0;
	for (i = 8; i >= 0; --i)
	{
		nNo = this.getAreaNo(this.getIndex(i, nCol));
		if (nNo > 0)
		{
			return nNo;
		}
	}
	return -1;
}

int T_CastleListManager::getFirstAreaNo()
{
	int i = 0;
	int cnt = this.m_anAreaNo.Numof();
	for (i = 0; i < cnt; ++i)
	{
		ref int rfnAreaNo = this.m_anAreaNo[i];
		if (rfnAreaNo > 0)
		{
			return rfnAreaNo;
		}
	}
	return -1;
}

int T_CastleListManager::getLastAreaNo()
{
	int i = 0;
	int cnt = this.m_anAreaNo.Numof();
	for (i = cnt - 1; i >= 0; --i)
	{
		ref int rfnAreaNo = this.m_anAreaNo[i];
		if (rfnAreaNo > 0)
		{
			return rfnAreaNo;
		}
	}
	return -1;
}

ref T_CastleList T_CastleListManager::get(int nIndex)
{
	if (nIndex < 0 || nIndex >= 27)
	{
		return NULL;
	}
	return this.m_asItem[nIndex];
}

int T_CastleListManager::setAreaNo()
{
	this.clearAreaNo();
	int i = 0;
	int j = 0;
	int nCount = 0;
	for (i = 0; i < 9; ++i)
	{
		for (j = 0; j < 3; ++j)
		{
			int nAreaNo = this.getIndex(i, j) + 1;
			if (ランス城_エリア状態(nAreaNo) > 0)
			{
				if (this.addAreaNo(i, nAreaNo))
				{
					++nCount;
				}
			}
		}
	}
	return nCount;
}

bool T_CastleListManager::addAreaNo(int nRow, int nAreaNo)
{
	if (nRow < 0 || nRow >= 9)
	{
		return false;
	}
	if (nAreaNo <= 0)
	{
		return false;
	}
	int j = 0;
	for (j = 0; j < 3; ++j)
	{
		int idx = this.getIndex(nRow, j);
		ref int rfnAreaNo = this.m_anAreaNo[idx];
		if (rfnAreaNo <= 0)
		{
			rfnAreaNo = nAreaNo;
			return true;
		}
	}
	return false;
}

void T_CastleListManager::clearAreaNo()
{
	this.m_anAreaNo.Fill(0, this.m_anAreaNo.Numof(), -1);
}

int T_CastleListManager::searchAreaNo(int nAreaNo)
{
	if (nAreaNo <= 0)
	{
		return -1;
	}
	return this.m_anAreaNo.Find(0, this.m_anAreaNo.Numof(), nAreaNo);
}

