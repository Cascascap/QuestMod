T_Select::T_Select()
{
	this.clear();
}

T_Select::~T_Select()
{
	this.delete();
}

int T_Select::open(bool bCancel, int nEffectNo, int nSpeed, bool bAuto)
{
	int nRet = 0;
	if (選択データ_有効数() < 1)
	{
		goto label0;
	}
	this.create(bCancel ? 2147483647 : 0);
	this.setShow(true);
	if (nEffectNo > 0)
	{
		_EFFECT(nEffectNo, nSpeed);
	}
	else
	{
		UPDATE(true);
	}
	int nID = 選択データ_カーソル();
	while (true)
	{
		if (!bAuto)
		{
			nID = this.checkSelect(nID);
		}
		else
		{
			this.m_sButton.clickButton(nID);
		}
		if (nID == 2147483647)
		{
			if (bCancel)
			{
				break;
			}
			nID = 選択データ_カーソル();
			continue;
		}
		if (nID > 0)
		{
			nRet = nID;
			break;
		}
		else if (bCancel)
		{
			break;
		}
	}
	this.showComment(0);
	this.delete();
	if (nEffectNo > 0)
	{
		_EFFECT(nEffectNo, nSpeed);
	}
	else
	{
		UPDATE(true);
	}
label0:
	選択データ_解放();
	return nRet;
}

void T_Select::setShow(bool bShow)
{
	int i = 0;
	int cnt = this.m_aspText.Numof();
	this.m_spBase.setShow(bShow);
	this.m_sButton.setShow(bShow);
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspText[i].setShow(bShow);
	}
}

void T_Select::create(int nCloseID)
{
	int i = 0;
	int cnt = 選択データ_数();
	int nZ = 9991;
	int nH = 0;
	bool bLarge = 選択データ_有効数() - 選択データ_拡張項目数() < 3;
	T_SelectData sData;
	T_SelectData sOld;
	this.delete();
	this.m_sButton.create();
	for (i = 0; i < cnt; ++i)
	{
		if (!選択データ_取得(i, sData))
		{
			break;
		}
		if (sData.m_nID > 0)
		{
			if (sData.m_nCgNo > 0)
			{
				nH = this.createSpecial(nH, sData, sOld);
			}
			else if (bLarge)
			{
				nH = this.createButtonLarge(nH, sData, sOld);
			}
			else
			{
				nH = this.createButton(nH, sData, sOld);
			}
		}
		else if (sData.m_nID == 0)
		{
			if (!sData.m_szText.Empty())
			{
				nH = this.createText(nH, sData, sOld);
			}
			else
			{
				nH = this.createSubText(nH, sData, sOld);
			}
		}
		else
		{
			nH = this.createSeparator(nH, sData, sOld);
		}
		sOld = sData;
	}
	if (!sOld.isClear())
	{
		nH += this.getSpace(NULL, sOld);
		if (nH > 762)
		{
			nH = 762;
		}
	}
	this.createBase(376, nH, nZ);
	int nX = this.m_spBase.getPosX();
	int nY = this.m_spBase.getPosY();
	this.setDataPos(nX, nY, nZ);
	this.m_sButton.setZ(nZ + 1);
	this.m_sInputKey.create(0, this.m_sButton);
	this.m_nCloseID = nCloseID;
}

void T_Select::delete()
{
	int i = 0;
	int cnt = this.m_aspText.Numof();
	for (i = 0; i < cnt; ++i)
	{
		this.m_aspText[i].delete();
	}
	this.m_spBase.delete();
	this.m_sButton.delete();
	this.m_sInputKey.delete();
	this.clear();
}

void T_Select::clear()
{
	this.m_nCloseID = -1;
}

void T_Select::createBase(int nW, int nH, int nZ)
{
	選択ＣＧ_土台作成(nW, nH, this.m_spBase);
	int nX = 選択データ_位置Ｘ();
	int nY = 選択データ_位置Ｙ();
	int nW2 = this.m_spBase.getWidth() - 4;
	int nH2 = this.m_spBase.getHeight() - 4;
	nX = nX < 0 ? (1024 - nW) / 2 : nX;
	nY = nY < 0 ? (768 - nH2) / 2 : nY;
	this.m_spBase.setPos(nX, nY);
	this.m_spBase.setZ(nZ);
}

int T_Select::createButton(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	T_Button sButton;
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	if (!選択ＣＧ_ボタン作成(rfData, sButton))
	{
		return nH;
	}
	int nID = rfData.m_nID;
	this.m_sButton.addButton(nID, sButton);
	this.m_sButton.setButtonPos(nID, 18, nH);
	this.m_sButton.setButtonActive(nID, true);
	return nH + 27;
}

int T_Select::createButtonLarge(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	T_Button sButton;
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	if (!選択ＣＧ_でかボタン作成(rfData, sButton))
	{
		return nH;
	}
	int nID = rfData.m_nID;
	this.m_sButton.addButton(nID, sButton);
	this.m_sButton.setButtonPos(nID, 18, nH);
	this.m_sButton.setButtonActive(nID, true);
	return nH + 60;
}

int T_Select::createText(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	if (rfData.m_szText.Empty())
	{
		return 0;
	}
	ref T_TextSprite rfSp = this.getText();
	if (rfSp === NULL)
	{
		return nH;
	}
	選択ＣＧ_テキスト作成(rfData, rfSp);
	rfSp.setPos(7, nH);
	return nH + rfSp.getHeight();
}

int T_Select::createSubText(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	if (rfData.m_szComment.Empty())
	{
		return 0;
	}
	ref T_TextSprite rfSp = this.getText();
	if (rfSp === NULL)
	{
		return nH;
	}
	選択ＣＧ_補助テキスト作成(rfData, rfSp);
	rfSp.setPos(7, nH);
	return nH + rfSp.getHeight();
}

int T_Select::createSeparator(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	ref T_TextSprite rfSp = this.getText();
	if (rfSp === NULL)
	{
		return nH;
	}
	選択ＣＧ_区切り作成(rfSp);
	rfSp.setPos(4, nH);
	return nH + 7;
}

int T_Select::createSpecial(int nH, ref T_SelectData rfData, ref T_SelectData rfOld)
{
	T_Button sButton;
	if (rfData === NULL || rfData.isClear())
	{
		return nH;
	}
	nH += this.getSpace(rfData, rfOld);
	if (!ボタン登録_ＣＧ(this.m_sButton, rfData.m_nID, 18, nH, rfData.m_nCgNo, -1, -1, -2147483648, -2147483648))
	{
		return nH;
	}
	return nH + 27;
}

int T_Select::checkSelect(int nID)
{
	int nRet = 0;
	int nSelectID = 0;
	キー_クリア(true);
	this.resetSelect();
	nID = this.setCursor(nID);
	while (true)
	{
		int nRet2 = this.checkInput(nSelectID);
		if (nRet2 == 2)
		{
			nRet = nSelectID;
			break;
		}
		if (nRet2 != 1)
		{
			this.checkKey(nSelectID);
			if (this.checkCancel())
			{
				break;
			}
		}
		UPDATE(true);
	}
	return nRet;
}

int T_Select::checkInput(ref int nSelectID)
{
	nSelectID = 0;
	switch (this.m_sButton.checkInput(nSelectID))
	{
		case 0:
			break;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			break;
	}
	this.showComment(nSelectID);
	this.m_sButton.setInputFlag(true);
	return 0;
}

int T_Select::checkKey(int nID)
{
	if (this.m_sInputKey.check(nID))
	{
		return 0;
	}
	return 0;
}

bool T_Select::checkCancel()
{
	if (this.m_nCloseID <= 0)
	{
		return false;
	}
	return キャンセル_確認();
}

void T_Select::resetSelect()
{
	this.m_sButton.resetSelect();
	説明_消し(-1);
}

void T_Select::setSelect(int nID, bool bSelect)
{
	this.m_sButton.setButtonSelect(nID, bSelect, true);
	if (bSelect)
	{
		this.showComment(nID);
	}
	else
	{
		説明_消し(nID);
	}
}

int T_Select::setCursor(int nID)
{
	if (nID <= 0)
	{
		nID = 選択データ_先頭ＩＤ();
		T_Rect rcSelect;
		this.m_sButton.getButtonSelectArea(nID, rcSelect);
		マウス_位置設定(rcSelect.m_nEx + 1, rcSelect.m_nEy + 1, true);
		return 0;
	}
	if (キー優先())
	{
		this.resetSelect();
		this.setSelect(nID, true);
	}
	else
	{
		this.m_sButton.setButtonCursor(nID);
	}
	return nID;
}

void T_Select::showComment(int nID)
{
	string szComment = 選択データ_説明(nID);
	if (szComment.Empty())
	{
		説明_消し(-1);
		return;
	}
	array@string aszText;
	テキスト分割_強制改行(szComment, 14, aszText);
	if (説明_表示(nID, "", テキスト統合_改行あり(aszText, -1), "", 500, false) > 0)
	{
		説明_位置設定(702, this.m_sButton.getButtonPosY(nID));
	}
}

void T_Select::setDataPos(int nX, int nY, int nZ)
{
	int i = 0;
	int cnt = this.m_aspText.Numof();
	int nX2 = 0;
	int nY2 = 0;
	ref T_TextSprite rfSp;
	for (i = 0; i < cnt; ++i)
	{
		rfSp <- this.m_aspText[i];
		nX2 = nX + rfSp.getPosX();
		nY2 = nY + rfSp.getPosY();
		rfSp.setPos(nX2, nY2);
		rfSp.setZ(nZ + 1, -1);
	}
	cnt = this.m_sButton.getButtonCount();
	for (i = 0; i < cnt; ++i)
	{
		int nID = this.m_sButton.getButtonID(i);
		nX2 = nX + this.m_sButton.getButtonPosX(nID);
		nY2 = nY + this.m_sButton.getButtonPosY(nID);
		this.m_sButton.setButtonPos(nID, nX2, nY2);
		this.m_sButton.setButtonSelectArea(nID, nX2 - 3, nY2 - 3, this.m_sButton.getButtonWidth(nID) + 6, this.m_sButton.getButtonHeight(nID) + 6);
	}
}

int T_Select::getSpace(ref T_SelectData rfData, ref T_SelectData rfOld)
{
	if (rfOld === NULL || rfOld.isClear())
	{
		return 8;
	}
	if (rfOld.m_nID > 0)
	{
		if (rfData !== NULL && rfData.m_nID > 0)
		{
			return 6;
		}
		return 6;
	}
	if (rfOld.m_nID == 0)
	{
		if (rfData !== NULL && rfData.m_nID == 0)
		{
			return 0;
		}
		return 8;
	}
	if (rfData !== NULL && rfData.m_nID < 0)
	{
		return 1;
	}
	return 6;
}

ref T_TextSprite T_Select::getText()
{
	int i = 0;
	int cnt = this.m_aspText.Numof();
	for (i = 0; i < cnt; ++i)
	{
		if (!this.m_aspText[i].isCreated())
		{
			return this.m_aspText[i];
		}
	}
	return NULL;
}

